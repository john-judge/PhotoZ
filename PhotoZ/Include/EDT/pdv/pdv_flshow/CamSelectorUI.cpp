// generated by Fast Light User Interface Designer (fluid) version 1.0106

#include "CamSelectorUI.h"
#include "CamSelector.h"

CamSelectorUI::CamSelectorUI(CamSelector *p, const char *path) {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = CamSelectorWindow = new Fl_Double_Window(513, 591, "Camera Config Browser");
    w = o;
    o->user_data((void*)(this));
    { Fl_Group* o = new Fl_Group(15, 10, 490, 270);
      { CamBrowser* o = ConfigBrowser = new CamBrowser(15, 10, 490, 270);
        o->box(FL_NO_BOX);
        o->color(FL_BACKGROUND2_COLOR);
        o->selection_color(FL_SELECTION_COLOR);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(14);
        o->labelcolor(FL_BLACK);
        o->callback((Fl_Callback*)camselector_browser_cb);
        o->align(FL_ALIGN_BOTTOM);
        o->when(FL_WHEN_RELEASE_ALWAYS);
        o->user_data(this);
      }
      o->end();
    }
    { Fl_Box* o = new Fl_Box(15, 300, 150, 25, "Camera Type");
      o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
    }
    { Fl_Box* o = new Fl_Box(15, 335, 150, 25, "Config File Name");
      o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
    }
    { Fl_Box* o = new Fl_Box(15, 370, 150, 25, "Config Path");
      o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
    }
    { Fl_Input* o = ConfigFileInput = new Fl_Input(175, 335, 332, 25);
      o->user_data(this);
    }
    { Fl_Input* o = ConfigPathInput = new Fl_Input(175, 370, 332, 25);
      o->user_data(this);
      o->value(path);
    }
    { Fl_Output* o = CameraTypeOutput = new Fl_Output(175, 300, 332, 25);
      o->color(FL_DARK1);
      o->user_data(this);
    }
    { Fl_Button* o = OkButton = new Fl_Button(60, 545, 85, 25, "OK");
      o->callback((Fl_Callback*)camselector_ok_cb);
      o->user_data(this);
    }
    { Fl_Button* o = CancelButton = new Fl_Button(207, 545, 85, 25, "Cancel");
      o->callback((Fl_Callback*)camselector_cancel_cb);
      o->user_data(this);
    }
    { Fl_Button* o = ReloadButton = new Fl_Button(355, 545, 85, 25, "Reload");
      o->callback((Fl_Callback*)camselector_reload_cb);
      o->user_data(this);
    }
    { Fl_Value_Output* o = CameraWidthOutput = new Fl_Value_Output(93, 405, 52, 25, "Width:    ");
      o->maximum(65536);
    }
    { Fl_Value_Output* o = CameraHeightOutput = new Fl_Value_Output(263, 405, 57, 25, "Height:    ");
      o->maximum(65536);
    }
    { Fl_Value_Output* o = CameraDepthOutput = new Fl_Value_Output(433, 405, 52, 25, "Depth:    ");
      o->maximum(65536);
    }
    { Fl_Text_Display* o = InitialCommentOutput = new Fl_Text_Display(15, 440, 485, 95);
      o->buffer(&help_buffer);
    }
    o->end();
    o->resizable(o);
  }
  if (path)
	strcpy(config_path_name,path);
owner = p;
}

void CamSelectorUI::show() {
  CamSelectorWindow->show();
}

CamSelectorUI::~CamSelectorUI() {
  CamSelectorWindow->hide();
delete CamSelectorWindow;
}
