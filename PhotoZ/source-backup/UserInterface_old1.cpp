// generated by Fast Light User Interface Designer (fluid) version 1.0304

#include "UserInterface.h"

void UserInterface::cb_Open_i(Fl_Menu_*, void*) {
  mc->openDataFile();
}
void UserInterface::cb_Open(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Open_i(o,v);
}

void UserInterface::cb_Create_i(Fl_Menu_*, void*) {
  mc->createDir();
}
void UserInterface::cb_Create(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Create_i(o,v);
}

void UserInterface::cb_Exit_i(Fl_Menu_*, void*) {
  mc->quit();
}
void UserInterface::cb_Exit(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Exit_i(o,v);
}

void UserInterface::cb_Save_i(Fl_Menu_*, void*) {
  mc->savePre();
}
void UserInterface::cb_Save(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Save_i(o,v);
}

void UserInterface::cb_Load_i(Fl_Menu_*, void*) {
  mc->loadPre();
}
void UserInterface::cb_Load(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Load_i(o,v);
}

Fl_Menu_Item UserInterface::menu_Menu[] = {
 {"File", 0,  0, 0, 64, (uchar)FL_NORMAL_LABEL, 1, 14, 0},
 {"Open", 0,  (Fl_Callback*)UserInterface::cb_Open, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Create Folder", 0,  (Fl_Callback*)UserInterface::cb_Create, 0, 128, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Exit (Esc)", 0,  (Fl_Callback*)UserInterface::cb_Exit, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"Preference", 0,  0, 0, 64, (uchar)FL_NORMAL_LABEL, 1, 14, 0},
 {"Save Preference", 0,  (Fl_Callback*)UserInterface::cb_Save, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Load Preference", 0,  (Fl_Callback*)UserInterface::cb_Load, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0}
};

void UserInterface::cb_Save1_i(Fl_Button*, void*) {
  mc->exportAw();
}
void UserInterface::cb_Save1(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Save1_i(o,v);
}

void UserInterface::cb_Save2_i(Fl_Button*, void*) {
  mc->exportTw();
}
void UserInterface::cb_Save2(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Save2_i(o,v);
}

void UserInterface::cb_Take_i(Fl_Button*, void*) {
  mc->takeRli();
}
void UserInterface::cb_Take(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_Take_i(o,v);
}

void UserInterface::cb_Record_i(Fl_Button*, void*) {
  mc->record();
}
void UserInterface::cb_Record(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_Record_i(o,v);
}

void UserInterface::cb_saveData2File_i(Fl_Button*, void*) {
  mc->saveData2File();
}
void UserInterface::cb_saveData2File(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_saveData2File_i(o,v);
}

void UserInterface::cb_scheduleB_i(Fl_Check_Button* o, void*) {
  mc->setScheduleFlag(o->value());
}
void UserInterface::cb_scheduleB(Fl_Check_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_scheduleB_i(o,v);
}

void UserInterface::cb_Stop_i(Fl_Button*, void*) {
  mc->stop();
}
void UserInterface::cb_Stop(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_Stop_i(o,v);
}

void UserInterface::cb_RLI_i(Fl_Check_Button* o, void*) {
  mc->setScheduleRliFlag(o->value());
}
void UserInterface::cb_RLI(Fl_Check_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_RLI_i(o,v);
}

void UserInterface::cb_Save3_i(Fl_Button*, void*) {
  mc->saveProcessedData();
}
void UserInterface::cb_Save3(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_Save3_i(o,v);
}

void UserInterface::cb_lfRun_i(Fl_Light_Button* o, void*) {
  mc->setLiveFeed(o->value());
}
void UserInterface::cb_lfRun(Fl_Light_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_lfRun_i(o,v);
}

void UserInterface::cb_Go_i(Fl_Button*, void*) {
  mc->timeCourseMeasurement();
}
void UserInterface::cb_Go(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_Go_i(o,v);
}

void UserInterface::cb_Save4_i(Fl_Button*, void*) {
  mc->saveSelected();
}
void UserInterface::cb_Save4(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Save4_i(o,v);
}

void UserInterface::cb_Load1_i(Fl_Button*, void*) {
  mc->loadSelected();
}
void UserInterface::cb_Load1(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Load1_i(o,v);
}

void UserInterface::cb_Procedure_i(Fl_Button*, void*) {
  mc->doAll();
}
void UserInterface::cb_Procedure(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_Procedure_i(o,v);
}

void UserInterface::cb_Procedure1_i(Fl_Button*, void*) {
  mc->saveProfileValues();
}
void UserInterface::cb_Procedure1(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_Procedure1_i(o,v);
}

void UserInterface::cb_sliceNo_i(Fl_Int_Input* o, void*) {
  mc->setSliceNo(o->value());
}
void UserInterface::cb_sliceNo(Fl_Int_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_sliceNo_i(o,v);
}

void UserInterface::cb_locationNo_i(Fl_Int_Input* o, void*) {
  mc->setLocationNo(o->value());
}
void UserInterface::cb_locationNo(Fl_Int_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_locationNo_i(o,v);
}

void UserInterface::cb_recordNo_i(Fl_Int_Input* o, void*) {
  mc->setRecordNo(o->value());
}
void UserInterface::cb_recordNo(Fl_Int_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_recordNo_i(o,v);
}

void UserInterface::cb_sliceNoDecrease_i(Fl_Button*, void*) {
  mc->decreaseNo(SLICE);
}
void UserInterface::cb_sliceNoDecrease(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_sliceNoDecrease_i(o,v);
}

void UserInterface::cb_locationNoDecrease_i(Fl_Button*, void*) {
  mc->decreaseNo(LOCATION);
}
void UserInterface::cb_locationNoDecrease(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_locationNoDecrease_i(o,v);
}

void UserInterface::cb_recordNoDecrease_i(Fl_Button*, void*) {
  mc->decreaseNo(RECORD);
}
void UserInterface::cb_recordNoDecrease(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_recordNoDecrease_i(o,v);
}

void UserInterface::cb_sliceNoIncrease_i(Fl_Button*, void*) {
  mc->increaseNo(SLICE);
}
void UserInterface::cb_sliceNoIncrease(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_sliceNoIncrease_i(o,v);
}

void UserInterface::cb_locationNoIncrease_i(Fl_Button*, void*) {
  mc->increaseNo(LOCATION);
}
void UserInterface::cb_locationNoIncrease(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_locationNoIncrease_i(o,v);
}

void UserInterface::cb_recordNoIncrease_i(Fl_Button*, void*) {
  mc->increaseNo(RECORD);
}
void UserInterface::cb_recordNoIncrease(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_recordNoIncrease_i(o,v);
}

void UserInterface::cb_trialNoDecrease_i(Fl_Button*, void*) {
  mc->decreaseNo(TRIAL);
}
void UserInterface::cb_trialNoDecrease(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_trialNoDecrease_i(o,v);
}

void UserInterface::cb_trialNoIncrease_i(Fl_Button*, void*) {
  mc->increaseNo(TRIAL);
}
void UserInterface::cb_trialNoIncrease(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_trialNoIncrease_i(o,v);
}

void UserInterface::cb_trialNo_i(Fl_Int_Input* o, void*) {
  mc->setTrialNo(o->value());
}
void UserInterface::cb_trialNo(Fl_Int_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_trialNo_i(o,v);
}

void UserInterface::cb_awShowTrace_i(Fl_Light_Button* o, void*) {
  mc->setAwShowTrace(o->value());
}
void UserInterface::cb_awShowTrace(Fl_Light_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_awShowTrace_i(o,v);
}

void UserInterface::cb_awShowRliValue_i(Fl_Light_Button* o, void*) {
  mc->setAwShowRliValue(o->value());
}
void UserInterface::cb_awShowRliValue(Fl_Light_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_awShowRliValue_i(o,v);
}

void UserInterface::cb_awShowDiodeNum_i(Fl_Light_Button* o, void*) {
  mc->setAwShowDiodeNum(o->value());
}
void UserInterface::cb_awShowDiodeNum(Fl_Light_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_awShowDiodeNum_i(o,v);
}

void UserInterface::cb_None_i(Fl_Menu_*, void*) {
  mc->setAwBackground(BG_None);
}
void UserInterface::cb_None(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_None_i(o,v);
}

void UserInterface::cb_Image_i(Fl_Menu_*, void*) {
  mc->setAwBackground(BG_Image);
}
void UserInterface::cb_Image(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_Image_i(o,v);
}

void UserInterface::cb_RLI1_i(Fl_Menu_*, void*) {
  mc->setAwBackground(BG_Rli);
}
void UserInterface::cb_RLI1(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_RLI1_i(o,v);
}

void UserInterface::cb_Max_i(Fl_Menu_*, void*) {
  mc->setAwBackground(BG_Max_Amplitude);
}
void UserInterface::cb_Max(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_Max_i(o,v);
}

void UserInterface::cb_Spike_i(Fl_Menu_*, void*) {
  mc->setAwBackground(BG_Spike_Amp);
}
void UserInterface::cb_Spike(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_Spike_i(o,v);
}

void UserInterface::cb_Amp_i(Fl_Menu_*, void*) {
  mc->setAwBackground(BG_Half_Amp_Latency);
}
void UserInterface::cb_Amp(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_Amp_i(o,v);
}

void UserInterface::cb_Max1_i(Fl_Menu_*, void*) {
  mc->setAwBackground(BG_Max_Amp_Latency);
}
void UserInterface::cb_Max1(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_Max1_i(o,v);
}

void UserInterface::cb_EPSP_i(Fl_Menu_*, void*) {
  mc->setAwBackground(BG_EPSP_Latency);
}
void UserInterface::cb_EPSP(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_EPSP_i(o,v);
}

Fl_Menu_Item UserInterface::menu_Background[] = {
 {"None", 0,  (Fl_Callback*)UserInterface::cb_None, 0, 128, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Image", 0,  (Fl_Callback*)UserInterface::cb_Image, 0, 128, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"RLI", 0,  (Fl_Callback*)UserInterface::cb_RLI1, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Max Amp", 0,  (Fl_Callback*)UserInterface::cb_Max, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Spike Amp", 0,  (Fl_Callback*)UserInterface::cb_Spike, 0, 128, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"% Amp Latency", 0,  (Fl_Callback*)UserInterface::cb_Amp, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Max Amp Latency", 0,  (Fl_Callback*)UserInterface::cb_Max1, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"EPSP Latency", 0,  (Fl_Callback*)UserInterface::cb_EPSP, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void UserInterface::cb_awFpYScale_i(Fl_Roller* o, void*) {
  mc->setAwFpYScale(o->value());
}
void UserInterface::cb_awFpYScale(Fl_Roller* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_awFpYScale_i(o,v);
}

void UserInterface::cb_awYScale_i(Fl_Roller* o, void*) {
  mc->setAwYScale(o->value());
}
void UserInterface::cb_awYScale(Fl_Roller* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_awYScale_i(o,v);
}

void UserInterface::cb_awXScale_i(Fl_Roller* o, void*) {
  mc->setAwXScale(o->value());
}
void UserInterface::cb_awXScale(Fl_Roller* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_awXScale_i(o,v);
}

void UserInterface::cb_awXShift_i(Fl_Roller* o, void*) {
  mc->setAwXShift(o->value());
}
void UserInterface::cb_awXShift(Fl_Roller* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_awXShift_i(o,v);
}

void UserInterface::cb_Load2_i(Fl_Button*, void*) {
  mc->loadAwImage();
}
void UserInterface::cb_Load2(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_Load2_i(o,v);
}

void UserInterface::cb_Compare_i(Fl_Light_Button* o, void*) {
  mc->setCompareFlag(o->value());
}
void UserInterface::cb_Compare(Fl_Light_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Compare_i(o,v);
}

void UserInterface::cb_record1No_i(Fl_Int_Input* o, void*) {
  mc->setRecordXNo(1,o->value());
}
void UserInterface::cb_record1No(Fl_Int_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_record1No_i(o,v);
}

void UserInterface::cb_record2No_i(Fl_Int_Input* o, void*) {
  mc->setRecordXNo(2,o->value());
}
void UserInterface::cb_record2No(Fl_Int_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_record2No_i(o,v);
}

void UserInterface::cb_Nor2ArrayMax_i(Fl_Light_Button* o, void*) {
  mc->setNormalizationFlag(o->value());
}
void UserInterface::cb_Nor2ArrayMax(Fl_Light_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Nor2ArrayMax_i(o,v);
}

void UserInterface::cb_Average_i(Fl_Light_Button* o, void*) {
  mc->setAverageFlag(o->value());
}
void UserInterface::cb_Average(Fl_Light_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Average_i(o,v);
}

void UserInterface::cb__i(Fl_Value_Slider* o, void*) {
  mc->setNumAveRec(o->value());
}
void UserInterface::cb_(Fl_Value_Slider* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb__i(o,v);
}

void UserInterface::cb_Save5_i(Fl_Button*, void*) {
  mc->saveLatestBackgroundImage();
}
void UserInterface::cb_Save5(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Save5_i(o,v);
}

void UserInterface::cb_resetCam_i(Fl_Button*, void*) {
  mc->resetCamera();
}
void UserInterface::cb_resetCam(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_resetCam_i(o,v);
}

void UserInterface::cb_Save6_i(Fl_Button*, void*) {
  aw->saveBGData();
}
void UserInterface::cb_Save6(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_Save6_i(o,v);
}

void UserInterface::cb_Increase_i(Fl_Menu_*, void*) {
  mc->setIncreaseFlag(1);
}
void UserInterface::cb_Increase(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_Increase_i(o,v);
}

void UserInterface::cb_Decrease_i(Fl_Menu_*, void*) {
  mc->setIncreaseFlag(0);
}
void UserInterface::cb_Decrease(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_Decrease_i(o,v);
}

Fl_Menu_Item UserInterface::menu_Increase[] = {
 {"Increase", 0,  (Fl_Callback*)UserInterface::cb_Increase, 0, 4, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Decrease", 0,  (Fl_Callback*)UserInterface::cb_Decrease, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void UserInterface::cb_Actual_i(Fl_Menu_*, void*) {
  mc->setAbsFlag(1);
}
void UserInterface::cb_Actual(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_Actual_i(o,v);
}

void UserInterface::cb_Percent_i(Fl_Menu_*, void*) {
  mc->setAbsFlag(0);
}
void UserInterface::cb_Percent(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_Percent_i(o,v);
}

Fl_Menu_Item UserInterface::menu_Increase1[] = {
 {"Actual", 0,  (Fl_Callback*)UserInterface::cb_Actual, 0, 4, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Percent", 0,  (Fl_Callback*)UserInterface::cb_Percent, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void UserInterface::cb_digital_binning_i(Fl_Int_Input* o, void*) {
  mc->set_digital_binning(o->value());
}
void UserInterface::cb_digital_binning(Fl_Int_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_digital_binning_i(o,v);
}

void UserInterface::cb_RLI2_i(Fl_Light_Button* o, void*) {
  mc->setRliDiv(o->value());
}
void UserInterface::cb_RLI2(Fl_Light_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_RLI2_i(o,v);
}

void UserInterface::cb_Data_i(Fl_Light_Button* o, void*) {
  mc->setDataInverseFlag(o->value());
}
void UserInterface::cb_Data(Fl_Light_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_Data_i(o,v);
}

void UserInterface::cb_F_i(Fl_Light_Button* o, void*) {
  mc->setEcDataInverseFlag(o->value());
}
void UserInterface::cb_F(Fl_Light_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_F_i(o,v);
}

void UserInterface::cb_startWindow_i(Fl_Int_Input* o, void*) {
  mc->setStartWindow(o->value());
}
void UserInterface::cb_startWindow(Fl_Int_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_startWindow_i(o,v);
}

void UserInterface::cb_widthWindow_i(Fl_Int_Input* o, void*) {
  mc->setWidthWindow(o->value());
}
void UserInterface::cb_widthWindow(Fl_Int_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_widthWindow_i(o,v);
}

void UserInterface::cb_latencyStartTxt_i(Fl_Float_Input* o, void*) {
  mc->setLatencyStart(o->value());
}
void UserInterface::cb_latencyStartTxt(Fl_Float_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_latencyStartTxt_i(o,v);
}

void UserInterface::cb_latencyStartRoller_i(Fl_Roller* o, void*) {
  mc->setLatencyStart(o->value());
}
void UserInterface::cb_latencyStartRoller(Fl_Roller* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_latencyStartRoller_i(o,v);
}

void UserInterface::cb_Width_i(Fl_Value_Slider* o, void*) {
  mc->setLatencyWindow(o->value());
}
void UserInterface::cb_Width(Fl_Value_Slider* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_Width_i(o,v);
}

void UserInterface::cb_of_i(Fl_Value_Slider* o, void*) {
  mc->setPerAmp(o->value()/100.0);
}
void UserInterface::cb_of(Fl_Value_Slider* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_of_i(o,v);
}

void UserInterface::cb_rliScalarRoller_i(Fl_Roller* o, void*) {
  mc->setRliScalar(o->value());
}
void UserInterface::cb_rliScalarRoller(Fl_Roller* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_rliScalarRoller_i(o,v);
}

void UserInterface::cb_rliScalarTxt_i(Fl_Float_Input* o, void*) {
  mc->setRliScalar(o->value());
}
void UserInterface::cb_rliScalarTxt(Fl_Float_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_rliScalarTxt_i(o,v);
}

void UserInterface::cb_Correction_i(Fl_Light_Button* o, void*) {
  mc->setCorrectionFlag(o->value());
}
void UserInterface::cb_Correction(Fl_Light_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_Correction_i(o,v);
}

void UserInterface::cb_RLI3_i(Fl_Button*, void*) {
  mc->rli2Map();
}
void UserInterface::cb_RLI3(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_RLI3_i(o,v);
}

void UserInterface::cb_Save7_i(Fl_Button*, void*) {
  mc->saveMapValues();
}
void UserInterface::cb_Save7(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_Save7_i(o,v);
}

void UserInterface::cb_Load3_i(Fl_Button*, void*) {
  mc->loadMapValues();
}
void UserInterface::cb_Load3(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_Load3_i(o,v);
}

void UserInterface::cb_Make_i(Fl_Button*, void*) {
  mc->makeCorrection();
}
void UserInterface::cb_Make(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_Make_i(o,v);
}

void UserInterface::cb_1_i(Fl_Button*, void*) {
  mc->doSelection(-1);
}
void UserInterface::cb_1(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_1_i(o,v);
}

void UserInterface::cb_2_i(Fl_Button*, void*) {
  mc->doSelection(1);
}
void UserInterface::cb_2(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_2_i(o,v);
}

void UserInterface::cb_3_i(Fl_Button*, void*) {
  mc->doSelection(-2);
}
void UserInterface::cb_3(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_3_i(o,v);
}

void UserInterface::cb_4_i(Fl_Button*, void*) {
  mc->doSelection(2);
}
void UserInterface::cb_4(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_4_i(o,v);
}

void UserInterface::cb_5_i(Fl_Button*, void*) {
  mc->doSelection(-3);
}
void UserInterface::cb_5(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_5_i(o,v);
}

void UserInterface::cb_6_i(Fl_Button*, void*) {
  mc->doSelection(3);
}
void UserInterface::cb_6(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_6_i(o,v);
}

void UserInterface::cb_7_i(Fl_Button*, void*) {
  mc->doSelection(-4);
}
void UserInterface::cb_7(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_7_i(o,v);
}

void UserInterface::cb_8_i(Fl_Button*, void*) {
  mc->doSelection(4);
}
void UserInterface::cb_8(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_8_i(o,v);
}

void UserInterface::cb_Ignore_i(Fl_Button*, void*) {
  mc->ignoreSelectedDiodes();
}
void UserInterface::cb_Ignore(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_Ignore_i(o,v);
}

void UserInterface::cb_None1_i(Fl_Menu_*, void*) {
  mc->setBLCType('N');
}
void UserInterface::cb_None1(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_None1_i(o,v);
}

void UserInterface::cb_Start_i(Fl_Menu_*, void*) {
  mc->setBLCType('S');
}
void UserInterface::cb_Start(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_Start_i(o,v);
}

void UserInterface::cb_Start1_i(Fl_Menu_*, void*) {
  mc->setBLCType('E');
}
void UserInterface::cb_Start1(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_Start1_i(o,v);
}

void UserInterface::cb_Polynomial_i(Fl_Menu_*, void*) {
  mc->setBLCType('P');
}
void UserInterface::cb_Polynomial(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_Polynomial_i(o,v);
}

void UserInterface::cb_Arbitrary_i(Fl_Menu_*, void*) {
  mc->setBLCType('A');
}
void UserInterface::cb_Arbitrary(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_Arbitrary_i(o,v);
}

Fl_Menu_Item UserInterface::menu_BLCType[] = {
 {"None", 0,  (Fl_Callback*)UserInterface::cb_None1, 0, 128, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Start Point", 0,  (Fl_Callback*)UserInterface::cb_Start, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Start and End Points", 0,  (Fl_Callback*)UserInterface::cb_Start1, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Polynomial", 0,  (Fl_Callback*)UserInterface::cb_Polynomial, 0, 128, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Arbitrary", 0,  (Fl_Callback*)UserInterface::cb_Arbitrary, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void UserInterface::cb_polynomialStartPtTxt_i(Fl_Int_Input* o, void*) {
  mc->setPolynomialStartPt(o->value());
}
void UserInterface::cb_polynomialStartPtTxt(Fl_Int_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_polynomialStartPtTxt_i(o,v);
}

void UserInterface::cb_polynomialNumPts_i(Fl_Int_Input* o, void*) {
  mc->setPolynomialNumPts(o->value());
}
void UserInterface::cb_polynomialNumPts(Fl_Int_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_polynomialNumPts_i(o,v);
}

void UserInterface::cb_9_i(Fl_Roller* o, void*) {
  mc->setClampPt(int(o->value()));
}
void UserInterface::cb_9(Fl_Roller* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_9_i(o,v);
}

void UserInterface::cb_PNG_i(Fl_Menu_*, void*) {
  mc->setImageType('P');
}
void UserInterface::cb_PNG(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_PNG_i(o,v);
}

void UserInterface::cb_BMP_i(Fl_Menu_*, void*) {
  mc->setImageType('B');
}
void UserInterface::cb_BMP(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_BMP_i(o,v);
}

void UserInterface::cb_JPEG_i(Fl_Menu_*, void*) {
  mc->setImageType('J');
}
void UserInterface::cb_JPEG(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_JPEG_i(o,v);
}

void UserInterface::cb_TIFF_i(Fl_Menu_*, void*) {
  mc->setImageType('T');
}
void UserInterface::cb_TIFF(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_TIFF_i(o,v);
}

Fl_Menu_Item UserInterface::menu_Output[] = {
 {"PNG", 0,  (Fl_Callback*)UserInterface::cb_PNG, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"BMP", 0,  (Fl_Callback*)UserInterface::cb_BMP, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"JPEG", 0,  (Fl_Callback*)UserInterface::cb_JPEG, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"TIFF", 0,  (Fl_Callback*)UserInterface::cb_TIFF, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void UserInterface::cb_BMP1_i(Fl_Menu_*, void*) {
  static const char type[]="BMP";
aw->setImageFileFormat(type);
}
void UserInterface::cb_BMP1(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_BMP1_i(o,v);
}

void UserInterface::cb_TIF_i(Fl_Menu_*, void*) {
  static const char type[]="TIF";
aw->setImageFileFormat(type);
}
void UserInterface::cb_TIF(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_TIF_i(o,v);
}

Fl_Menu_Item UserInterface::menu_inputImageFormat[] = {
 {"BMP", 0,  (Fl_Callback*)UserInterface::cb_BMP1, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"TIF", 0,  (Fl_Callback*)UserInterface::cb_TIF, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void UserInterface::cb_awImageX0_i(Fl_Roller* o, void*) {
  mc->setAwImageX0(int(o->value()));
}
void UserInterface::cb_awImageX0(Fl_Roller* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_awImageX0_i(o,v);
}

void UserInterface::cb_awImageY0_i(Fl_Roller* o, void*) {
  mc->setAwImageY0(int(o->value()));
}
void UserInterface::cb_awImageY0(Fl_Roller* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_awImageY0_i(o,v);
}

void UserInterface::cb_awImageXSize_i(Fl_Value_Slider* o, void*) {
  mc->setAwImageXSize(int(o->value()));
}
void UserInterface::cb_awImageXSize(Fl_Value_Slider* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_awImageXSize_i(o,v);
}

void UserInterface::cb_awImageYSize_i(Fl_Value_Slider* o, void*) {
  mc->setAwImageYSize(int(o->value()));
}
void UserInterface::cb_awImageYSize(Fl_Value_Slider* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_awImageYSize_i(o,v);
}

void UserInterface::cb_White_i(Fl_Light_Button* o, void*) {
  mc->setBgColor(o->value());
}
void UserInterface::cb_White(Fl_Light_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_White_i(o,v);
}

void UserInterface::cb_Color_i(Fl_Menu_*, void*) {
  mc->setColorMode('1');
}
void UserInterface::cb_Color(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_Color_i(o,v);
}

void UserInterface::cb_Color1_i(Fl_Menu_*, void*) {
  mc->setColorMode('2');
}
void UserInterface::cb_Color1(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_Color1_i(o,v);
}

void UserInterface::cb_Blue_i(Fl_Menu_*, void*) {
  mc->setColorMode('B');
}
void UserInterface::cb_Blue(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_Blue_i(o,v);
}

void UserInterface::cb_Gray_i(Fl_Menu_*, void*) {
  mc->setColorMode('G');
}
void UserInterface::cb_Gray(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_Gray_i(o,v);
}

Fl_Menu_Item UserInterface::menu_Color[] = {
 {"Color Scale 1", 0,  (Fl_Callback*)UserInterface::cb_Color, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Color Scale 2", 0,  (Fl_Callback*)UserInterface::cb_Color1, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Blue to Red", 0,  (Fl_Callback*)UserInterface::cb_Blue, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Gray Scale", 0,  (Fl_Callback*)UserInterface::cb_Gray, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void UserInterface::cb_Bounds_i(Fl_Menu_*, void*) {
  mc->setColorControlMode('B');
}
void UserInterface::cb_Bounds(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_Bounds_i(o,v);
}

void UserInterface::cb_Center_i(Fl_Menu_*, void*) {
  mc->setColorControlMode('C');
}
void UserInterface::cb_Center(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_Center_i(o,v);
}

Fl_Menu_Item UserInterface::menu_Control[] = {
 {"Bounds", 0,  (Fl_Callback*)UserInterface::cb_Bounds, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Center - Amp", 0,  (Fl_Callback*)UserInterface::cb_Center, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void UserInterface::cb_a_i(Fl_Roller* o, void*) {
  mc->setColorUpperBound(o->value());
}
void UserInterface::cb_a(Fl_Roller* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_a_i(o,v);
}

void UserInterface::cb_b_i(Fl_Roller* o, void*) {
  mc->setColorLowerBound(o->value());
}
void UserInterface::cb_b(Fl_Roller* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_b_i(o,v);
}

void UserInterface::cb_c_i(Fl_Roller* o, void*) {
  mc->setColorAmp(o->value());
}
void UserInterface::cb_c(Fl_Roller* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_c_i(o,v);
}

void UserInterface::cb_d_i(Fl_Roller* o, void*) {
  mc->setColorCenter(o->value());
}
void UserInterface::cb_d(Fl_Roller* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_d_i(o,v);
}

void UserInterface::cb_T_i(Fl_Light_Button* o, void*) {
  mc->setTemporalFilterFlag(o->value());
}
void UserInterface::cb_T(Fl_Light_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_T_i(o,v);
}

void UserInterface::cb_Binomial_i(Fl_Menu_*, void*) {
  mc->setTemporalFilterType('G');
}
void UserInterface::cb_Binomial(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_Binomial_i(o,v);
}

void UserInterface::cb_Mov_i(Fl_Menu_*, void*) {
  mc->setTemporalFilterType('M');
}
void UserInterface::cb_Mov(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_Mov_i(o,v);
}

Fl_Menu_Item UserInterface::menu_Filter[] = {
 {"Binomial", 0,  (Fl_Callback*)UserInterface::cb_Binomial, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Mov Ave", 0,  (Fl_Callback*)UserInterface::cb_Mov, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void UserInterface::cb_S_i(Fl_Light_Button* o, void*) {
  mc->setSpatialFilterFlag(o->value());
}
void UserInterface::cb_S(Fl_Light_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_S_i(o,v);
}

void UserInterface::cb_s_i(Fl_Value_Slider* o, void*) {
  mc->setSpatialFilterSigma(o->value());
}
void UserInterface::cb_s(Fl_Value_Slider* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_s_i(o,v);
}

void UserInterface::cb_Radius_i(Fl_Value_Slider* o, void*) {
  mc->setTemporalFilterWidth(o->value());
}
void UserInterface::cb_Radius(Fl_Value_Slider* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_Radius_i(o,v);
}

void UserInterface::cb_None2_i(Fl_Menu_*, void*) {
  mc->setTwValueType('N');
}
void UserInterface::cb_None2(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_None2_i(o,v);
}

void UserInterface::cb_RLI4_i(Fl_Menu_*, void*) {
  mc->setTwValueType('R');
}
void UserInterface::cb_RLI4(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_RLI4_i(o,v);
}

void UserInterface::cb_Max2_i(Fl_Menu_*, void*) {
  mc->setTwValueType('M');
}
void UserInterface::cb_Max2(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Max2_i(o,v);
}

void UserInterface::cb_Max3_i(Fl_Menu_*, void*) {
  mc->setTwValueType('4');
}
void UserInterface::cb_Max3(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Max3_i(o,v);
}

void UserInterface::cb_Max4_i(Fl_Menu_*, void*) {
  mc->setTwValueType('5');
}
void UserInterface::cb_Max4(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Max4_i(o,v);
}

void UserInterface::cb_Max5_i(Fl_Menu_*, void*) {
  mc->setTwValueType('6');
}
void UserInterface::cb_Max5(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Max5_i(o,v);
}

void UserInterface::cb_Max6_i(Fl_Menu_*, void*) {
  mc->setTwValueType('7');
}
void UserInterface::cb_Max6(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Max6_i(o,v);
}

void UserInterface::cb_Max7_i(Fl_Menu_*, void*) {
  mc->setTwValueType('8');
}
void UserInterface::cb_Max7(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Max7_i(o,v);
}

void UserInterface::cb_Max8_i(Fl_Menu_*, void*) {
  mc->setTwValueType('9');
}
void UserInterface::cb_Max8(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Max8_i(o,v);
}

void UserInterface::cb_Spike1_i(Fl_Menu_*, void*) {
  mc->setTwValueType('p');
}
void UserInterface::cb_Spike1(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Spike1_i(o,v);
}

void UserInterface::cb_Amplitude_i(Fl_Menu_*, void*) {
  mc->setTwValueType('A');
}
void UserInterface::cb_Amplitude(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Amplitude_i(o,v);
}

void UserInterface::cb_SD_i(Fl_Menu_*, void*) {
  mc->setTwValueType('S');
}
void UserInterface::cb_SD(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_SD_i(o,v);
}

void UserInterface::cb_Amp1_i(Fl_Menu_*, void*) {
  mc->setTwValueType('H');
}
void UserInterface::cb_Amp1(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Amp1_i(o,v);
}

void UserInterface::cb_Max9_i(Fl_Menu_*, void*) {
  mc->setTwValueType('L');
}
void UserInterface::cb_Max9(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Max9_i(o,v);
}

Fl_Menu_Item UserInterface::menu_Value[] = {
 {"None", 0,  (Fl_Callback*)UserInterface::cb_None2, 0, 128, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"RLI", 0,  (Fl_Callback*)UserInterface::cb_RLI4, 0, 128, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Max Amp", 0,  (Fl_Callback*)UserInterface::cb_Max2, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Max Amp SD", 0,  (Fl_Callback*)UserInterface::cb_Max3, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Max Amp Cha", 0,  (Fl_Callback*)UserInterface::cb_Max4, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Max Amp Cha SD", 0,  (Fl_Callback*)UserInterface::cb_Max5, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Max Amp Per Cha", 0,  (Fl_Callback*)UserInterface::cb_Max6, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Max Amp Per Cha SD", 0,  (Fl_Callback*)UserInterface::cb_Max7, 0, 128, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Max Slope", 0,  (Fl_Callback*)UserInterface::cb_Max8, 0, 128, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Spike Amp", 0,  (Fl_Callback*)UserInterface::cb_Spike1, 0, 128, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Amplitude", 0,  (Fl_Callback*)UserInterface::cb_Amplitude, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"SD", 0,  (Fl_Callback*)UserInterface::cb_SD, 0, 128, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"% Amp Latency", 0,  (Fl_Callback*)UserInterface::cb_Amp1, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Max Amp Latency", 0,  (Fl_Callback*)UserInterface::cb_Max9, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void UserInterface::cb_Trace_i(Fl_Light_Button* o, void*) {
  tw->setShowTrace(o->value());
tw->redraw();
}
void UserInterface::cb_Trace(Fl_Light_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Trace_i(o,v);
}

void UserInterface::cb_Alpha_i(Fl_Light_Button* o, void*) {
  tw->setShowAlpha(o->value());
tw->redraw();
}
void UserInterface::cb_Alpha(Fl_Light_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Alpha_i(o,v);
}

void UserInterface::cb_Vm_i(Fl_Light_Button* o, void*) {
  tw->setShowVm(o->value());
tw->redraw();
}
void UserInterface::cb_Vm(Fl_Light_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Vm_i(o,v);
}

void UserInterface::cb_twShowPointLine_i(Fl_Light_Button* o, void*) {
  tw->setShowPointLine(o->value());
tw->redraw();
}
void UserInterface::cb_twShowPointLine(Fl_Light_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_twShowPointLine_i(o,v);
}

void UserInterface::cb_Time_i(Fl_Light_Button* o, void*) {
  mc->setTwTimeCourseFlag(o->value());
}
void UserInterface::cb_Time(Fl_Light_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Time_i(o,v);
}

void UserInterface::cb_Saved_i(Fl_Light_Button* o, void*) {
  tw->setShowSavedTraces(o->value());
tw->redraw();
}
void UserInterface::cb_Saved(Fl_Light_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Saved_i(o,v);
}

void UserInterface::cb_Slope_i(Fl_Light_Button* o, void*) {
  tw->setShowSlope(o->value());
tw->redraw();
}
void UserInterface::cb_Slope(Fl_Light_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Slope_i(o,v);
}

void UserInterface::cb_Optical_i(Fl_Menu_* o, void*) {
  tw->setHandleType('o');
}
void UserInterface::cb_Optical(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Optical_i(o,v);
}

void UserInterface::cb_Field_i(Fl_Menu_*, void*) {
  tw->setHandleType('f');
}
void UserInterface::cb_Field(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Field_i(o,v);
}

void UserInterface::cb_LTP_i(Fl_Menu_*, void*) {
  tw->setHandleType('l');
}
void UserInterface::cb_LTP(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_LTP_i(o,v);
}

Fl_Menu_Item UserInterface::menu_Mode[] = {
 {"Optical", 0,  (Fl_Callback*)UserInterface::cb_Optical, 0, 4, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Field", 0,  (Fl_Callback*)UserInterface::cb_Field, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"LTP", 0,  (Fl_Callback*)UserInterface::cb_LTP, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void UserInterface::cb_RLI5_i(Fl_Menu_*, void*) {
  mc->setTwTimeCourseType('R');
}
void UserInterface::cb_RLI5(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_RLI5_i(o,v);
}

void UserInterface::cb_Amplitude1_i(Fl_Menu_*, void*) {
  mc->setTwTimeCourseType('A');
}
void UserInterface::cb_Amplitude1(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_Amplitude1_i(o,v);
}

void UserInterface::cb_Maxa_i(Fl_Menu_*, void*) {
  mc->setTwTimeCourseType('M');
}
void UserInterface::cb_Maxa(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_Maxa_i(o,v);
}

void UserInterface::cb_Amp2_i(Fl_Menu_*, void*) {
  mc->setTwTimeCourseType('H');
}
void UserInterface::cb_Amp2(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_Amp2_i(o,v);
}

void UserInterface::cb_Maxb_i(Fl_Menu_*, void*) {
  mc->setTwTimeCourseType('L');
}
void UserInterface::cb_Maxb(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_Maxb_i(o,v);
}

Fl_Menu_Item UserInterface::menu_timeCourseType[] = {
 {"RLI", 0,  (Fl_Callback*)UserInterface::cb_RLI5, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Amplitude", 0,  (Fl_Callback*)UserInterface::cb_Amplitude1, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Max Amp", 0,  (Fl_Callback*)UserInterface::cb_Maxa, 0, 128, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"% Amp Latency", 0,  (Fl_Callback*)UserInterface::cb_Amp2, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Max Amp Latency", 0,  (Fl_Callback*)UserInterface::cb_Maxb, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void UserInterface::cb_twShowFileLine_i(Fl_Light_Button* o, void*) {
  tw->setShowFileLine(o->value());
tw->redraw();
}
void UserInterface::cb_twShowFileLine(Fl_Light_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_twShowFileLine_i(o,v);
}

void UserInterface::cb_Reference_i(Fl_Light_Button* o, void*) {
  tw->setShowRef(o->value());
tw->redraw();
}
void UserInterface::cb_Reference(Fl_Light_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_Reference_i(o,v);
}

void UserInterface::cb_Save8_i(Fl_Button*, void*) {
  mc->saveTraces2();
}
void UserInterface::cb_Save8(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_Save8_i(o,v);
}

void UserInterface::cb_Normalize_i(Fl_Light_Button* o, void*) {
  mc->setNormalization(o->value());
}
void UserInterface::cb_Normalize(Fl_Light_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_Normalize_i(o,v);
}

void UserInterface::cb_Superimpose_i(Fl_Light_Button* o, void*) {
  tw->setSuperimpose(o->value());
tw->redraw();
}
void UserInterface::cb_Superimpose(Fl_Light_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_Superimpose_i(o,v);
}

void UserInterface::cb_Normalize1_i(Fl_Light_Button* o, void*) {
  tw->setTimeCourseNormalizationFlag(o->value());
tw->redraw();
}
void UserInterface::cb_Normalize1(Fl_Light_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_Normalize1_i(o,v);
}

void UserInterface::cb_R1Slider_i(Fl_Slider* o, void*) {
  char buf[16];
sprintf(buf,"%.3g",tw->convertFittingVar(4,o->value()));
R1Txt->value(buf);

tw->setFittingVar(4,o->value());
tw->redraw();
}
void UserInterface::cb_R1Slider(Fl_Slider* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_R1Slider_i(o,v);
}

void UserInterface::cb_R2Slider_i(Fl_Slider* o, void*) {
  char buf[16];
sprintf(buf,"%.3g",tw->convertFittingVar(3,o->value()));
R2Txt->value(buf);

tw->setFittingVar(3,o->value());
tw->redraw();
}
void UserInterface::cb_R2Slider(Fl_Slider* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_R2Slider_i(o,v);
}

void UserInterface::cb_alphaTauSlider_i(Fl_Slider* o, void*) {
  char buf[16];
sprintf(buf,"%.3g",tw->convertFittingVar(2,o->value()));
alphaTauTxt->value(buf);

tw->setFittingVar(2,o->value());
tw->redraw();
}
void UserInterface::cb_alphaTauSlider(Fl_Slider* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_alphaTauSlider_i(o,v);
}

void UserInterface::cb_alphaAmplitudeSlider_i(Fl_Slider* o, void*) {
  char buf[16];
sprintf(buf,"%.3g",tw->convertFittingVar(1,o->value()));
alphaAmpTxt->value(buf);

tw->setFittingVar(1,o->value());
tw->redraw();
}
void UserInterface::cb_alphaAmplitudeSlider(Fl_Slider* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_alphaAmplitudeSlider_i(o,v);
}

void UserInterface::cb_Fit_i(Fl_Button*, void*) {
  mc->fitVm();
}
void UserInterface::cb_Fit(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_Fit_i(o,v);
}

void UserInterface::cb_Fit1_i(Fl_Button*, void*) {
  mc->fitVmX10();
}
void UserInterface::cb_Fit1(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_Fit1_i(o,v);
}

void UserInterface::cb_alphaStartPointRoller_i(Fl_Roller* o, void*) {
  char buf[16];
_gcvt(o->value(),4,buf);
tw->setFittingVar(0,o->value());
tw->redraw();
alphaStartPointTxt->value(buf);
}
void UserInterface::cb_alphaStartPointRoller(Fl_Roller* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_alphaStartPointRoller_i(o,v);
}

void UserInterface::cb_alphaStartPointTxt_i(Fl_Int_Input* o, void*) {
  int value=atoi(o->value());
tw->setFittingVar(0,value);
tw->redraw();
alphaStartPointRoller->value(value);
}
void UserInterface::cb_alphaStartPointTxt(Fl_Int_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_alphaStartPointTxt_i(o,v);
}

void UserInterface::cb_alphaSpikeStart_i(Fl_Int_Input* o, void*) {
  mc->setAlphaSpikeStart(o->value());
}
void UserInterface::cb_alphaSpikeStart(Fl_Int_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_alphaSpikeStart_i(o,v);
}

void UserInterface::cb_alphaSpikeEnd_i(Fl_Int_Input* o, void*) {
  mc->setAlphaSpikeEnd(o->value());
}
void UserInterface::cb_alphaSpikeEnd(Fl_Int_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_alphaSpikeEnd_i(o,v);
}

void UserInterface::cb_alphaWindow_i(Fl_Int_Input*, void*) {
  tw->redraw();
}
void UserInterface::cb_alphaWindow(Fl_Int_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_alphaWindow_i(o,v);
}

void UserInterface::cb_button_i(Fl_Check_Button* o, void*) {
  tw->setChangeBits(1,o->value());
}
void UserInterface::cb_button(Fl_Check_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_button_i(o,v);
}

void UserInterface::cb_button1_i(Fl_Check_Button* o, void*) {
  tw->setChangeBits(2,o->value());
}
void UserInterface::cb_button1(Fl_Check_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_button1_i(o,v);
}

void UserInterface::cb_button2_i(Fl_Check_Button* o, void*) {
  tw->setChangeBits(3,o->value());
}
void UserInterface::cb_button2(Fl_Check_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_button2_i(o,v);
}

void UserInterface::cb_button3_i(Fl_Check_Button* o, void*) {
  tw->setChangeBits(0,o->value());
}
void UserInterface::cb_button3(Fl_Check_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_button3_i(o,v);
}

void UserInterface::cb_button4_i(Fl_Check_Button* o, void*) {
  tw->setChangeBits(4,o->value());
}
void UserInterface::cb_button4(Fl_Check_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_button4_i(o,v);
}

void UserInterface::cb_Set_i(Fl_Button*, void*) {
  mc->setFittingVarAllDiodes();
}
void UserInterface::cb_Set(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_Set_i(o,v);
}

void UserInterface::cb_Fit2_i(Fl_Button*, void*) {
  mc->fitAllDiodes();
}
void UserInterface::cb_Fit2(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_Fit2_i(o,v);
}

void UserInterface::cb_Cal_i(Fl_Light_Button* o, void*) {
  tw->setCalWholeVm(o->value());
tw->redraw();
}
void UserInterface::cb_Cal(Fl_Light_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_Cal_i(o,v);
}

void UserInterface::cb_Auto_i(Fl_Light_Button* o, void*) {
  mc->setAutoDetectSpike(o->value());
}
void UserInterface::cb_Auto(Fl_Light_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_Auto_i(o,v);
}

void UserInterface::cb_spikeSlopeThreshold_i(Fl_Float_Input* o, void*) {
  tw->setSpikeSlopeThreshold(atof(o->value()));
}
void UserInterface::cb_spikeSlopeThreshold(Fl_Float_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_spikeSlopeThreshold_i(o,v);
}

void UserInterface::cb_spikeAmpThreshold_i(Fl_Float_Input* o, void*) {
  tw->setSpikeAmpThreshold(atof(o->value()));
}
void UserInterface::cb_spikeAmpThreshold(Fl_Float_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_spikeAmpThreshold_i(o,v);
}

void UserInterface::cb_Init_i(Fl_Button*, void*) {
  mc->initializeFittingAmp();
}
void UserInterface::cb_Init(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_Init_i(o,v);
}

void UserInterface::cb_onsetLowerBoundTxt_i(Fl_Int_Input* o, void*) {
  tw->setOnsetBounds(0,o->value());
}
void UserInterface::cb_onsetLowerBoundTxt(Fl_Int_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_onsetLowerBoundTxt_i(o,v);
}

void UserInterface::cb_onsetHigherBoundTxt_i(Fl_Int_Input* o, void*) {
  tw->setOnsetBounds(1,o->value());
}
void UserInterface::cb_onsetHigherBoundTxt(Fl_Int_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_onsetHigherBoundTxt_i(o,v);
}

void UserInterface::cb_Traces_i(Fl_Button*, void*) {
  tw->saveTraces();
}
void UserInterface::cb_Traces(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_Traces_i(o,v);
}

void UserInterface::cb_pt_i(Fl_Menu_*, void*) {
  tw->setSave2FileType('p');
}
void UserInterface::cb_pt(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_pt_i(o,v);
}

void UserInterface::cb_ms_i(Fl_Menu_*, void*) {
  tw->setSave2FileType('m');
}
void UserInterface::cb_ms(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ms_i(o,v);
}

Fl_Menu_Item UserInterface::menu_choice[] = {
 {"(pt)", 0,  (Fl_Callback*)UserInterface::cb_pt, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"(ms)", 0,  (Fl_Callback*)UserInterface::cb_ms, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void UserInterface::cb_Save9_i(Fl_Button*, void*) {
  tw->saveTimeCourse();
}
void UserInterface::cb_Save9(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_Save9_i(o,v);
}

void UserInterface::cb_Savea_i(Fl_Button*, void*) {
  mc->saveValues();
}
void UserInterface::cb_Savea(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_Savea_i(o,v);
}

void UserInterface::cb_twSaveTracesStartPt_i(Fl_Int_Input* o, void*) {
  tw->setSaveTracesPt('s',o->value());
}
void UserInterface::cb_twSaveTracesStartPt(Fl_Int_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_twSaveTracesStartPt_i(o,v);
}

void UserInterface::cb_twSaveTracesEndPt_i(Fl_Int_Input* o, void*) {
  tw->setSaveTracesPt('e',o->value());
}
void UserInterface::cb_twSaveTracesEndPt(Fl_Int_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_twSaveTracesEndPt_i(o,v);
}

void UserInterface::cb_Saveb_i(Fl_Button*, void*) {
  tw->saveFittingVar();
}
void UserInterface::cb_Saveb(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_Saveb_i(o,v);
}

void UserInterface::cb_Savec_i(Fl_Button*, void*) {
  tw->saveEPSP();
}
void UserInterface::cb_Savec(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_Savec_i(o,v);
}

void UserInterface::cb_Savee_i(Fl_Button*, void*) {
  tw->saveAlphaVm();
}
void UserInterface::cb_Savee(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_Savee_i(o,v);
}

void UserInterface::cb_Load4_i(Fl_Button*, void*) {
  tw->loadFittingVar();
}
void UserInterface::cb_Load4(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_Load4_i(o,v);
}

void UserInterface::cb_awStartNewRegion_i(Fl_Light_Button* o, void*) {
  mc->setContinuous(o->value());
}
void UserInterface::cb_awStartNewRegion(Fl_Light_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_awStartNewRegion_i(o,v);
}

void UserInterface::cb_New_i(Fl_Menu_*, void*) {
  mc->setTwValueType('N');
}
void UserInterface::cb_New(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_New_i(o,v);
}

Fl_Menu_Item UserInterface::menu_Current[] = {
 {"New Region", 0,  (Fl_Callback*)UserInterface::cb_New, 0, 128, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void UserInterface::cb_resetOnset_i(Fl_Float_Input* o, void*) {
  mc->setResetOnset(o->value());
}
void UserInterface::cb_resetOnset(Fl_Float_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_resetOnset_i(o,v);
}

void UserInterface::cb_resetDuration_i(Fl_Float_Input* o, void*) {
  mc->setResetDuration(o->value());
}
void UserInterface::cb_resetDuration(Fl_Float_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_resetDuration_i(o,v);
}

void UserInterface::cb_shutterOnset_i(Fl_Float_Input* o, void*) {
  mc->setShutterOnset(o->value());
}
void UserInterface::cb_shutterOnset(Fl_Float_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_shutterOnset_i(o,v);
}

void UserInterface::cb_shutterDuration_i(Fl_Float_Input* o, void*) {
  mc->setShutterDuration(o->value());
}
void UserInterface::cb_shutterDuration(Fl_Float_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_shutterDuration_i(o,v);
}

void UserInterface::cb_acquiOnset_i(Fl_Int_Input* o, void*) {
  mc->setAcquiOnset(o->value());
}
void UserInterface::cb_acquiOnset(Fl_Int_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_acquiOnset_i(o,v);
}

void UserInterface::cb_sti1Onset_i(Fl_Float_Input* o, void*) {
  mc->setStiOnset(1,o->value());
}
void UserInterface::cb_sti1Onset(Fl_Float_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_sti1Onset_i(o,v);
}

void UserInterface::cb_sti1Duration_i(Fl_Float_Input* o, void*) {
  mc->setStiDuration(1,o->value());
}
void UserInterface::cb_sti1Duration(Fl_Float_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_sti1Duration_i(o,v);
}

void UserInterface::cb_sti2Onset_i(Fl_Float_Input* o, void*) {
  mc->setStiOnset(2,o->value());
}
void UserInterface::cb_sti2Onset(Fl_Float_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_sti2Onset_i(o,v);
}

void UserInterface::cb_sti2Duration_i(Fl_Float_Input* o, void*) {
  mc->setStiDuration(2,o->value());
}
void UserInterface::cb_sti2Duration(Fl_Float_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_sti2Duration_i(o,v);
}

void UserInterface::cb_numPts_i(Fl_Int_Input* o, void*) {
  mc->setNumPts(o->value());
}
void UserInterface::cb_numPts(Fl_Int_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_numPts_i(o,v);
}

void UserInterface::cb_CameraProgram_i(Fl_Choice* o, void*) {
  mc->setCameraProgram(o->value());
}
void UserInterface::cb_CameraProgram(Fl_Choice* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_CameraProgram_i(o,v);
}

void UserInterface::cb_numBursts1_i(Fl_Input* o, void*) {
  mc->setNumBursts(1,o->value());
}
void UserInterface::cb_numBursts1(Fl_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_numBursts1_i(o,v);
}

void UserInterface::cb_intBursts1_i(Fl_Input* o, void*) {
  mc->setIntBursts(1,o->value());
}
void UserInterface::cb_intBursts1(Fl_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_intBursts1_i(o,v);
}

void UserInterface::cb_numPulses1_i(Fl_Input* o, void*) {
  mc->setNumPulses(1,o->value());
}
void UserInterface::cb_numPulses1(Fl_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_numPulses1_i(o,v);
}

void UserInterface::cb_intPulses1_i(Fl_Input* o, void*) {
  mc->setIntPulses(1,o->value());
}
void UserInterface::cb_intPulses1(Fl_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_intPulses1_i(o,v);
}

void UserInterface::cb_numBursts2_i(Fl_Input* o, void*) {
  mc->setNumBursts(2,o->value());
}
void UserInterface::cb_numBursts2(Fl_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_numBursts2_i(o,v);
}

void UserInterface::cb_intBursts2_i(Fl_Input* o, void*) {
  mc->setIntBursts(2,o->value());
}
void UserInterface::cb_intBursts2(Fl_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_intBursts2_i(o,v);
}

void UserInterface::cb_numPulses2_i(Fl_Input* o, void*) {
  mc->setNumPulses(2,o->value());
}
void UserInterface::cb_numPulses2(Fl_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_numPulses2_i(o,v);
}

void UserInterface::cb_intPulses2_i(Fl_Input* o, void*) {
  mc->setIntPulses(2,o->value());
}
void UserInterface::cb_intPulses2(Fl_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_intPulses2_i(o,v);
}

void UserInterface::cb_intRecords_i(Fl_Int_Input* o, void*) {
  mc->setIntRecords(o->value());
}
void UserInterface::cb_intRecords(Fl_Int_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_intRecords_i(o,v);
}

void UserInterface::cb_numRecords_i(Fl_Int_Input* o, void*) {
  mc->setNumRecords(o->value());
}
void UserInterface::cb_numRecords(Fl_Int_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_numRecords_i(o,v);
}

void UserInterface::cb_numTrials_i(Fl_Int_Input* o, void*) {
  mc->setNumTrials(o->value());
}
void UserInterface::cb_numTrials(Fl_Int_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_numTrials_i(o,v);
}

void UserInterface::cb_intTrials_i(Fl_Int_Input* o, void*) {
  mc->setIntTrials(o->value());
}
void UserInterface::cb_intTrials(Fl_Int_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_intTrials_i(o,v);
}

void UserInterface::cb_e_i(Fl_Button*, void*) {
  mc->setAmplifierGain(Decrease_Acqui_Gain);
}
void UserInterface::cb_e(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_e_i(o,v);
}

void UserInterface::cb_f_i(Fl_Button*, void*) {
  mc->setAmplifierGain(Increase_Acqui_Gain);
}
void UserInterface::cb_f(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_f_i(o,v);
}

void UserInterface::cb_Map_i(Fl_Menu_*, void*) {
  cw->setMapFlag(1);
cw->valid(0);
cw->redraw();
}
void UserInterface::cb_Map(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Map_i(o,v);
}

void UserInterface::cb_Movie_i(Fl_Menu_*, void*) {
  cw->setMapFlag(0);
cw->valid(0);
cw->redraw();
}
void UserInterface::cb_Movie(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Movie_i(o,v);
}

Fl_Menu_Item UserInterface::menu_Mode1[] = {
 {"Map", 0,  (Fl_Callback*)UserInterface::cb_Map, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Movie", 0,  (Fl_Callback*)UserInterface::cb_Movie, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void UserInterface::cb_RLI6_i(Fl_Menu_*, void*) {
  cw->setMapMode(CW_RLI);
cw->valid(0);
cw->redraw();
}
void UserInterface::cb_RLI6(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_RLI6_i(o,v);
}

void UserInterface::cb_Maxc_i(Fl_Menu_*, void*) {
  cw->setMapMode(CW_Max_Amp);
cw->valid(0);
cw->redraw();
}
void UserInterface::cb_Maxc(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Maxc_i(o,v);
}

void UserInterface::cb_Spike2_i(Fl_Menu_*, void*) {
  cw->setMapMode(CW_Spike_Amp);
cw->valid(0);
cw->redraw();
}
void UserInterface::cb_Spike2(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Spike2_i(o,v);
}

void UserInterface::cb_Amp3_i(Fl_Menu_*, void*) {
  cw->setMapMode(CW_Per_Amp_Latency);
cw->valid(0);
cw->redraw();
}
void UserInterface::cb_Amp3(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Amp3_i(o,v);
}

void UserInterface::cb_Maxd_i(Fl_Menu_*, void*) {
  cw->setMapMode(CW_Max_Amp_Latency);
cw->valid(0);
cw->redraw();
}
void UserInterface::cb_Maxd(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Maxd_i(o,v);
}

Fl_Menu_Item UserInterface::menu_mapFeatureType[] = {
 {"RLI", 0,  (Fl_Callback*)UserInterface::cb_RLI6, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Max Amp", 0,  (Fl_Callback*)UserInterface::cb_Maxc, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Spike Amp", 0,  (Fl_Callback*)UserInterface::cb_Spike2, 0, 128, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"% Amp Latency", 0,  (Fl_Callback*)UserInterface::cb_Amp3, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Max Amp Latency", 0,  (Fl_Callback*)UserInterface::cb_Maxd, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void UserInterface::cb_Amp4_i(Fl_Menu_*, void*) {
  cw->setStopFlag(1);
cw->setMovieMode(ColorWindow::AmpNor2ArrayMax);
cw->redraw();
}
void UserInterface::cb_Amp4(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Amp4_i(o,v);
}

void UserInterface::cb_Amp5_i(Fl_Menu_*, void*) {
  cw->setStopFlag(1);
cw->setMovieMode(ColorWindow::AmpNor2DiodeMax);
cw->redraw();
}
void UserInterface::cb_Amp5(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Amp5_i(o,v);
}

Fl_Menu_Item UserInterface::menu_Movie[] = {
 {"Amp (Normalized to array maximum)", 0,  (Fl_Callback*)UserInterface::cb_Amp4, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Amp (Normalized to diode maximum)", 0,  (Fl_Callback*)UserInterface::cb_Amp5, 0, 128, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void UserInterface::cb_Color2_i(Fl_Menu_*, void*) {
  cw->setTextureIndex(0);
cw->valid(0);
cw->redraw();
}
void UserInterface::cb_Color2(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Color2_i(o,v);
}

void UserInterface::cb_Color3_i(Fl_Menu_*, void*) {
  cw->setTextureIndex(1);
cw->valid(0);
cw->redraw();
}
void UserInterface::cb_Color3(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Color3_i(o,v);
}

void UserInterface::cb_Blue1_i(Fl_Menu_*, void*) {
  cw->setTextureIndex(2);
cw->valid(0);
cw->redraw();
}
void UserInterface::cb_Blue1(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Blue1_i(o,v);
}

void UserInterface::cb_Gray1_i(Fl_Menu_*, void*) {
  cw->setTextureIndex(3);
cw->valid(0);
cw->redraw();
}
void UserInterface::cb_Gray1(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Gray1_i(o,v);
}

Fl_Menu_Item UserInterface::menu_Color1[] = {
 {"Color Scale 1", 0,  (Fl_Callback*)UserInterface::cb_Color2, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Color Scale 2", 0,  (Fl_Callback*)UserInterface::cb_Color3, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Blue to Red", 0,  (Fl_Callback*)UserInterface::cb_Blue1, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Gray Scale", 0,  (Fl_Callback*)UserInterface::cb_Gray1, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void UserInterface::cb_Bounds1_i(Fl_Menu_*, void*) {
  cw->setColorControlMode('B');
cw->valid(0);
cw->redraw();
}
void UserInterface::cb_Bounds1(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Bounds1_i(o,v);
}

void UserInterface::cb_Center1_i(Fl_Menu_*, void*) {
  cw->setColorControlMode('C');
cw->valid(0);
cw->redraw();
}
void UserInterface::cb_Center1(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Center1_i(o,v);
}

Fl_Menu_Item UserInterface::menu_Control1[] = {
 {"Bounds", 0,  (Fl_Callback*)UserInterface::cb_Bounds1, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Center - Amp", 0,  (Fl_Callback*)UserInterface::cb_Center1, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void UserInterface::cb_10_i(Fl_Roller* o, void*) {
  cw->setColorUpperBound(o->value());
cw->valid(0);
cw->redraw();
}
void UserInterface::cb_10(Fl_Roller* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_10_i(o,v);
}

void UserInterface::cb_11_i(Fl_Roller* o, void*) {
  cw->setColorLowerBound(o->value());
cw->valid(0);
cw->redraw();
}
void UserInterface::cb_11(Fl_Roller* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_11_i(o,v);
}

void UserInterface::cb_12_i(Fl_Roller* o, void*) {
  cw->setColorAmp(o->value());
cw->valid(0);
cw->redraw();
}
void UserInterface::cb_12(Fl_Roller* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_12_i(o,v);
}

void UserInterface::cb_13_i(Fl_Roller* o, void*) {
  cw->setColorCenter(o->value());
cw->valid(0);
cw->redraw();
}
void UserInterface::cb_13(Fl_Roller* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_13_i(o,v);
}

void UserInterface::cb_Contour_i(Fl_Light_Button* o, void*) {
  cw->setContourFlag(o->value());
cw->valid(0);
cw->redraw();
}
void UserInterface::cb_Contour(Fl_Light_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Contour_i(o,v);
}

void UserInterface::cb_14_i(Fl_Button*, void*) {
  cw->setStopFlag(1);
cw->resetCurrentPt();
cw->redraw();
}
void UserInterface::cb_14(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_14_i(o,v);
}

void UserInterface::cb_15_i(Fl_Button*, void*) {
  cw->setStopFlag(0);
cw->playMovie();
}
void UserInterface::cb_15(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_15_i(o,v);
}

void UserInterface::cb_16_i(Fl_Button*, void*) {
  cw->setStopFlag(1);
}
void UserInterface::cb_16(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_16_i(o,v);
}

void UserInterface::cb_Repeat_i(Fl_Light_Button* o, void*) {
  cw->setRepeatFlag(o->value());
}
void UserInterface::cb_Repeat(Fl_Light_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_Repeat_i(o,v);
}

void UserInterface::cb_cwCurrentPtRoller_i(Fl_Roller* o, void*) {
  cw->setCurrentPt(int(o->value()));
cw->redraw();
}
void UserInterface::cb_cwCurrentPtRoller(Fl_Roller* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_cwCurrentPtRoller_i(o,v);
}

void UserInterface::cb_Speed_i(Fl_Value_Slider* o, void*) {
  cw->setSpeed(o->value());
}
void UserInterface::cb_Speed(Fl_Value_Slider* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Speed_i(o,v);
}

void UserInterface::cb_cwStartPt_i(Fl_Int_Input* o, void*) {
  cw->setStartPt(o->value());
}
void UserInterface::cb_cwStartPt(Fl_Int_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_cwStartPt_i(o,v);
}

void UserInterface::cb_cwEndPt_i(Fl_Input* o, void*) {
  cw->setEndPt(o->value());
}
void UserInterface::cb_cwEndPt(Fl_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_cwEndPt_i(o,v);
}

void UserInterface::cb_Make1_i(Fl_Light_Button* o, void*) {
  cw->setMakeMovieFlag(o->value());
}
void UserInterface::cb_Make1(Fl_Light_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Make1_i(o,v);
}

void UserInterface::cb_Black_i(Fl_Light_Button* o, void*) {
  cw->setBlackBGFlag(o->value());
cw->valid(0);
cw->redraw();
}
void UserInterface::cb_Black(Fl_Light_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_Black_i(o,v);
}

UserInterface::UserInterface() {
  { mainWindow = new Fl_Double_Window(1280, 1008, "PhotoZ (c) 2006 PYC");
    mainWindow->user_data((void*)(this));
    { Fl_Box* o = new Fl_Box(5, 5, 140, 25, "PhotoZ v.5.25");
      o->box(FL_UP_BOX);
      o->color((Fl_Color)175);
      o->selection_color((Fl_Color)4);
      o->labeltype(FL_EMBOSSED_LABEL);
      o->labelfont(10);
      o->labelsize(20);
    } // Fl_Box* o
    { Fl_Menu_Bar* o = new Fl_Menu_Bar(150, 5, 135, 25, "Menu");
      o->box(FL_BORDER_BOX);
      o->color((Fl_Color)23);
      o->labelfont(1);
      o->menu(menu_Menu);
    } // Fl_Menu_Bar* o
    { Fl_Button* o = new Fl_Button(360, 5, 135, 25, "Save Left Window");
      o->color((Fl_Color)23);
      o->labelcolor((Fl_Color)4);
      o->callback((Fl_Callback*)cb_Save1);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(500, 5, 135, 25, "Save Right Window");
      o->color((Fl_Color)23);
      o->labelcolor((Fl_Color)4);
      o->callback((Fl_Callback*)cb_Save2);
    } // Fl_Button* o
    { Fl_Tabs* o = new Fl_Tabs(5, 660, 250, 150, "Acquisition/Analysis Panel");
      o->labeltype(FL_NO_LABEL);
      { Fl_Group* o = new Fl_Group(5, 685, 250, 125, "Acquisition");
        o->color((Fl_Color)214);
        { Fl_Button* o = new Fl_Button(175, 695, 75, 25, "Take RLI");
          o->labelfont(1);
          o->labelcolor((Fl_Color)112);
          o->callback((Fl_Callback*)cb_Take);
        } // Fl_Button* o
        { Fl_Button* o = new Fl_Button(175, 730, 75, 25, "Record");
          o->labelfont(1);
          o->labelcolor((Fl_Color)80);
          o->callback((Fl_Callback*)cb_Record);
        } // Fl_Button* o
        { saveData2File = new Fl_Button(175, 765, 75, 25, "Save @circle");
          saveData2File->labelfont(1);
          saveData2File->labelcolor(FL_DARK_GREEN);
          saveData2File->callback((Fl_Callback*)cb_saveData2File);
        } // Fl_Button* saveData2File
        { scheduleB = new Fl_Check_Button(5, 690, 95, 30, "Schedule");
          scheduleB->down_box(FL_DOWN_BOX);
          scheduleB->callback((Fl_Callback*)cb_scheduleB);
        } // Fl_Check_Button* scheduleB
        { Fl_Button* o = new Fl_Button(100, 695, 65, 25, "Stop!");
          o->color(FL_YELLOW);
          o->selection_color((Fl_Color)1);
          o->labeltype(FL_ENGRAVED_LABEL);
          o->labelfont(9);
          o->labelsize(16);
          o->callback((Fl_Callback*)cb_Stop);
        } // Fl_Button* o
        { Fl_Check_Button* o = new Fl_Check_Button(5, 715, 95, 30, "RLI");
          o->down_box(FL_DOWN_BOX);
          o->callback((Fl_Callback*)cb_RLI);
        } // Fl_Check_Button* o
        { Fl_Button* o = new Fl_Button(10, 765, 160, 25, "Save Processed Data");
          o->labelfont(1);
          o->callback((Fl_Callback*)cb_Save3);
        } // Fl_Button* o
        { lfRun = new Fl_Light_Button(75, 730, 90, 25, "Live Feed");
          lfRun->labelfont(1);
          lfRun->labelcolor(FL_SELECTION_COLOR);
          lfRun->callback((Fl_Callback*)cb_lfRun);
        } // Fl_Light_Button* lfRun
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(5, 685, 250, 125, "Analysis");
        o->color((Fl_Color)199);
        o->hide();
        { Fl_Button* o = new Fl_Button(10, 695, 130, 25, "Go through Data");
          o->labelfont(1);
          o->callback((Fl_Callback*)cb_Go);
        } // Fl_Button* o
        { Fl_Group* o = new Fl_Group(10, 730, 240, 35, "Selected Diodes");
          o->box(FL_DOWN_FRAME);
          o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
          { Fl_Button* o = new Fl_Button(125, 735, 55, 25, "Save");
            o->callback((Fl_Callback*)cb_Save4);
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(190, 735, 55, 25, "Load");
            o->callback((Fl_Callback*)cb_Load1);
          } // Fl_Button* o
          o->end();
        } // Fl_Group* o
        { Fl_Button* o = new Fl_Button(10, 775, 100, 20, "Procedure 1");
          o->callback((Fl_Callback*)cb_Procedure);
          o->deactivate();
        } // Fl_Button* o
        { Fl_Button* o = new Fl_Button(115, 775, 100, 20, "Procedure 2");
          o->callback((Fl_Callback*)cb_Procedure1);
          o->deactivate();
        } // Fl_Button* o
        o->end();
      } // Fl_Group* o
      o->end();
    } // Fl_Tabs* o
    { Fl_Group* o = new Fl_Group(5, 835, 250, 135, "File Control Panel");
      o->box(FL_DOWN_BOX);
      o->color((Fl_Color)167);
      o->labeltype(FL_NO_LABEL);
      { Fl_Group* o = new Fl_Group(10, 840, 240, 125, "File");
        o->labeltype(FL_NO_LABEL);
        { fileName = new Fl_Output(95, 840, 155, 25, "File Name:");
        } // Fl_Output* fileName
        { sliceNo = new Fl_Int_Input(95, 865, 50, 25, "Slice No:");
          sliceNo->type(2);
          sliceNo->box(FL_BORDER_BOX);
          sliceNo->callback((Fl_Callback*)cb_sliceNo);
          sliceNo->when(FL_WHEN_ENTER_KEY);
        } // Fl_Int_Input* sliceNo
        { locationNo = new Fl_Int_Input(95, 890, 50, 25, "Location No:");
          locationNo->type(2);
          locationNo->box(FL_BORDER_BOX);
          locationNo->callback((Fl_Callback*)cb_locationNo);
          locationNo->when(FL_WHEN_ENTER_KEY);
        } // Fl_Int_Input* locationNo
        { recordNo = new Fl_Int_Input(95, 915, 50, 25, "Record No:");
          recordNo->type(2);
          recordNo->box(FL_BORDER_BOX);
          recordNo->callback((Fl_Callback*)cb_recordNo);
          recordNo->when(FL_WHEN_ENTER_KEY);
        } // Fl_Int_Input* recordNo
        { sliceNoDecrease = new Fl_Button(145, 865, 30, 25, "@<");
          sliceNoDecrease->callback((Fl_Callback*)cb_sliceNoDecrease);
        } // Fl_Button* sliceNoDecrease
        { locationNoDecrease = new Fl_Button(145, 890, 30, 25, "@<");
          locationNoDecrease->callback((Fl_Callback*)cb_locationNoDecrease);
        } // Fl_Button* locationNoDecrease
        { recordNoDecrease = new Fl_Button(145, 915, 30, 25, "@<");
          recordNoDecrease->callback((Fl_Callback*)cb_recordNoDecrease);
        } // Fl_Button* recordNoDecrease
        { sliceNoIncrease = new Fl_Button(175, 865, 30, 25, "@>");
          sliceNoIncrease->callback((Fl_Callback*)cb_sliceNoIncrease);
        } // Fl_Button* sliceNoIncrease
        { locationNoIncrease = new Fl_Button(175, 890, 30, 25, "@>");
          locationNoIncrease->callback((Fl_Callback*)cb_locationNoIncrease);
        } // Fl_Button* locationNoIncrease
        { recordNoIncrease = new Fl_Button(175, 915, 30, 25, "@>");
          recordNoIncrease->callback((Fl_Callback*)cb_recordNoIncrease);
        } // Fl_Button* recordNoIncrease
        { sliceNoMax = new Fl_Output(205, 865, 45, 25);
          sliceNoMax->box(FL_BORDER_BOX);
          sliceNoMax->labeltype(FL_NO_LABEL);
        } // Fl_Output* sliceNoMax
        { locationNoMax = new Fl_Output(205, 890, 45, 25);
          locationNoMax->box(FL_BORDER_BOX);
          locationNoMax->labeltype(FL_NO_LABEL);
        } // Fl_Output* locationNoMax
        { recordNoMax = new Fl_Output(205, 915, 45, 25);
          recordNoMax->box(FL_BORDER_BOX);
          recordNoMax->labeltype(FL_NO_LABEL);
        } // Fl_Output* recordNoMax
        { trialNoGroup = new Fl_Group(10, 940, 240, 25);
          { trialNoDecrease = new Fl_Button(145, 940, 30, 25, "@<");
            trialNoDecrease->callback((Fl_Callback*)cb_trialNoDecrease);
          } // Fl_Button* trialNoDecrease
          { trialNoIncrease = new Fl_Button(175, 940, 30, 25, "@>");
            trialNoIncrease->callback((Fl_Callback*)cb_trialNoIncrease);
          } // Fl_Button* trialNoIncrease
          { trialNoMax = new Fl_Output(205, 940, 45, 25);
            trialNoMax->box(FL_BORDER_BOX);
            trialNoMax->labeltype(FL_NO_LABEL);
          } // Fl_Output* trialNoMax
          { trialNo = new Fl_Int_Input(95, 940, 50, 25, "Trial No:");
            trialNo->type(2);
            trialNo->box(FL_BORDER_BOX);
            trialNo->callback((Fl_Callback*)cb_trialNo);
            trialNo->when(FL_WHEN_ENTER_KEY);
          } // Fl_Int_Input* trialNo
          trialNoGroup->end();
        } // Fl_Group* trialNoGroup
        o->end();
      } // Fl_Group* o
      o->end();
    } // Fl_Group* o
    { Fl_Tabs* o = new Fl_Tabs(260, 660, 375, 320, "Main Control Panel");
      o->labeltype(FL_NO_LABEL);
      { Fl_Group* o = new Fl_Group(260, 685, 375, 285, "Array");
        o->color((Fl_Color)23);
        { Fl_Group* o = new Fl_Group(265, 690, 100, 95, "Display Selections");
          o->box(FL_DOWN_BOX);
          o->color((Fl_Color)25);
          o->labeltype(FL_NO_LABEL);
          { awShowTrace = new Fl_Light_Button(270, 695, 90, 25, "Trace");
            awShowTrace->value(1);
            awShowTrace->callback((Fl_Callback*)cb_awShowTrace);
          } // Fl_Light_Button* awShowTrace
          { awShowRliValue = new Fl_Light_Button(270, 725, 90, 25, "RLI Value");
            awShowRliValue->callback((Fl_Callback*)cb_awShowRliValue);
          } // Fl_Light_Button* awShowRliValue
          { awShowDiodeNum = new Fl_Light_Button(270, 755, 90, 25, "Diode No");
            awShowDiodeNum->callback((Fl_Callback*)cb_awShowDiodeNum);
          } // Fl_Light_Button* awShowDiodeNum
          o->end();
        } // Fl_Group* o
        { Fl_Choice* o = new Fl_Choice(485, 690, 145, 25, "Background:");
          o->down_box(FL_BORDER_BOX);
          o->selection_color((Fl_Color)4);
          o->menu(menu_Background);
        } // Fl_Choice* o
        { Fl_Group* o = new Fl_Group(395, 745, 235, 100, "Scale");
          o->labeltype(FL_NO_LABEL);
          { awFpYScale = new Fl_Roller(545, 745, 85, 25);
            awFpYScale->type(1);
            awFpYScale->maximum(10);
            awFpYScale->step(0.01);
            awFpYScale->value(0.8);
            awFpYScale->callback((Fl_Callback*)cb_awFpYScale);
            awFpYScale->align(Fl_Align(FL_ALIGN_LEFT));
          } // Fl_Roller* awFpYScale
          { awFpYScaleTxt = new Fl_Output(490, 745, 50, 25, "F.P Y Scale:");
          } // Fl_Output* awFpYScaleTxt
          { awYScale = new Fl_Roller(545, 770, 85, 25);
            awYScale->type(1);
            awYScale->maximum(10);
            awYScale->step(0.01);
            awYScale->value(0.15);
            awYScale->callback((Fl_Callback*)cb_awYScale);
            awYScale->align(Fl_Align(FL_ALIGN_LEFT));
          } // Fl_Roller* awYScale
          { awYScaleTxt = new Fl_Output(490, 770, 50, 25, "Y Scale:");
          } // Fl_Output* awYScaleTxt
          { awXScale = new Fl_Roller(545, 795, 85, 25);
            awXScale->type(1);
            awXScale->minimum(0.1);
            awXScale->maximum(100);
            awXScale->step(0.01);
            awXScale->value(1);
            awXScale->callback((Fl_Callback*)cb_awXScale);
            awXScale->align(Fl_Align(FL_ALIGN_LEFT));
          } // Fl_Roller* awXScale
          { awXScaleTxt = new Fl_Output(490, 795, 50, 25, "X Scale:");
          } // Fl_Output* awXScaleTxt
          { awXShift = new Fl_Roller(545, 820, 85, 25);
            awXShift->type(1);
            awXShift->minimum(-100);
            awXShift->maximum(100);
            awXShift->step(0.1);
            awXShift->callback((Fl_Callback*)cb_awXShift);
            awXShift->align(Fl_Align(FL_ALIGN_LEFT));
          } // Fl_Roller* awXShift
          { awXShiftTxt = new Fl_Output(490, 820, 50, 25, "X Shift:");
          } // Fl_Output* awXShiftTxt
          o->end();
        } // Fl_Group* o
        { Fl_Button* o = new Fl_Button(270, 790, 90, 25, "Load Image");
          o->labelfont(1);
          o->callback((Fl_Callback*)cb_Load2);
        } // Fl_Button* o
        { Fl_Group* o = new Fl_Group(265, 845, 365, 120, "Comparison");
          o->box(FL_DOWN_BOX);
          o->color((Fl_Color)29);
          o->labeltype(FL_NO_LABEL);
          { Fl_Light_Button* o = new Fl_Light_Button(395, 850, 90, 25, "Compare");
            o->labelfont(1);
            o->callback((Fl_Callback*)cb_Compare);
          } // Fl_Light_Button* o
          { record1No = new Fl_Int_Input(590, 850, 35, 25, "Ref. Record #");
            record1No->type(2);
            record1No->callback((Fl_Callback*)cb_record1No);
            record1No->when(FL_WHEN_ENTER_KEY);
          } // Fl_Int_Input* record1No
          { record2No = new Fl_Int_Input(590, 880, 35, 25, "Final Record #");
            record2No->type(2);
            record2No->callback((Fl_Callback*)cb_record2No);
            record2No->when(FL_WHEN_ENTER_KEY);
          } // Fl_Int_Input* record2No
          { Fl_Light_Button* o = new Fl_Light_Button(270, 850, 115, 25, "Nor2ArrayMax");
            o->value(1);
            o->callback((Fl_Callback*)cb_Nor2ArrayMax);
          } // Fl_Light_Button* o
          { Fl_Light_Button* o = new Fl_Light_Button(490, 910, 135, 25, "Average Records");
            o->callback((Fl_Callback*)cb_Average);
          } // Fl_Light_Button* o
          { Fl_Value_Slider* o = new Fl_Value_Slider(490, 935, 135, 25);
            o->type(5);
            o->minimum(2);
            o->maximum(10);
            o->step(1);
            o->value(5);
            o->callback((Fl_Callback*)cb_);
            o->align(Fl_Align(FL_ALIGN_LEFT));
            o->when(FL_WHEN_RELEASE);
          } // Fl_Value_Slider* o
          { Fl_Button* o = new Fl_Button(270, 940, 215, 20, "Save Latest LiveFeed image (test)");
            o->callback((Fl_Callback*)cb_Save5);
          } // Fl_Button* o
          { resetCam = new Fl_Button(270, 900, 105, 25, "Reset Camera");
            resetCam->callback((Fl_Callback*)cb_resetCam);
          } // Fl_Button* resetCam
          o->end();
        } // Fl_Group* o
        { Fl_Button* o = new Fl_Button(400, 720, 230, 20, "Save Background Data");
          o->color((Fl_Color)231);
          o->callback((Fl_Callback*)cb_Save6);
        } // Fl_Button* o
        { Fl_Choice* o = new Fl_Choice(395, 880, 90, 25, "Increase/Decrease");
          o->down_box(FL_BORDER_BOX);
          o->labeltype(FL_NO_LABEL);
          o->menu(menu_Increase);
        } // Fl_Choice* o
        { Fl_Choice* o = new Fl_Choice(395, 910, 90, 25, "Increase/Decrease");
          o->down_box(FL_BORDER_BOX);
          o->labeltype(FL_NO_LABEL);
          o->menu(menu_Increase1);
        } // Fl_Choice* o
        { digital_binning = new Fl_Int_Input(365, 820, 75, 25, "Digital Binning:");
          digital_binning->type(2);
          digital_binning->callback((Fl_Callback*)cb_digital_binning);
          digital_binning->when(FL_WHEN_ENTER_KEY);
        } // Fl_Int_Input* digital_binning
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(260, 685, 375, 295, "DSP");
        o->color((Fl_Color)23);
        o->hide();
        { Fl_Tabs* o = new Fl_Tabs(265, 690, 365, 290, "DSP Tabs");
          o->color((Fl_Color)23);
          o->labeltype(FL_NO_LABEL);
          { Fl_Group* o = new Fl_Group(265, 715, 365, 265, "Main");
            o->color((Fl_Color)20);
            { Fl_Light_Button* o = new Fl_Light_Button(270, 720, 140, 25, "RLI Division");
              o->labelfont(1);
              o->callback((Fl_Callback*)cb_RLI2);
            } // Fl_Light_Button* o
            { Fl_Light_Button* o = new Fl_Light_Button(270, 750, 140, 25, "Data Inverse");
              o->shortcut(0x4006d);
              o->labelfont(1);
              o->callback((Fl_Callback*)cb_Data);
            } // Fl_Light_Button* o
            { Fl_Light_Button* o = new Fl_Light_Button(270, 780, 140, 25, "F.P. Data Inverse");
              o->shortcut(0x4006d);
              o->labelfont(1);
              o->callback((Fl_Callback*)cb_F);
            } // Fl_Light_Button* o
            { Fl_Group* o = new Fl_Group(470, 725, 155, 75, "Measure Window");
              o->box(FL_DOWN_BOX);
              o->color(FL_CYAN);
              o->labelfont(1);
              o->align(Fl_Align(FL_ALIGN_TOP|FL_ALIGN_INSIDE));
              { startWindow = new Fl_Int_Input(555, 745, 65, 25, "Start (Pt):");
                startWindow->type(2);
                startWindow->callback((Fl_Callback*)cb_startWindow);
                startWindow->when(FL_WHEN_ENTER_KEY);
              } // Fl_Int_Input* startWindow
              { widthWindow = new Fl_Int_Input(555, 770, 65, 25, "Width (Pt):");
                widthWindow->type(2);
                widthWindow->callback((Fl_Callback*)cb_widthWindow);
                widthWindow->when(FL_WHEN_ENTER_KEY);
              } // Fl_Int_Input* widthWindow
              o->end();
            } // Fl_Group* o
            { Fl_Group* o = new Fl_Group(270, 815, 355, 115, "Latency Measure Settings");
              o->box(FL_DOWN_BOX);
              o->color(FL_CYAN);
              o->labelfont(1);
              o->align(Fl_Align(FL_ALIGN_TOP|FL_ALIGN_INSIDE));
              { latencyStartTxt = new Fl_Float_Input(365, 840, 65, 25, "Start (ms)");
                latencyStartTxt->type(1);
                latencyStartTxt->callback((Fl_Callback*)cb_latencyStartTxt);
                latencyStartTxt->when(FL_WHEN_ENTER_KEY);
              } // Fl_Float_Input* latencyStartTxt
              { latencyStartRoller = new Fl_Roller(430, 840, 65, 25);
                latencyStartRoller->type(1);
                latencyStartRoller->maximum(60000);
                latencyStartRoller->step(0.1);
                latencyStartRoller->value(100);
                latencyStartRoller->callback((Fl_Callback*)cb_latencyStartRoller);
              } // Fl_Roller* latencyStartRoller
              { Fl_Value_Slider* o = new Fl_Value_Slider(365, 870, 255, 25, "Width (ms)");
                o->type(5);
                o->selection_color((Fl_Color)1);
                o->minimum(0.5);
                o->maximum(100);
                o->step(0.5);
                o->value(5);
                o->callback((Fl_Callback*)cb_Width);
                o->align(Fl_Align(FL_ALIGN_LEFT));
              } // Fl_Value_Slider* o
              { Fl_Value_Slider* o = new Fl_Value_Slider(365, 900, 255, 25, "% of Amp");
                o->type(5);
                o->selection_color((Fl_Color)1);
                o->minimum(5);
                o->maximum(95);
                o->step(5);
                o->value(50);
                o->callback((Fl_Callback*)cb_of);
                o->align(Fl_Align(FL_ALIGN_LEFT));
                o->when(FL_WHEN_RELEASE);
              } // Fl_Value_Slider* o
              o->end();
            } // Fl_Group* o
            { rliScalarRoller = new Fl_Roller(425, 935, 65, 25);
              rliScalarRoller->type(1);
              rliScalarRoller->minimum(10);
              rliScalarRoller->maximum(60000);
              rliScalarRoller->step(10);
              rliScalarRoller->value(3200);
              rliScalarRoller->callback((Fl_Callback*)cb_rliScalarRoller);
            } // Fl_Roller* rliScalarRoller
            { rliScalarTxt = new Fl_Float_Input(360, 935, 65, 25, "RLI Scalar");
              rliScalarTxt->type(1);
              rliScalarTxt->callback((Fl_Callback*)cb_rliScalarTxt);
              rliScalarTxt->when(FL_WHEN_ENTER_KEY);
            } // Fl_Float_Input* rliScalarTxt
            o->end();
          } // Fl_Group* o
          { Fl_Group* o = new Fl_Group(265, 715, 365, 250, "Correction");
            o->color((Fl_Color)20);
            o->hide();
            { Fl_Light_Button* o = new Fl_Light_Button(270, 720, 100, 25, "Correction");
              o->shortcut(0x4006d);
              o->labelfont(1);
              o->callback((Fl_Callback*)cb_Correction);
            } // Fl_Light_Button* o
            { Fl_Button* o = new Fl_Button(375, 720, 100, 25, "RLI -> Map");
              o->callback((Fl_Callback*)cb_RLI3);
            } // Fl_Button* o
            { Fl_Button* o = new Fl_Button(375, 750, 100, 25, "Save Map");
              o->labelsize(15);
              o->callback((Fl_Callback*)cb_Save7);
            } // Fl_Button* o
            { Fl_Button* o = new Fl_Button(480, 750, 100, 25, "Load Map");
              o->labelsize(15);
              o->callback((Fl_Callback*)cb_Load3);
            } // Fl_Button* o
            { Fl_Button* o = new Fl_Button(480, 720, 145, 25, "Make Correction");
              o->labelfont(1);
              o->callback((Fl_Callback*)cb_Make);
            } // Fl_Button* o
            { Fl_Group* o = new Fl_Group(280, 830, 260, 125, "Selection");
              o->box(FL_DOWN_BOX);
              o->color(FL_CYAN);
              o->labelfont(1);
              { Fl_Button* o = new Fl_Button(395, 835, 25, 25, "<");
                o->callback((Fl_Callback*)cb_1);
              } // Fl_Button* o
              { thresholdTxt = new Fl_Float_Input(460, 835, 75, 25);
                thresholdTxt->type(1);
                thresholdTxt->when(FL_WHEN_NEVER);
              } // Fl_Float_Input* thresholdTxt
              { Fl_Button* o = new Fl_Button(425, 835, 25, 25, ">");
                o->callback((Fl_Callback*)cb_2);
              } // Fl_Button* o
              { Fl_Button* o = new Fl_Button(395, 865, 25, 25, "<");
                o->callback((Fl_Callback*)cb_3);
              } // Fl_Button* o
              { Fl_Button* o = new Fl_Button(425, 865, 25, 25, ">");
                o->callback((Fl_Callback*)cb_4);
              } // Fl_Button* o
              { Fl_Button* o = new Fl_Button(395, 895, 25, 25, "<");
                o->callback((Fl_Callback*)cb_5);
              } // Fl_Button* o
              { Fl_Button* o = new Fl_Button(425, 895, 25, 25, ">");
                o->callback((Fl_Callback*)cb_6);
              } // Fl_Button* o
              { Fl_Button* o = new Fl_Button(395, 925, 25, 25, "<");
                o->callback((Fl_Callback*)cb_7);
              } // Fl_Button* o
              { Fl_Button* o = new Fl_Button(425, 925, 25, 25, ">");
                o->callback((Fl_Callback*)cb_8);
              } // Fl_Button* o
              { Fl_Box* o = new Fl_Box(285, 835, 105, 25, "Max Amp");
                o->align(Fl_Align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE));
              } // Fl_Box* o
              { Fl_Box* o = new Fl_Box(285, 865, 105, 25, "% Amp Latency");
                o->align(Fl_Align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE));
              } // Fl_Box* o
              { Fl_Box* o = new Fl_Box(285, 895, 105, 25, "SD");
                o->align(Fl_Align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE));
              } // Fl_Box* o
              { Fl_Box* o = new Fl_Box(285, 925, 105, 25, "RLI");
                o->align(Fl_Align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE));
              } // Fl_Box* o
              o->end();
            } // Fl_Group* o
            { Fl_Button* o = new Fl_Button(545, 830, 70, 25, "Ignore");
              o->labelfont(1);
              o->callback((Fl_Callback*)cb_Ignore);
            } // Fl_Button* o
            o->end();
          } // Fl_Group* o
          o->end();
        } // Fl_Tabs* o
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(260, 685, 375, 285, "Baseline");
        o->color((Fl_Color)23);
        o->hide();
        { BLCType = new Fl_Choice(455, 700, 175, 25, "Baseline Correction Type:");
          BLCType->down_box(FL_BORDER_BOX);
          BLCType->labelfont(1);
          BLCType->menu(menu_BLCType);
        } // Fl_Choice* BLCType
        { Fl_Group* o = new Fl_Group(265, 730, 200, 80, "Polynomial Skip Window");
          o->box(FL_DOWN_FRAME);
          o->labelfont(1);
          o->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
          { polynomialStartPtTxt = new Fl_Int_Input(395, 750, 65, 25, "Start Point:");
            polynomialStartPtTxt->type(2);
            polynomialStartPtTxt->callback((Fl_Callback*)cb_polynomialStartPtTxt);
            polynomialStartPtTxt->when(FL_WHEN_ENTER_KEY);
          } // Fl_Int_Input* polynomialStartPtTxt
          { polynomialNumPts = new Fl_Int_Input(395, 780, 65, 25, "Number of  Points:");
            polynomialNumPts->type(2);
            polynomialNumPts->callback((Fl_Callback*)cb_polynomialNumPts);
            polynomialNumPts->when(FL_WHEN_ENTER_KEY);
          } // Fl_Int_Input* polynomialNumPts
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(265, 815, 260, 50, "Arbitrary Mode");
          o->box(FL_DOWN_FRAME);
          o->labelfont(1);
          o->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
          { clampPtTxt = new Fl_Output(350, 835, 65, 25, "Clamp at Pt:");
          } // Fl_Output* clampPtTxt
          { Fl_Roller* o = new Fl_Roller(420, 835, 100, 25);
            o->type(1);
            o->maximum(4000);
            o->step(1);
            o->value(45);
            o->callback((Fl_Callback*)cb_9);
            o->align(Fl_Align(FL_ALIGN_LEFT));
            o->when(FL_WHEN_RELEASE);
          } // Fl_Roller* o
          o->end();
        } // Fl_Group* o
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(260, 685, 375, 285, "Image");
        o->color((Fl_Color)23);
        o->hide();
        { Fl_Group* o = new Fl_Group(265, 820, 205, 65);
          o->box(FL_DOWN_FRAME);
          { Fl_Choice* o = new Fl_Choice(400, 825, 65, 25, "Output Image Format:");
            o->down_box(FL_BORDER_BOX);
            o->labelfont(8);
            o->menu(menu_Output);
          } // Fl_Choice* o
          { inputImageFormat = new Fl_Choice(400, 855, 65, 25, "Input Image Format:");
            inputImageFormat->down_box(FL_BORDER_BOX);
            inputImageFormat->labelfont(8);
            inputImageFormat->menu(menu_inputImageFormat);
          } // Fl_Choice* inputImageFormat
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(265, 695, 365, 115);
          o->box(FL_DOWN_FRAME);
          { awImageX0Txt = new Fl_Output(340, 700, 45, 25, "X Position:");
          } // Fl_Output* awImageX0Txt
          { awImageX0 = new Fl_Roller(390, 700, 100, 25);
            awImageX0->type(1);
            awImageX0->minimum(-1000);
            awImageX0->maximum(1000);
            awImageX0->step(1);
            awImageX0->callback((Fl_Callback*)cb_awImageX0);
            awImageX0->align(Fl_Align(FL_ALIGN_LEFT));
          } // Fl_Roller* awImageX0
          { awImageY0Txt = new Fl_Output(340, 730, 45, 25, "Y Position:");
          } // Fl_Output* awImageY0Txt
          { awImageY0 = new Fl_Roller(390, 730, 100, 25);
            awImageY0->type(1);
            awImageY0->minimum(-1000);
            awImageY0->maximum(1000);
            awImageY0->step(1);
            awImageY0->callback((Fl_Callback*)cb_awImageY0);
            awImageY0->align(Fl_Align(FL_ALIGN_LEFT));
          } // Fl_Roller* awImageY0
          { awImageXSize = new Fl_Value_Slider(310, 760, 315, 20, "Width");
            awImageXSize->type(5);
            awImageXSize->selection_color((Fl_Color)1);
            awImageXSize->labelsize(12);
            awImageXSize->minimum(540);
            awImageXSize->maximum(740);
            awImageXSize->step(1);
            awImageXSize->value(640);
            awImageXSize->callback((Fl_Callback*)cb_awImageXSize);
            awImageXSize->align(Fl_Align(FL_ALIGN_LEFT));
            awImageXSize->when(FL_WHEN_RELEASE);
          } // Fl_Value_Slider* awImageXSize
          { awImageYSize = new Fl_Value_Slider(310, 785, 315, 20, "Height");
            awImageYSize->type(5);
            awImageYSize->selection_color((Fl_Color)1);
            awImageYSize->labelsize(12);
            awImageYSize->minimum(380);
            awImageYSize->maximum(740);
            awImageYSize->step(1);
            awImageYSize->value(640);
            awImageYSize->callback((Fl_Callback*)cb_awImageYSize);
            awImageYSize->align(Fl_Align(FL_ALIGN_LEFT));
            awImageYSize->when(FL_WHEN_RELEASE);
          } // Fl_Value_Slider* awImageYSize
          o->end();
        } // Fl_Group* o
        { Fl_Light_Button* o = new Fl_Light_Button(475, 825, 145, 25, "White Background");
          o->callback((Fl_Callback*)cb_White);
          o->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
        } // Fl_Light_Button* o
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(260, 685, 375, 285, "Color");
        o->color((Fl_Color)23);
        o->hide();
        { Fl_Choice* o = new Fl_Choice(365, 690, 125, 25, "Color Scale:");
          o->down_box(FL_BORDER_BOX);
          o->menu(menu_Color);
        } // Fl_Choice* o
        { Fl_Choice* o = new Fl_Choice(365, 715, 125, 25, "Control Mode:");
          o->down_box(FL_BORDER_BOX);
          o->menu(menu_Control);
        } // Fl_Choice* o
        { Fl_Tabs* o = new Fl_Tabs(365, 745, 200, 80, "Color Scale Bar");
          o->color((Fl_Color)23);
          o->labeltype(FL_NO_LABEL);
          { Fl_Group* o = new Fl_Group(365, 765, 200, 60, "Bounds");
            o->color((Fl_Color)29);
            o->when(FL_WHEN_NEVER);
            { Fl_Roller* o = new Fl_Roller(485, 770, 75, 25);
              o->type(1);
              o->minimum(-100);
              o->maximum(100);
              o->step(0.01);
              o->value(1);
              o->callback((Fl_Callback*)cb_a);
            } // Fl_Roller* o
            { colorUpperBound = new Fl_Output(420, 770, 60, 25, "Upper:");
            } // Fl_Output* colorUpperBound
            { colorLowerBound = new Fl_Output(420, 795, 60, 25, "Lower:");
            } // Fl_Output* colorLowerBound
            { Fl_Roller* o = new Fl_Roller(485, 795, 75, 25);
              o->type(1);
              o->minimum(-100);
              o->maximum(100);
              o->step(0.01);
              o->callback((Fl_Callback*)cb_b);
            } // Fl_Roller* o
            o->end();
          } // Fl_Group* o
          { Fl_Group* o = new Fl_Group(365, 765, 200, 60, "Center");
            o->color((Fl_Color)29);
            o->when(FL_WHEN_NEVER);
            o->hide();
            { Fl_Roller* o = new Fl_Roller(485, 770, 75, 25);
              o->type(1);
              o->minimum(-100);
              o->maximum(100);
              o->step(0.01);
              o->value(1);
              o->callback((Fl_Callback*)cb_c);
            } // Fl_Roller* o
            { colorAmp = new Fl_Output(420, 770, 60, 25, "Amp:");
            } // Fl_Output* colorAmp
            { colorCenter = new Fl_Output(420, 795, 60, 25, "Center:");
            } // Fl_Output* colorCenter
            { Fl_Roller* o = new Fl_Roller(485, 795, 75, 25);
              o->type(1);
              o->minimum(-100);
              o->maximum(100);
              o->step(0.01);
              o->callback((Fl_Callback*)cb_d);
            } // Fl_Roller* o
            o->end();
          } // Fl_Group* o
          o->end();
        } // Fl_Tabs* o
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(270, 720, 365, 250, "Filter");
        o->color((Fl_Color)20);
        o->hide();
        { Fl_Light_Button* o = new Fl_Light_Button(275, 725, 85, 25, "T-Filter");
          o->shortcut(0x4006d);
          o->labelfont(1);
          o->callback((Fl_Callback*)cb_T);
        } // Fl_Light_Button* o
        { Fl_Choice* o = new Fl_Choice(440, 725, 95, 25, "Filter Type");
          o->down_box(FL_BORDER_BOX);
          o->menu(menu_Filter);
        } // Fl_Choice* o
        { Fl_Light_Button* o = new Fl_Light_Button(275, 820, 85, 25, "S-Filter");
          o->shortcut(0x4006d);
          o->labelfont(1);
          o->callback((Fl_Callback*)cb_S);
        } // Fl_Light_Button* o
        { Fl_Value_Slider* o = new Fl_Value_Slider(385, 820, 150, 25, "s");
          o->type(5);
          o->selection_color((Fl_Color)1);
          o->labelfont(12);
          o->minimum(0.1);
          o->step(0.1);
          o->value(0.5);
          o->callback((Fl_Callback*)cb_s);
          o->align(Fl_Align(FL_ALIGN_LEFT));
          o->when(FL_WHEN_RELEASE);
        } // Fl_Value_Slider* o
        { Fl_Value_Slider* o = new Fl_Value_Slider(345, 755, 280, 25, "Radius (Pt)");
          o->type(5);
          o->selection_color((Fl_Color)1);
          o->minimum(1);
          o->maximum(50);
          o->step(1);
          o->value(1);
          o->callback((Fl_Callback*)cb_Radius);
          o->align(Fl_Align(FL_ALIGN_LEFT));
          o->when(FL_WHEN_RELEASE);
        } // Fl_Value_Slider* o
        o->end();
      } // Fl_Group* o
      o->end();
    } // Fl_Tabs* o
    { Fl_Tabs* o = new Fl_Tabs(640, 5, 670, 965, "Versatile Panel");
      o->labeltype(FL_NO_LABEL);
      { traceGroup = new Fl_Group(640, 30, 670, 940, "Trace");
        traceGroup->color((Fl_Color)26);
        traceGroup->hide();
        { Fl_Group* o = new Fl_Group(645, 660, 215, 305, "Left");
          o->labeltype(FL_NO_LABEL);
          { Fl_Choice* o = new Fl_Choice(690, 660, 165, 25, "Value:");
            o->down_box(FL_BORDER_BOX);
            o->menu(menu_Value);
          } // Fl_Choice* o
          { Fl_Light_Button* o = new Fl_Light_Button(650, 750, 120, 25, "Trace");
            o->value(1);
            o->labelfont(1);
            o->callback((Fl_Callback*)cb_Trace);
          } // Fl_Light_Button* o
          { Fl_Light_Button* o = new Fl_Light_Button(650, 900, 120, 25, "Alpha");
            o->callback((Fl_Callback*)cb_Alpha);
          } // Fl_Light_Button* o
          { Fl_Light_Button* o = new Fl_Light_Button(650, 870, 120, 25, "Vm");
            o->callback((Fl_Callback*)cb_Vm);
          } // Fl_Light_Button* o
          { twShowPointLine = new Fl_Light_Button(650, 720, 120, 25, "Point Line");
            twShowPointLine->labelfont(1);
            twShowPointLine->callback((Fl_Callback*)cb_twShowPointLine);
          } // Fl_Light_Button* twShowPointLine
          { Fl_Light_Button* o = new Fl_Light_Button(650, 810, 120, 25, "Time Course");
            o->labelfont(1);
            o->callback((Fl_Callback*)cb_Time);
          } // Fl_Light_Button* o
          { Fl_Light_Button* o = new Fl_Light_Button(650, 840, 120, 25, "Saved Traces");
            o->labelfont(1);
            o->callback((Fl_Callback*)cb_Saved);
          } // Fl_Light_Button* o
          { Fl_Light_Button* o = new Fl_Light_Button(650, 780, 120, 25, "Slope");
            o->labelfont(1);
            o->callback((Fl_Callback*)cb_Slope);
          } // Fl_Light_Button* o
          { Fl_Choice* o = new Fl_Choice(690, 690, 80, 25, "Mode:");
            o->down_box(FL_BORDER_BOX);
            o->menu(menu_Mode);
          } // Fl_Choice* o
          o->end();
        } // Fl_Group* o
        { Fl_Tabs* o = new Fl_Tabs(860, 660, 450, 310, "Display");
          o->labeltype(FL_NO_LABEL);
          { Fl_Group* o = new Fl_Group(865, 685, 410, 285, "Display");
            o->color((Fl_Color)247);
            o->hide();
            { Fl_Group* o = new Fl_Group(865, 710, 345, 35, "Time Course");
              o->box(FL_DOWN_BOX);
              o->color((Fl_Color)162);
              o->labelfont(1);
              o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
              { timeCourseType = new Fl_Choice(865, 715, 145, 25, "Time Course");
                timeCourseType->down_box(FL_BORDER_BOX);
                timeCourseType->labeltype(FL_NO_LABEL);
                timeCourseType->menu(menu_timeCourseType);
              } // Fl_Choice* timeCourseType
              { twShowFileLine = new Fl_Light_Button(1015, 715, 85, 25, "File Line");
                twShowFileLine->labelfont(1);
                twShowFileLine->callback((Fl_Callback*)cb_twShowFileLine);
              } // Fl_Light_Button* twShowFileLine
              { Fl_Light_Button* o = new Fl_Light_Button(1105, 715, 100, 25, "Reference");
                o->labelfont(1);
                o->callback((Fl_Callback*)cb_Reference);
              } // Fl_Light_Button* o
              o->end();
            } // Fl_Group* o
            { Fl_Group* o = new Fl_Group(865, 765, 400, 35, "Saved Traces");
              o->box(FL_DOWN_BOX);
              o->color((Fl_Color)182);
              o->labelfont(1);
              o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
              { Fl_Button* o = new Fl_Button(865, 770, 100, 25, "Save Traces");
                o->callback((Fl_Callback*)cb_Save8);
              } // Fl_Button* o
              { secondFileName = new Fl_Output(1145, 770, 115, 25, "File Name:");
              } // Fl_Output* secondFileName
              { savedTracesTrialNoTxt = new Fl_Output(1025, 770, 40, 25, "Trial No:");
              } // Fl_Output* savedTracesTrialNoTxt
              o->end();
            } // Fl_Group* o
            { Fl_Light_Button* o = new Fl_Light_Button(865, 835, 115, 25, "Normalize DI/I");
              o->callback((Fl_Callback*)cb_Normalize);
            } // Fl_Light_Button* o
            { Fl_Light_Button* o = new Fl_Light_Button(865, 805, 115, 25, "Superimpose");
              o->callback((Fl_Callback*)cb_Superimpose);
            } // Fl_Light_Button* o
            { Fl_Light_Button* o = new Fl_Light_Button(865, 865, 115, 25, "Normalize LTP");
              o->callback((Fl_Callback*)cb_Normalize1);
            } // Fl_Light_Button* o
            o->end();
          } // Fl_Group* o
          { Fl_Group* o = new Fl_Group(860, 685, 415, 280, "Simulation");
            o->color((Fl_Color)215);
            o->hide();
            { R1Slider = new Fl_Slider(1025, 790, 245, 25);
              R1Slider->type(5);
              R1Slider->color((Fl_Color)17);
              R1Slider->selection_color((Fl_Color)1);
              R1Slider->minimum(-100);
              R1Slider->maximum(100);
              R1Slider->step(1);
              R1Slider->callback((Fl_Callback*)cb_R1Slider);
            } // Fl_Slider* R1Slider
            { R1Txt = new Fl_Output(950, 790, 75, 25, "Gsyn/Gleak");
              R1Txt->labelfont(1);
              R1Txt->labelsize(12);
              R1Txt->textfont(1);
              R1Txt->textsize(12);
              R1Txt->when(FL_WHEN_NEVER);
            } // Fl_Output* R1Txt
            { R2Slider = new Fl_Slider(1025, 765, 245, 25);
              R2Slider->type(5);
              R2Slider->color((Fl_Color)17);
              R2Slider->selection_color((Fl_Color)1);
              R2Slider->minimum(-100);
              R2Slider->maximum(100);
              R2Slider->step(1);
              R2Slider->callback((Fl_Callback*)cb_R2Slider);
            } // Fl_Slider* R2Slider
            { R2Txt = new Fl_Output(950, 765, 75, 25, "Cm/Gleak");
              R2Txt->labelfont(1);
              R2Txt->labelsize(12);
              R2Txt->textfont(1);
              R2Txt->textsize(12);
              R2Txt->when(FL_WHEN_NEVER);
            } // Fl_Output* R2Txt
            { alphaTauSlider = new Fl_Slider(1025, 740, 245, 25);
              alphaTauSlider->type(5);
              alphaTauSlider->color((Fl_Color)17);
              alphaTauSlider->selection_color((Fl_Color)1);
              alphaTauSlider->minimum(-100);
              alphaTauSlider->maximum(100);
              alphaTauSlider->step(1);
              alphaTauSlider->callback((Fl_Callback*)cb_alphaTauSlider);
            } // Fl_Slider* alphaTauSlider
            { alphaTauTxt = new Fl_Output(950, 740, 75, 25, "Tau (pt)");
              alphaTauTxt->labelfont(1);
              alphaTauTxt->labelsize(12);
              alphaTauTxt->textfont(1);
              alphaTauTxt->textsize(12);
              alphaTauTxt->when(FL_WHEN_NEVER);
            } // Fl_Output* alphaTauTxt
            { alphaAmplitudeSlider = new Fl_Slider(1025, 715, 245, 25);
              alphaAmplitudeSlider->type(5);
              alphaAmplitudeSlider->color((Fl_Color)17);
              alphaAmplitudeSlider->selection_color((Fl_Color)1);
              alphaAmplitudeSlider->minimum(-100);
              alphaAmplitudeSlider->maximum(100);
              alphaAmplitudeSlider->step(1);
              alphaAmplitudeSlider->value(0.3);
              alphaAmplitudeSlider->callback((Fl_Callback*)cb_alphaAmplitudeSlider);
            } // Fl_Slider* alphaAmplitudeSlider
            { alphaAmpTxt = new Fl_Output(950, 715, 75, 25, "Amp");
              alphaAmpTxt->labelfont(1);
              alphaAmpTxt->labelsize(12);
              alphaAmpTxt->textfont(1);
              alphaAmpTxt->textsize(12);
              alphaAmpTxt->when(FL_WHEN_NEVER);
            } // Fl_Output* alphaAmpTxt
            { Fl_Button* o = new Fl_Button(1210, 845, 60, 25, "Fit x1");
              o->callback((Fl_Callback*)cb_Fit);
            } // Fl_Button* o
            { Fl_Button* o = new Fl_Button(1210, 875, 60, 25, "Fit x10");
              o->callback((Fl_Callback*)cb_Fit1);
            } // Fl_Button* o
            { alphaStartPointRoller = new Fl_Roller(1025, 690, 50, 25);
              alphaStartPointRoller->type(1);
              alphaStartPointRoller->maximum(10000);
              alphaStartPointRoller->step(1);
              alphaStartPointRoller->value(160);
              alphaStartPointRoller->callback((Fl_Callback*)cb_alphaStartPointRoller);
            } // Fl_Roller* alphaStartPointRoller
            { alphaStartPointTxt = new Fl_Int_Input(950, 690, 75, 25, "Onset (pt)");
              alphaStartPointTxt->type(2);
              alphaStartPointTxt->labelfont(1);
              alphaStartPointTxt->labelsize(12);
              alphaStartPointTxt->textfont(1);
              alphaStartPointTxt->textsize(12);
              alphaStartPointTxt->callback((Fl_Callback*)cb_alphaStartPointTxt);
              alphaStartPointTxt->when(FL_WHEN_ENTER_KEY);
            } // Fl_Int_Input* alphaStartPointTxt
            { alphaSpikeStart = new Fl_Int_Input(950, 845, 45, 25, "Spike Start");
              alphaSpikeStart->type(2);
              alphaSpikeStart->callback((Fl_Callback*)cb_alphaSpikeStart);
              alphaSpikeStart->when(FL_WHEN_ENTER_KEY);
            } // Fl_Int_Input* alphaSpikeStart
            { alphaSpikeEnd = new Fl_Int_Input(1025, 845, 45, 25, "End");
              alphaSpikeEnd->type(2);
              alphaSpikeEnd->callback((Fl_Callback*)cb_alphaSpikeEnd);
              alphaSpikeEnd->when(FL_WHEN_ENTER_KEY);
            } // Fl_Int_Input* alphaSpikeEnd
            { alphaWindow = new Fl_Int_Input(1150, 875, 55, 25, "Fit Pts");
              alphaWindow->type(2);
              alphaWindow->callback((Fl_Callback*)cb_alphaWindow);
              alphaWindow->when(FL_WHEN_ENTER_KEY);
            } // Fl_Int_Input* alphaWindow
            { alphaAxonStart = new Fl_Int_Input(950, 875, 45, 25, "Axon Start");
              alphaAxonStart->type(2);
              alphaAxonStart->when(FL_WHEN_ENTER_KEY);
            } // Fl_Int_Input* alphaAxonStart
            { alphaAxonEnd = new Fl_Int_Input(1025, 875, 45, 25, "End");
              alphaAxonEnd->type(2);
              alphaAxonEnd->when(FL_WHEN_ENTER_KEY);
            } // Fl_Int_Input* alphaAxonEnd
            { Fl_Check_Button* o = new Fl_Check_Button(860, 715, 40, 25, "button");
              o->down_box(FL_DOWN_BOX);
              o->value(1);
              o->labeltype(FL_NO_LABEL);
              o->callback((Fl_Callback*)cb_button);
            } // Fl_Check_Button* o
            { Fl_Check_Button* o = new Fl_Check_Button(860, 740, 40, 25, "button");
              o->down_box(FL_DOWN_BOX);
              o->value(1);
              o->labeltype(FL_NO_LABEL);
              o->callback((Fl_Callback*)cb_button1);
            } // Fl_Check_Button* o
            { Fl_Check_Button* o = new Fl_Check_Button(860, 765, 40, 25, "button");
              o->down_box(FL_DOWN_BOX);
              o->value(1);
              o->labeltype(FL_NO_LABEL);
              o->callback((Fl_Callback*)cb_button2);
            } // Fl_Check_Button* o
            { Fl_Check_Button* o = new Fl_Check_Button(860, 690, 40, 25, "button");
              o->down_box(FL_DOWN_BOX);
              o->value(1);
              o->labeltype(FL_NO_LABEL);
              o->callback((Fl_Callback*)cb_button3);
            } // Fl_Check_Button* o
            { Fl_Check_Button* o = new Fl_Check_Button(860, 790, 40, 25, "button");
              o->down_box(FL_DOWN_BOX);
              o->labeltype(FL_NO_LABEL);
              o->callback((Fl_Callback*)cb_button4);
            } // Fl_Check_Button* o
            { fittingRange = new Fl_Value_Slider(910, 815, 115, 25, "Range");
              fittingRange->type(5);
              fittingRange->selection_color((Fl_Color)1);
              fittingRange->minimum(1);
              fittingRange->maximum(5);
              fittingRange->step(1);
              fittingRange->value(1);
              fittingRange->align(Fl_Align(FL_ALIGN_LEFT));
              fittingRange->when(FL_WHEN_NEVER);
            } // Fl_Value_Slider* fittingRange
            { Fl_Button* o = new Fl_Button(870, 905, 85, 25, "Set All Diodes");
              o->callback((Fl_Callback*)cb_Set);
            } // Fl_Button* o
            { Fl_Button* o = new Fl_Button(870, 935, 85, 30, "Fit All Diodes");
              o->callback((Fl_Callback*)cb_Fit2);
            } // Fl_Button* o
            { Fl_Light_Button* o = new Fl_Light_Button(965, 935, 115, 30, "Cal. Whole Vm");
              o->callback((Fl_Callback*)cb_Cal);
            } // Fl_Light_Button* o
            { Fl_Light_Button* o = new Fl_Light_Button(1075, 845, 55, 25, "Auto");
              o->value(1);
              o->callback((Fl_Callback*)cb_Auto);
            } // Fl_Light_Button* o
            { spikeSlopeThreshold = new Fl_Float_Input(1205, 905, 65, 25, "Spike Slope Thre.");
              spikeSlopeThreshold->type(1);
              spikeSlopeThreshold->callback((Fl_Callback*)cb_spikeSlopeThreshold);
              spikeSlopeThreshold->when(FL_WHEN_ENTER_KEY);
            } // Fl_Float_Input* spikeSlopeThreshold
            { fittingStepSize = new Fl_Value_Slider(1100, 815, 170, 25, "Step Size");
              fittingStepSize->type(5);
              fittingStepSize->selection_color((Fl_Color)1);
              fittingStepSize->minimum(1);
              fittingStepSize->maximum(16);
              fittingStepSize->step(1);
              fittingStepSize->value(1);
              fittingStepSize->align(Fl_Align(FL_ALIGN_LEFT));
              fittingStepSize->when(FL_WHEN_NEVER);
            } // Fl_Value_Slider* fittingStepSize
            { spikeAmpThreshold = new Fl_Float_Input(1205, 930, 65, 10, "Spike Amp Thre.");
              spikeAmpThreshold->type(1);
              spikeAmpThreshold->callback((Fl_Callback*)cb_spikeAmpThreshold);
              spikeAmpThreshold->when(FL_WHEN_ENTER_KEY);
            } // Fl_Float_Input* spikeAmpThreshold
            { Fl_Button* o = new Fl_Button(965, 905, 70, 25, "Init. Amp");
              o->callback((Fl_Callback*)cb_Init);
            } // Fl_Button* o
            { onsetLowerBoundTxt = new Fl_Int_Input(1165, 690, 45, 25, "Range (pt)");
              onsetLowerBoundTxt->type(2);
              onsetLowerBoundTxt->labelfont(1);
              onsetLowerBoundTxt->labelsize(12);
              onsetLowerBoundTxt->textfont(1);
              onsetLowerBoundTxt->textsize(12);
              onsetLowerBoundTxt->callback((Fl_Callback*)cb_onsetLowerBoundTxt);
              onsetLowerBoundTxt->when(FL_WHEN_ENTER_KEY);
            } // Fl_Int_Input* onsetLowerBoundTxt
            { onsetHigherBoundTxt = new Fl_Int_Input(1225, 690, 45, 25, "~ ");
              onsetHigherBoundTxt->type(2);
              onsetHigherBoundTxt->labelfont(1);
              onsetHigherBoundTxt->labelsize(12);
              onsetHigherBoundTxt->textfont(1);
              onsetHigherBoundTxt->textsize(12);
              onsetHigherBoundTxt->callback((Fl_Callback*)cb_onsetHigherBoundTxt);
              onsetHigherBoundTxt->when(FL_WHEN_ENTER_KEY);
            } // Fl_Int_Input* onsetHigherBoundTxt
            o->end();
          } // Fl_Group* o
          { Fl_Group* o = new Fl_Group(865, 685, 410, 280, "Save/Load");
            o->color((Fl_Color)174);
            o->labelfont(1);
            o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
            o->hide();
            { Fl_Button* o = new Fl_Button(865, 750, 55, 25, "Traces");
              o->callback((Fl_Callback*)cb_Traces);
            } // Fl_Button* o
            { Fl_Choice* o = new Fl_Choice(925, 750, 55, 25, "choice:");
              o->down_box(FL_BORDER_BOX);
              o->labeltype(FL_NO_LABEL);
              o->menu(menu_choice);
            } // Fl_Choice* o
            { Fl_Button* o = new Fl_Button(865, 720, 130, 25, "Save Time Course");
              o->callback((Fl_Callback*)cb_Save9);
            } // Fl_Button* o
            { Fl_Button* o = new Fl_Button(865, 690, 130, 25, "Save Values");
              o->callback((Fl_Callback*)cb_Savea);
            } // Fl_Button* o
            { twSaveTracesStartPt = new Fl_Int_Input(980, 750, 50, 25, "input:");
              twSaveTracesStartPt->type(2);
              twSaveTracesStartPt->labeltype(FL_NO_LABEL);
              twSaveTracesStartPt->callback((Fl_Callback*)cb_twSaveTracesStartPt);
              twSaveTracesStartPt->when(FL_WHEN_ENTER_KEY);
            } // Fl_Int_Input* twSaveTracesStartPt
            { twSaveTracesEndPt = new Fl_Int_Input(1030, 750, 50, 25, "(pt)");
              twSaveTracesEndPt->type(2);
              twSaveTracesEndPt->callback((Fl_Callback*)cb_twSaveTracesEndPt);
              twSaveTracesEndPt->align(Fl_Align(FL_ALIGN_RIGHT));
              twSaveTracesEndPt->when(FL_WHEN_ENTER_KEY);
            } // Fl_Int_Input* twSaveTracesEndPt
            { Fl_Button* o = new Fl_Button(865, 780, 150, 25, "Save Fitting Variables");
              o->callback((Fl_Callback*)cb_Saveb);
            } // Fl_Button* o
            { Fl_Button* o = new Fl_Button(865, 840, 180, 25, "Save Simulation Properties");
              o->callback((Fl_Callback*)cb_Savec);
            } // Fl_Button* o
            { Fl_Button* o = new Fl_Button(865, 810, 180, 25, "Save Alpha/Vm Traces");
              o->callback((Fl_Callback*)cb_Savee);
            } // Fl_Button* o
            { Fl_Button* o = new Fl_Button(1020, 780, 150, 25, "Load Fitting Variables");
              o->callback((Fl_Callback*)cb_Load4);
            } // Fl_Button* o
            o->end();
          } // Fl_Group* o
          { Fl_Group* o = new Fl_Group(860, 695, 410, 275, "ROI");
            o->color((Fl_Color)215);
            o->selection_color(FL_BACKGROUND2_COLOR);
            { awStartNewRegion = new Fl_Light_Button(870, 710, 95, 25, "New Region");
              awStartNewRegion->selection_color((Fl_Color)119);
              awStartNewRegion->callback((Fl_Callback*)cb_awStartNewRegion);
            } // Fl_Light_Button* awStartNewRegion
            { allRegionsDisplay = new Fl_Group(1050, 750, 150, 65, "Regions");
              allRegionsDisplay->box(FL_DOWN_BOX);
              allRegionsDisplay->end();
            } // Fl_Group* allRegionsDisplay
            { Fl_Choice* o = new Fl_Choice(1090, 700, 165, 25, "Current Region");
              o->down_box(FL_BORDER_BOX);
              o->menu(menu_Current);
            } // Fl_Choice* o
            o->end();
          } // Fl_Group* o
          o->end();
        } // Fl_Tabs* o
        { tw = new TraceWindow(640, 35, 638, 620);
          tw->box(FL_BORDER_FRAME);
          tw->color(FL_FOREGROUND_COLOR);
          tw->selection_color(FL_BACKGROUND_COLOR);
          tw->labeltype(FL_NO_LABEL);
          tw->labelfont(0);
          tw->labelsize(14);
          tw->labelcolor(FL_FOREGROUND_COLOR);
          tw->align(Fl_Align(FL_ALIGN_CENTER));
          tw->when(FL_WHEN_RELEASE);
        } // TraceWindow* tw
        traceGroup->end();
      } // Fl_Group* traceGroup
      { dapGroup = new Fl_Group(640, 30, 640, 940, "DAP");
        dapGroup->color((Fl_Color)26);
        { Fl_Group* o = new Fl_Group(645, 35, 630, 165, "TTL Output Controls");
          o->box(FL_DOWN_BOX);
          o->color((Fl_Color)254);
          o->labelfont(1);
          o->align(Fl_Align(FL_ALIGN_TOP|FL_ALIGN_INSIDE));
          { Fl_Box* o = new Fl_Box(745, 50, 60, 20, "ONSET");
            o->color(FL_FOREGROUND_COLOR);
            o->labelfont(8);
            o->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
          } // Fl_Box* o
          { Fl_Box* o = new Fl_Box(805, 50, 135, 20, "DURATION ( m sec)");
            o->color(FL_FOREGROUND_COLOR);
            o->labelfont(8);
            o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
          } // Fl_Box* o
          { Fl_Box* o = new Fl_Box(645, 70, 95, 25, "Reset");
            o->color(FL_FOREGROUND_COLOR);
            o->align(Fl_Align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE));
            o->hide();
          } // Fl_Box* o
          { resetOnset = new Fl_Float_Input(740, 70, 50, 25);
            resetOnset->type(1);
            resetOnset->callback((Fl_Callback*)cb_resetOnset);
            resetOnset->align(Fl_Align(FL_ALIGN_RIGHT));
            resetOnset->when(FL_WHEN_ENTER_KEY);
            resetOnset->hide();
          } // Fl_Float_Input* resetOnset
          { resetDuration = new Fl_Float_Input(790, 70, 50, 25);
            resetDuration->type(1);
            resetDuration->callback((Fl_Callback*)cb_resetDuration);
            resetDuration->align(Fl_Align(FL_ALIGN_RIGHT));
            resetDuration->when(FL_WHEN_ENTER_KEY);
            resetDuration->hide();
          } // Fl_Float_Input* resetDuration
          { Fl_Box* o = new Fl_Box(645, 75, 95, 25, "Light On");
            o->color(FL_FOREGROUND_COLOR);
            o->align(Fl_Align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE));
          } // Fl_Box* o
          { shutterOnset = new Fl_Float_Input(740, 75, 50, 25);
            shutterOnset->type(1);
            shutterOnset->callback((Fl_Callback*)cb_shutterOnset);
            shutterOnset->align(Fl_Align(FL_ALIGN_RIGHT));
            shutterOnset->when(FL_WHEN_ENTER_KEY);
          } // Fl_Float_Input* shutterOnset
          { shutterDuration = new Fl_Float_Input(790, 75, 50, 25);
            shutterDuration->type(1);
            shutterDuration->callback((Fl_Callback*)cb_shutterDuration);
            shutterDuration->align(Fl_Align(FL_ALIGN_RIGHT));
            shutterDuration->when(FL_WHEN_ENTER_KEY);
          } // Fl_Float_Input* shutterDuration
          { Fl_Box* o = new Fl_Box(645, 100, 95, 25, "Acquisition");
            o->color(FL_FOREGROUND_COLOR);
            o->align(Fl_Align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE));
          } // Fl_Box* o
          { acquiOnset = new Fl_Int_Input(740, 100, 50, 25);
            acquiOnset->type(2);
            acquiOnset->callback((Fl_Callback*)cb_acquiOnset);
            acquiOnset->align(Fl_Align(FL_ALIGN_RIGHT));
            acquiOnset->when(FL_WHEN_ENTER_KEY);
          } // Fl_Int_Input* acquiOnset
          { acquiDuration = new Fl_Output(790, 100, 50, 25);
            acquiDuration->labeltype(FL_NO_LABEL);
            acquiDuration->textfont(1);
            acquiDuration->textcolor((Fl_Color)4);
            acquiDuration->when(FL_WHEN_NEVER);
          } // Fl_Output* acquiDuration
          { Fl_Box* o = new Fl_Box(645, 125, 95, 25, "Stimulator #1");
            o->color(FL_FOREGROUND_COLOR);
            o->align(Fl_Align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE));
          } // Fl_Box* o
          { sti1Onset = new Fl_Float_Input(740, 125, 50, 25);
            sti1Onset->type(1);
            sti1Onset->callback((Fl_Callback*)cb_sti1Onset);
            sti1Onset->align(Fl_Align(FL_ALIGN_RIGHT));
            sti1Onset->when(FL_WHEN_ENTER_KEY);
          } // Fl_Float_Input* sti1Onset
          { sti1Duration = new Fl_Float_Input(790, 125, 50, 25);
            sti1Duration->type(1);
            sti1Duration->callback((Fl_Callback*)cb_sti1Duration);
            sti1Duration->align(Fl_Align(FL_ALIGN_RIGHT));
            sti1Duration->when(FL_WHEN_ENTER_KEY);
          } // Fl_Float_Input* sti1Duration
          { Fl_Box* o = new Fl_Box(645, 150, 95, 25, "Stimulator #2");
            o->color(FL_FOREGROUND_COLOR);
            o->align(Fl_Align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE));
          } // Fl_Box* o
          { sti2Onset = new Fl_Float_Input(740, 150, 50, 25);
            sti2Onset->type(1);
            sti2Onset->callback((Fl_Callback*)cb_sti2Onset);
            sti2Onset->align(Fl_Align(FL_ALIGN_RIGHT));
            sti2Onset->when(FL_WHEN_ENTER_KEY);
          } // Fl_Float_Input* sti2Onset
          { sti2Duration = new Fl_Float_Input(790, 150, 50, 25);
            sti2Duration->type(1);
            sti2Duration->callback((Fl_Callback*)cb_sti2Duration);
            sti2Duration->align(Fl_Align(FL_ALIGN_RIGHT));
            sti2Duration->when(FL_WHEN_ENTER_KEY);
          } // Fl_Float_Input* sti2Duration
          { dapWindow = new DapWindow(840, 77, 430, 109);
            dapWindow->box(FL_BORDER_BOX);
            dapWindow->color(FL_FOREGROUND_COLOR);
            dapWindow->selection_color(FL_BACKGROUND_COLOR);
            dapWindow->labeltype(FL_NORMAL_LABEL);
            dapWindow->labelfont(0);
            dapWindow->labelsize(14);
            dapWindow->labelcolor(FL_BACKGROUND2_COLOR);
            dapWindow->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
            dapWindow->when(FL_WHEN_RELEASE);
          } // DapWindow* dapWindow
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(645, 205, 350, 110, "Acquisition Controls");
          o->box(FL_DOWN_BOX);
          o->color((Fl_Color)87);
          o->labelfont(1);
          o->align(Fl_Align(FL_ALIGN_TOP|FL_ALIGN_INSIDE));
          { numPts = new Fl_Int_Input(810, 230, 75, 25, "Number of Points:");
            numPts->type(2);
            numPts->callback((Fl_Callback*)cb_numPts);
            numPts->when(FL_WHEN_ENTER_KEY);
          } // Fl_Int_Input* numPts
          { CameraProgram = new Fl_Choice(765, 265, 120, 25);
            CameraProgram->down_box(FL_BORDER_BOX);
            CameraProgram->callback((Fl_Callback*)cb_CameraProgram);
          } // Fl_Choice* CameraProgram
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(645, 330, 295, 135, "Stimulator #1");
          o->box(FL_DOWN_BOX);
          o->color((Fl_Color)222);
          o->labelfont(1);
          o->align(Fl_Align(FL_ALIGN_TOP|FL_ALIGN_INSIDE));
          { numBursts1 = new Fl_Input(810, 410, 75, 25, "Number of Bursts:");
            numBursts1->callback((Fl_Callback*)cb_numBursts1);
            numBursts1->when(FL_WHEN_ENTER_KEY);
          } // Fl_Input* numBursts1
          { intBursts1 = new Fl_Input(810, 435, 75, 25, "Interval between Bursts:");
            intBursts1->callback((Fl_Callback*)cb_intBursts1);
            intBursts1->when(FL_WHEN_ENTER_KEY);
          } // Fl_Input* intBursts1
          { Fl_Box* o = new Fl_Box(885, 435, 55, 25, "(m sec)");
            o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
          } // Fl_Box* o
          { numPulses1 = new Fl_Input(810, 355, 75, 25, "Number of pulses:");
            numPulses1->callback((Fl_Callback*)cb_numPulses1);
            numPulses1->when(FL_WHEN_ENTER_KEY);
          } // Fl_Input* numPulses1
          { intPulses1 = new Fl_Input(810, 380, 75, 25, "Interval between pulses:");
            intPulses1->callback((Fl_Callback*)cb_intPulses1);
            intPulses1->when(FL_WHEN_ENTER_KEY);
          } // Fl_Input* intPulses1
          { Fl_Box* o = new Fl_Box(885, 380, 55, 25, "(m sec)");
            o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
          } // Fl_Box* o
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(945, 330, 295, 135, "Stimulator #2");
          o->box(FL_DOWN_BOX);
          o->color((Fl_Color)222);
          o->labelfont(1);
          o->align(Fl_Align(FL_ALIGN_TOP|FL_ALIGN_INSIDE));
          { numBursts2 = new Fl_Input(1110, 410, 75, 25, "Number of Bursts:");
            numBursts2->callback((Fl_Callback*)cb_numBursts2);
            numBursts2->when(FL_WHEN_ENTER_KEY);
          } // Fl_Input* numBursts2
          { intBursts2 = new Fl_Input(1110, 435, 75, 25, "Interval between Bursts:");
            intBursts2->callback((Fl_Callback*)cb_intBursts2);
            intBursts2->when(FL_WHEN_ENTER_KEY);
          } // Fl_Input* intBursts2
          { Fl_Box* o = new Fl_Box(1185, 435, 55, 25, "(m sec)");
            o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
          } // Fl_Box* o
          { numPulses2 = new Fl_Input(1110, 355, 75, 25, "Number of pulses:");
            numPulses2->callback((Fl_Callback*)cb_numPulses2);
            numPulses2->when(FL_WHEN_ENTER_KEY);
          } // Fl_Input* numPulses2
          { intPulses2 = new Fl_Input(1110, 380, 75, 25, "Interval between pulses:");
            intPulses2->callback((Fl_Callback*)cb_intPulses2);
            intPulses2->when(FL_WHEN_ENTER_KEY);
          } // Fl_Input* intPulses2
          { Fl_Box* o = new Fl_Box(1185, 380, 55, 25, "(m sec)");
            o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
          } // Fl_Box* o
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(645, 480, 310, 85, "Record Schedule");
          o->box(FL_DOWN_BOX);
          o->color((Fl_Color)103);
          o->labelfont(1);
          o->align(Fl_Align(FL_ALIGN_TOP|FL_ALIGN_INSIDE));
          { intRecords = new Fl_Int_Input(820, 530, 60, 25, "Interval between Records:");
            intRecords->type(2);
            intRecords->callback((Fl_Callback*)cb_intRecords);
            intRecords->when(FL_WHEN_ENTER_KEY);
          } // Fl_Int_Input* intRecords
          { numRecords = new Fl_Int_Input(820, 500, 60, 25, "Number of Records:");
            numRecords->type(2);
            numRecords->callback((Fl_Callback*)cb_numRecords);
            numRecords->when(FL_WHEN_ENTER_KEY);
          } // Fl_Int_Input* numRecords
          { Fl_Box* o = new Fl_Box(880, 530, 75, 25, "(sec)");
            o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
          } // Fl_Box* o
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(645, 580, 310, 90, "Trial Controls");
          o->box(FL_DOWN_BOX);
          o->color((Fl_Color)175);
          o->labelfont(1);
          o->align(Fl_Align(FL_ALIGN_TOP|FL_ALIGN_INSIDE));
          { Fl_Box* o = new Fl_Box(875, 635, 40, 25, "(sec)");
            o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
          } // Fl_Box* o
          { numTrials = new Fl_Int_Input(825, 605, 50, 25, "Number of Trials:");
            numTrials->type(2);
            numTrials->callback((Fl_Callback*)cb_numTrials);
            numTrials->when(FL_WHEN_ENTER_KEY);
          } // Fl_Int_Input* numTrials
          { intTrials = new Fl_Int_Input(825, 635, 50, 25, "Interval between Trials:");
            intTrials->type(2);
            intTrials->callback((Fl_Callback*)cb_intTrials);
            intTrials->when(FL_WHEN_ENTER_KEY);
          } // Fl_Int_Input* intTrials
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(960, 480, 290, 60, "Gain");
          o->box(FL_DOWN_BOX);
          o->color((Fl_Color)172);
          o->labelfont(1);
          o->align(Fl_Align(FL_ALIGN_TOP|FL_ALIGN_INSIDE));
          { Fl_Button* o = new Fl_Button(1145, 500, 30, 25, "@<");
            o->callback((Fl_Callback*)cb_e);
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(1178, 500, 30, 25, "@>");
            o->callback((Fl_Callback*)cb_f);
          } // Fl_Button* o
          { acquiGain = new Fl_Output(1080, 500, 60, 25, "Acquisition Gain:");
            acquiGain->when(FL_WHEN_NEVER);
          } // Fl_Output* acquiGain
          o->end();
        } // Fl_Group* o
        dapGroup->end();
      } // Fl_Group* dapGroup
      { mapGroup = new Fl_Group(640, 30, 640, 940, "Map/Movie");
        mapGroup->color((Fl_Color)26);
        mapGroup->hide();
        { Fl_Group* o = new Fl_Group(645, 660, 615, 25, "Mode Control");
          o->labeltype(FL_NO_LABEL);
          { Fl_Choice* o = new Fl_Choice(690, 660, 70, 25, "Mode:");
            o->down_box(FL_BORDER_BOX);
            o->menu(menu_Mode1);
          } // Fl_Choice* o
          { mapFeatureType = new Fl_Choice(805, 660, 145, 25, "Map:");
            mapFeatureType->down_box(FL_BORDER_BOX);
            mapFeatureType->menu(menu_mapFeatureType);
          } // Fl_Choice* mapFeatureType
          { Fl_Choice* o = new Fl_Choice(1005, 660, 255, 25, "Movie:");
            o->down_box(FL_BORDER_BOX);
            o->menu(menu_Movie);
          } // Fl_Choice* o
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(645, 690, 320, 170, "Color Controls");
          o->box(FL_DOWN_FRAME);
          o->labelfont(1);
          o->align(Fl_Align(FL_ALIGN_TOP|FL_ALIGN_INSIDE));
          { Fl_Choice* o = new Fl_Choice(750, 715, 125, 25, "Color Scale:");
            o->down_box(FL_BORDER_BOX);
            o->menu(menu_Color1);
          } // Fl_Choice* o
          { Fl_Choice* o = new Fl_Choice(750, 745, 125, 25, "Control Mode:");
            o->down_box(FL_BORDER_BOX);
            o->menu(menu_Control1);
          } // Fl_Choice* o
          { Fl_Tabs* o = new Fl_Tabs(750, 775, 205, 80, "Color Scale Bar");
            o->color((Fl_Color)26);
            o->labeltype(FL_NO_LABEL);
            { Fl_Group* o = new Fl_Group(750, 795, 205, 60, "Bounds");
              o->color((Fl_Color)23);
              o->when(FL_WHEN_NEVER);
              { Fl_Roller* o = new Fl_Roller(870, 800, 75, 25);
                o->type(1);
                o->minimum(-100);
                o->maximum(100);
                o->step(0.01);
                o->value(1);
                o->callback((Fl_Callback*)cb_10);
              } // Fl_Roller* o
              { cwColorUpperBound = new Fl_Output(805, 800, 60, 25, "Upper:");
              } // Fl_Output* cwColorUpperBound
              { cwColorLowerBound = new Fl_Output(805, 825, 60, 25, "Lower:");
              } // Fl_Output* cwColorLowerBound
              { Fl_Roller* o = new Fl_Roller(870, 825, 75, 25);
                o->type(1);
                o->minimum(-100);
                o->maximum(100);
                o->step(0.01);
                o->callback((Fl_Callback*)cb_11);
              } // Fl_Roller* o
              o->end();
            } // Fl_Group* o
            { Fl_Group* o = new Fl_Group(750, 795, 205, 60, "Center");
              o->color((Fl_Color)23);
              o->when(FL_WHEN_NEVER);
              o->hide();
              { Fl_Roller* o = new Fl_Roller(870, 800, 75, 25);
                o->type(1);
                o->minimum(-100);
                o->maximum(100);
                o->step(0.01);
                o->value(1);
                o->callback((Fl_Callback*)cb_12);
              } // Fl_Roller* o
              { cwColorAmp = new Fl_Output(805, 800, 60, 25, "Amp:");
              } // Fl_Output* cwColorAmp
              { cwColorCenter = new Fl_Output(805, 825, 60, 25, "Center:");
              } // Fl_Output* cwColorCenter
              { Fl_Roller* o = new Fl_Roller(870, 825, 75, 25);
                o->type(1);
                o->minimum(-100);
                o->maximum(100);
                o->step(0.01);
                o->callback((Fl_Callback*)cb_13);
              } // Fl_Roller* o
              o->end();
            } // Fl_Group* o
            o->end();
          } // Fl_Tabs* o
          { Fl_Light_Button* o = new Fl_Light_Button(880, 715, 80, 25, "Contour");
            o->value(1);
            o->callback((Fl_Callback*)cb_Contour);
          } // Fl_Light_Button* o
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(1005, 690, 255, 170, "Movie Controls");
          o->box(FL_DOWN_FRAME);
          o->labelfont(1);
          o->align(Fl_Align(FL_ALIGN_TOP|FL_ALIGN_INSIDE));
          { Fl_Group* o = new Fl_Group(1010, 715, 215, 25);
            { Fl_Button* o = new Fl_Button(1015, 715, 40, 25, "@|<");
              o->callback((Fl_Callback*)cb_14);
            } // Fl_Button* o
            { Fl_Button* o = new Fl_Button(1060, 715, 40, 25, "@>");
              o->callback((Fl_Callback*)cb_15);
            } // Fl_Button* o
            { Fl_Button* o = new Fl_Button(1105, 715, 40, 25, "@||");
              o->callback((Fl_Callback*)cb_16);
            } // Fl_Button* o
            { Fl_Light_Button* o = new Fl_Light_Button(1150, 715, 75, 25, "Repeat");
              o->selection_color((Fl_Color)1);
              o->callback((Fl_Callback*)cb_Repeat);
            } // Fl_Light_Button* o
            o->end();
          } // Fl_Group* o
          { cwCurrentPtRoller = new Fl_Roller(1150, 745, 75, 25);
            cwCurrentPtRoller->type(1);
            cwCurrentPtRoller->maximum(10000);
            cwCurrentPtRoller->step(1);
            cwCurrentPtRoller->value(160);
            cwCurrentPtRoller->callback((Fl_Callback*)cb_cwCurrentPtRoller);
          } // Fl_Roller* cwCurrentPtRoller
          { cwCurrentPtText = new Fl_Output(1095, 745, 50, 25, "Current Pt");
          } // Fl_Output* cwCurrentPtText
          { Fl_Value_Slider* o = new Fl_Value_Slider(1060, 825, 190, 25, "Speed");
            o->type(5);
            o->color(FL_LIGHT2);
            o->selection_color((Fl_Color)1);
            o->minimum(1);
            o->maximum(50);
            o->step(1);
            o->value(10);
            o->callback((Fl_Callback*)cb_Speed);
            o->align(Fl_Align(FL_ALIGN_LEFT));
          } // Fl_Value_Slider* o
          { cwStartPt = new Fl_Int_Input(1095, 770, 50, 25, "Start Pt");
            cwStartPt->type(2);
            cwStartPt->callback((Fl_Callback*)cb_cwStartPt);
            cwStartPt->when(FL_WHEN_ENTER_KEY);
          } // Fl_Int_Input* cwStartPt
          { cwEndPt = new Fl_Input(1095, 795, 50, 25, "End Pt");
            cwEndPt->callback((Fl_Callback*)cb_cwEndPt);
            cwEndPt->when(FL_WHEN_ENTER_KEY);
          } // Fl_Input* cwEndPt
          { Fl_Light_Button* o = new Fl_Light_Button(1150, 795, 100, 25, "Make Movie");
            o->callback((Fl_Callback*)cb_Make1);
          } // Fl_Light_Button* o
          o->end();
        } // Fl_Group* o
        { Fl_Light_Button* o = new Fl_Light_Button(880, 745, 80, 25, "Black BG");
          o->value(1);
          o->callback((Fl_Callback*)cb_Black);
        } // Fl_Light_Button* o
        { cw = new ColorWindow(640, 35, 638, 620, "ColorWin");
          cw->box(FL_BORDER_FRAME);
          cw->color(FL_FOREGROUND_COLOR);
          cw->selection_color(FL_BACKGROUND_COLOR);
          cw->labeltype(FL_NORMAL_LABEL);
          cw->labelfont(0);
          cw->labelsize(14);
          cw->labelcolor(FL_FOREGROUND_COLOR);
          cw->align(Fl_Align(FL_ALIGN_CENTER));
          cw->when(FL_WHEN_RELEASE);
        } // ColorWindow* cw
        mapGroup->end();
      } // Fl_Group* mapGroup
      o->end();
    } // Fl_Tabs* o
    { Fl_Group* o = new Fl_Group(0, 35, 638, 620, "Array Window");
      o->labeltype(FL_NO_LABEL);
      { aw = new ArrayWindow(0, 35, 638, 620);
        aw->box(FL_BORDER_FRAME);
        aw->color(FL_FOREGROUND_COLOR);
        aw->selection_color(FL_BACKGROUND_COLOR);
        aw->labeltype(FL_NO_LABEL);
        aw->labelfont(1);
        aw->labelsize(14);
        aw->labelcolor(FL_FOREGROUND_COLOR);
        aw->align(Fl_Align(FL_ALIGN_CENTER));
        aw->when(FL_WHEN_RELEASE);
      } // ArrayWindow* aw
      o->end();
    } // Fl_Group* o
    mainWindow->end();
    mainWindow->resizable(mainWindow);
  } // Fl_Double_Window* mainWindow
}

void UserInterface::show() {
  mainWindow->show();
}
