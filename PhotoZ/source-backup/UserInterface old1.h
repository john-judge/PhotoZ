// generated by Fast Light User Interface Designer (fluid) version 1.0304

#ifndef UserInterface_h
#define UserInterface_h
#include <FL/Fl.H>
#include <FL/Fl_Double_Window.H>
#include "MainController.h"
extern MainController *mc;
#include "RecControl.h"
#include <FL/Fl_Box.H>
#include <FL/Fl_Menu_Bar.H>
#include <FL/Fl_Button.H>
#include <FL/Fl_Tabs.H>
#include <FL/Fl_Group.H>
#include <FL/Fl_Check_Button.H>
#include <FL/Fl_Light_Button.H>
#include <FL/Fl_Output.H>
#include <FL/Fl_Int_Input.H>
#include <FL/Fl_Choice.H>
#include <FL/Fl_Roller.H>
#include <FL/Fl_Value_Slider.H>
#include <FL/Fl_Float_Input.H>
#include <FL/Fl_Slider.H>
#include <stdlib.h>
#include <math.h>
#include <stdio.h>
#include "TraceWindow.h"
#include "DapWindow.h"
#include <FL/Fl_Input.H>
#include "ColorWindow.h"
#include "ArrayWindow.h"

class UserInterface {
public:
  UserInterface();
  Fl_Double_Window *mainWindow;
  static Fl_Menu_Item menu_Menu[];
private:
  inline void cb_Open_i(Fl_Menu_*, void*);
  static void cb_Open(Fl_Menu_*, void*);
  inline void cb_Create_i(Fl_Menu_*, void*);
  static void cb_Create(Fl_Menu_*, void*);
  inline void cb_Exit_i(Fl_Menu_*, void*);
  static void cb_Exit(Fl_Menu_*, void*);
  inline void cb_Save_i(Fl_Menu_*, void*);
  static void cb_Save(Fl_Menu_*, void*);
  inline void cb_Load_i(Fl_Menu_*, void*);
  static void cb_Load(Fl_Menu_*, void*);
  inline void cb_Save1_i(Fl_Button*, void*);
  static void cb_Save1(Fl_Button*, void*);
  inline void cb_Save2_i(Fl_Button*, void*);
  static void cb_Save2(Fl_Button*, void*);
  inline void cb_Take_i(Fl_Button*, void*);
  static void cb_Take(Fl_Button*, void*);
  inline void cb_Record_i(Fl_Button*, void*);
  static void cb_Record(Fl_Button*, void*);
public:
  Fl_Button *saveData2File;
private:
  inline void cb_saveData2File_i(Fl_Button*, void*);
  static void cb_saveData2File(Fl_Button*, void*);
public:
  Fl_Check_Button *scheduleB;
private:
  inline void cb_scheduleB_i(Fl_Check_Button*, void*);
  static void cb_scheduleB(Fl_Check_Button*, void*);
  inline void cb_Stop_i(Fl_Button*, void*);
  static void cb_Stop(Fl_Button*, void*);
  inline void cb_RLI_i(Fl_Check_Button*, void*);
  static void cb_RLI(Fl_Check_Button*, void*);
  inline void cb_Save3_i(Fl_Button*, void*);
  static void cb_Save3(Fl_Button*, void*);
public:
  Fl_Light_Button *lfRun;
private:
  inline void cb_lfRun_i(Fl_Light_Button*, void*);
  static void cb_lfRun(Fl_Light_Button*, void*);
  inline void cb_Go_i(Fl_Button*, void*);
  static void cb_Go(Fl_Button*, void*);
  inline void cb_Save4_i(Fl_Button*, void*);
  static void cb_Save4(Fl_Button*, void*);
  inline void cb_Load1_i(Fl_Button*, void*);
  static void cb_Load1(Fl_Button*, void*);
  inline void cb_Procedure_i(Fl_Button*, void*);
  static void cb_Procedure(Fl_Button*, void*);
  inline void cb_Procedure1_i(Fl_Button*, void*);
  static void cb_Procedure1(Fl_Button*, void*);
public:
  Fl_Output *fileName;
  Fl_Int_Input *sliceNo;
private:
  inline void cb_sliceNo_i(Fl_Int_Input*, void*);
  static void cb_sliceNo(Fl_Int_Input*, void*);
public:
  Fl_Int_Input *locationNo;
private:
  inline void cb_locationNo_i(Fl_Int_Input*, void*);
  static void cb_locationNo(Fl_Int_Input*, void*);
public:
  Fl_Int_Input *recordNo;
private:
  inline void cb_recordNo_i(Fl_Int_Input*, void*);
  static void cb_recordNo(Fl_Int_Input*, void*);
public:
  Fl_Button *sliceNoDecrease;
private:
  inline void cb_sliceNoDecrease_i(Fl_Button*, void*);
  static void cb_sliceNoDecrease(Fl_Button*, void*);
public:
  Fl_Button *locationNoDecrease;
private:
  inline void cb_locationNoDecrease_i(Fl_Button*, void*);
  static void cb_locationNoDecrease(Fl_Button*, void*);
public:
  Fl_Button *recordNoDecrease;
private:
  inline void cb_recordNoDecrease_i(Fl_Button*, void*);
  static void cb_recordNoDecrease(Fl_Button*, void*);
public:
  Fl_Button *sliceNoIncrease;
private:
  inline void cb_sliceNoIncrease_i(Fl_Button*, void*);
  static void cb_sliceNoIncrease(Fl_Button*, void*);
public:
  Fl_Button *locationNoIncrease;
private:
  inline void cb_locationNoIncrease_i(Fl_Button*, void*);
  static void cb_locationNoIncrease(Fl_Button*, void*);
public:
  Fl_Button *recordNoIncrease;
private:
  inline void cb_recordNoIncrease_i(Fl_Button*, void*);
  static void cb_recordNoIncrease(Fl_Button*, void*);
public:
  Fl_Output *sliceNoMax;
  Fl_Output *locationNoMax;
  Fl_Output *recordNoMax;
  Fl_Group *trialNoGroup;
  Fl_Button *trialNoDecrease;
private:
  inline void cb_trialNoDecrease_i(Fl_Button*, void*);
  static void cb_trialNoDecrease(Fl_Button*, void*);
public:
  Fl_Button *trialNoIncrease;
private:
  inline void cb_trialNoIncrease_i(Fl_Button*, void*);
  static void cb_trialNoIncrease(Fl_Button*, void*);
public:
  Fl_Output *trialNoMax;
  Fl_Int_Input *trialNo;
private:
  inline void cb_trialNo_i(Fl_Int_Input*, void*);
  static void cb_trialNo(Fl_Int_Input*, void*);
public:
  Fl_Light_Button *awShowTrace;
private:
  inline void cb_awShowTrace_i(Fl_Light_Button*, void*);
  static void cb_awShowTrace(Fl_Light_Button*, void*);
public:
  Fl_Light_Button *awShowRliValue;
private:
  inline void cb_awShowRliValue_i(Fl_Light_Button*, void*);
  static void cb_awShowRliValue(Fl_Light_Button*, void*);
public:
  Fl_Light_Button *awShowDiodeNum;
private:
  inline void cb_awShowDiodeNum_i(Fl_Light_Button*, void*);
  static void cb_awShowDiodeNum(Fl_Light_Button*, void*);
  static Fl_Menu_Item menu_Background[];
  inline void cb_None_i(Fl_Menu_*, void*);
  static void cb_None(Fl_Menu_*, void*);
  inline void cb_Image_i(Fl_Menu_*, void*);
  static void cb_Image(Fl_Menu_*, void*);
  inline void cb_RLI1_i(Fl_Menu_*, void*);
  static void cb_RLI1(Fl_Menu_*, void*);
  inline void cb_Max_i(Fl_Menu_*, void*);
  static void cb_Max(Fl_Menu_*, void*);
  inline void cb_Spike_i(Fl_Menu_*, void*);
  static void cb_Spike(Fl_Menu_*, void*);
  inline void cb_Amp_i(Fl_Menu_*, void*);
  static void cb_Amp(Fl_Menu_*, void*);
  inline void cb_Max1_i(Fl_Menu_*, void*);
  static void cb_Max1(Fl_Menu_*, void*);
  inline void cb_EPSP_i(Fl_Menu_*, void*);
  static void cb_EPSP(Fl_Menu_*, void*);
public:
  Fl_Roller *awFpYScale;
private:
  inline void cb_awFpYScale_i(Fl_Roller*, void*);
  static void cb_awFpYScale(Fl_Roller*, void*);
public:
  Fl_Output *awFpYScaleTxt;
  Fl_Roller *awYScale;
private:
  inline void cb_awYScale_i(Fl_Roller*, void*);
  static void cb_awYScale(Fl_Roller*, void*);
public:
  Fl_Output *awYScaleTxt;
  Fl_Roller *awXScale;
private:
  inline void cb_awXScale_i(Fl_Roller*, void*);
  static void cb_awXScale(Fl_Roller*, void*);
public:
  Fl_Output *awXScaleTxt;
  Fl_Roller *awXShift;
private:
  inline void cb_awXShift_i(Fl_Roller*, void*);
  static void cb_awXShift(Fl_Roller*, void*);
public:
  Fl_Output *awXShiftTxt;
private:
  inline void cb_Load2_i(Fl_Button*, void*);
  static void cb_Load2(Fl_Button*, void*);
  inline void cb_Compare_i(Fl_Light_Button*, void*);
  static void cb_Compare(Fl_Light_Button*, void*);
public:
  Fl_Int_Input *record1No;
private:
  inline void cb_record1No_i(Fl_Int_Input*, void*);
  static void cb_record1No(Fl_Int_Input*, void*);
public:
  Fl_Int_Input *record2No;
private:
  inline void cb_record2No_i(Fl_Int_Input*, void*);
  static void cb_record2No(Fl_Int_Input*, void*);
  inline void cb_Nor2ArrayMax_i(Fl_Light_Button*, void*);
  static void cb_Nor2ArrayMax(Fl_Light_Button*, void*);
  inline void cb_Average_i(Fl_Light_Button*, void*);
  static void cb_Average(Fl_Light_Button*, void*);
  inline void cb__i(Fl_Value_Slider*, void*);
  static void cb_(Fl_Value_Slider*, void*);
  inline void cb_Save5_i(Fl_Button*, void*);
  static void cb_Save5(Fl_Button*, void*);
public:
  Fl_Button *resetCam;
private:
  inline void cb_resetCam_i(Fl_Button*, void*);
  static void cb_resetCam(Fl_Button*, void*);
  inline void cb_Save6_i(Fl_Button*, void*);
  static void cb_Save6(Fl_Button*, void*);
  static Fl_Menu_Item menu_Increase[];
  inline void cb_Increase_i(Fl_Menu_*, void*);
  static void cb_Increase(Fl_Menu_*, void*);
  inline void cb_Decrease_i(Fl_Menu_*, void*);
  static void cb_Decrease(Fl_Menu_*, void*);
  static Fl_Menu_Item menu_Increase1[];
  inline void cb_Actual_i(Fl_Menu_*, void*);
  static void cb_Actual(Fl_Menu_*, void*);
  inline void cb_Percent_i(Fl_Menu_*, void*);
  static void cb_Percent(Fl_Menu_*, void*);
public:
  Fl_Int_Input *digital_binning;
private:
  inline void cb_digital_binning_i(Fl_Int_Input*, void*);
  static void cb_digital_binning(Fl_Int_Input*, void*);
  inline void cb_RLI2_i(Fl_Light_Button*, void*);
  static void cb_RLI2(Fl_Light_Button*, void*);
  inline void cb_Data_i(Fl_Light_Button*, void*);
  static void cb_Data(Fl_Light_Button*, void*);
  inline void cb_F_i(Fl_Light_Button*, void*);
  static void cb_F(Fl_Light_Button*, void*);
public:
  Fl_Int_Input *startWindow;
private:
  inline void cb_startWindow_i(Fl_Int_Input*, void*);
  static void cb_startWindow(Fl_Int_Input*, void*);
public:
  Fl_Int_Input *widthWindow;
private:
  inline void cb_widthWindow_i(Fl_Int_Input*, void*);
  static void cb_widthWindow(Fl_Int_Input*, void*);
public:
  Fl_Float_Input *latencyStartTxt;
private:
  inline void cb_latencyStartTxt_i(Fl_Float_Input*, void*);
  static void cb_latencyStartTxt(Fl_Float_Input*, void*);
public:
  Fl_Roller *latencyStartRoller;
private:
  inline void cb_latencyStartRoller_i(Fl_Roller*, void*);
  static void cb_latencyStartRoller(Fl_Roller*, void*);
  inline void cb_Width_i(Fl_Value_Slider*, void*);
  static void cb_Width(Fl_Value_Slider*, void*);
  inline void cb_of_i(Fl_Value_Slider*, void*);
  static void cb_of(Fl_Value_Slider*, void*);
public:
  Fl_Roller *rliScalarRoller;
private:
  inline void cb_rliScalarRoller_i(Fl_Roller*, void*);
  static void cb_rliScalarRoller(Fl_Roller*, void*);
public:
  Fl_Float_Input *rliScalarTxt;
private:
  inline void cb_rliScalarTxt_i(Fl_Float_Input*, void*);
  static void cb_rliScalarTxt(Fl_Float_Input*, void*);
  inline void cb_Correction_i(Fl_Light_Button*, void*);
  static void cb_Correction(Fl_Light_Button*, void*);
  inline void cb_RLI3_i(Fl_Button*, void*);
  static void cb_RLI3(Fl_Button*, void*);
  inline void cb_Save7_i(Fl_Button*, void*);
  static void cb_Save7(Fl_Button*, void*);
  inline void cb_Load3_i(Fl_Button*, void*);
  static void cb_Load3(Fl_Button*, void*);
  inline void cb_Make_i(Fl_Button*, void*);
  static void cb_Make(Fl_Button*, void*);
  inline void cb_1_i(Fl_Button*, void*);
  static void cb_1(Fl_Button*, void*);
public:
  Fl_Float_Input *thresholdTxt;
private:
  inline void cb_2_i(Fl_Button*, void*);
  static void cb_2(Fl_Button*, void*);
  inline void cb_3_i(Fl_Button*, void*);
  static void cb_3(Fl_Button*, void*);
  inline void cb_4_i(Fl_Button*, void*);
  static void cb_4(Fl_Button*, void*);
  inline void cb_5_i(Fl_Button*, void*);
  static void cb_5(Fl_Button*, void*);
  inline void cb_6_i(Fl_Button*, void*);
  static void cb_6(Fl_Button*, void*);
  inline void cb_7_i(Fl_Button*, void*);
  static void cb_7(Fl_Button*, void*);
  inline void cb_8_i(Fl_Button*, void*);
  static void cb_8(Fl_Button*, void*);
  inline void cb_Ignore_i(Fl_Button*, void*);
  static void cb_Ignore(Fl_Button*, void*);
public:
  Fl_Choice *BLCType;
  static Fl_Menu_Item menu_BLCType[];
private:
  inline void cb_None1_i(Fl_Menu_*, void*);
  static void cb_None1(Fl_Menu_*, void*);
  inline void cb_Start_i(Fl_Menu_*, void*);
  static void cb_Start(Fl_Menu_*, void*);
  inline void cb_Start1_i(Fl_Menu_*, void*);
  static void cb_Start1(Fl_Menu_*, void*);
  inline void cb_Polynomial_i(Fl_Menu_*, void*);
  static void cb_Polynomial(Fl_Menu_*, void*);
  inline void cb_Arbitrary_i(Fl_Menu_*, void*);
  static void cb_Arbitrary(Fl_Menu_*, void*);
public:
  Fl_Int_Input *polynomialStartPtTxt;
private:
  inline void cb_polynomialStartPtTxt_i(Fl_Int_Input*, void*);
  static void cb_polynomialStartPtTxt(Fl_Int_Input*, void*);
public:
  Fl_Int_Input *polynomialNumPts;
private:
  inline void cb_polynomialNumPts_i(Fl_Int_Input*, void*);
  static void cb_polynomialNumPts(Fl_Int_Input*, void*);
public:
  Fl_Output *clampPtTxt;
private:
  inline void cb_9_i(Fl_Roller*, void*);
  static void cb_9(Fl_Roller*, void*);
  static Fl_Menu_Item menu_Output[];
  inline void cb_PNG_i(Fl_Menu_*, void*);
  static void cb_PNG(Fl_Menu_*, void*);
  inline void cb_BMP_i(Fl_Menu_*, void*);
  static void cb_BMP(Fl_Menu_*, void*);
  inline void cb_JPEG_i(Fl_Menu_*, void*);
  static void cb_JPEG(Fl_Menu_*, void*);
  inline void cb_TIFF_i(Fl_Menu_*, void*);
  static void cb_TIFF(Fl_Menu_*, void*);
public:
  Fl_Choice *inputImageFormat;
  static Fl_Menu_Item menu_inputImageFormat[];
private:
  inline void cb_BMP1_i(Fl_Menu_*, void*);
  static void cb_BMP1(Fl_Menu_*, void*);
  inline void cb_TIF_i(Fl_Menu_*, void*);
  static void cb_TIF(Fl_Menu_*, void*);
public:
  Fl_Output *awImageX0Txt;
  Fl_Roller *awImageX0;
private:
  inline void cb_awImageX0_i(Fl_Roller*, void*);
  static void cb_awImageX0(Fl_Roller*, void*);
public:
  Fl_Output *awImageY0Txt;
  Fl_Roller *awImageY0;
private:
  inline void cb_awImageY0_i(Fl_Roller*, void*);
  static void cb_awImageY0(Fl_Roller*, void*);
public:
  Fl_Value_Slider *awImageXSize;
private:
  inline void cb_awImageXSize_i(Fl_Value_Slider*, void*);
  static void cb_awImageXSize(Fl_Value_Slider*, void*);
public:
  Fl_Value_Slider *awImageYSize;
private:
  inline void cb_awImageYSize_i(Fl_Value_Slider*, void*);
  static void cb_awImageYSize(Fl_Value_Slider*, void*);
  inline void cb_White_i(Fl_Light_Button*, void*);
  static void cb_White(Fl_Light_Button*, void*);
  static Fl_Menu_Item menu_Color[];
  inline void cb_Color_i(Fl_Menu_*, void*);
  static void cb_Color(Fl_Menu_*, void*);
  inline void cb_Color1_i(Fl_Menu_*, void*);
  static void cb_Color1(Fl_Menu_*, void*);
  inline void cb_Blue_i(Fl_Menu_*, void*);
  static void cb_Blue(Fl_Menu_*, void*);
  inline void cb_Gray_i(Fl_Menu_*, void*);
  static void cb_Gray(Fl_Menu_*, void*);
  static Fl_Menu_Item menu_Control[];
  inline void cb_Bounds_i(Fl_Menu_*, void*);
  static void cb_Bounds(Fl_Menu_*, void*);
  inline void cb_Center_i(Fl_Menu_*, void*);
  static void cb_Center(Fl_Menu_*, void*);
  inline void cb_a_i(Fl_Roller*, void*);
  static void cb_a(Fl_Roller*, void*);
public:
  Fl_Output *colorUpperBound;
  Fl_Output *colorLowerBound;
private:
  inline void cb_b_i(Fl_Roller*, void*);
  static void cb_b(Fl_Roller*, void*);
  inline void cb_c_i(Fl_Roller*, void*);
  static void cb_c(Fl_Roller*, void*);
public:
  Fl_Output *colorAmp;
  Fl_Output *colorCenter;
private:
  inline void cb_d_i(Fl_Roller*, void*);
  static void cb_d(Fl_Roller*, void*);
  inline void cb_T_i(Fl_Light_Button*, void*);
  static void cb_T(Fl_Light_Button*, void*);
  static Fl_Menu_Item menu_Filter[];
  inline void cb_Binomial_i(Fl_Menu_*, void*);
  static void cb_Binomial(Fl_Menu_*, void*);
  inline void cb_Mov_i(Fl_Menu_*, void*);
  static void cb_Mov(Fl_Menu_*, void*);
  inline void cb_S_i(Fl_Light_Button*, void*);
  static void cb_S(Fl_Light_Button*, void*);
  inline void cb_s_i(Fl_Value_Slider*, void*);
  static void cb_s(Fl_Value_Slider*, void*);
  inline void cb_Radius_i(Fl_Value_Slider*, void*);
  static void cb_Radius(Fl_Value_Slider*, void*);
public:
  Fl_Group *traceGroup;
  static Fl_Menu_Item menu_Value[];
private:
  inline void cb_None2_i(Fl_Menu_*, void*);
  static void cb_None2(Fl_Menu_*, void*);
  inline void cb_RLI4_i(Fl_Menu_*, void*);
  static void cb_RLI4(Fl_Menu_*, void*);
  inline void cb_Max2_i(Fl_Menu_*, void*);
  static void cb_Max2(Fl_Menu_*, void*);
  inline void cb_Max3_i(Fl_Menu_*, void*);
  static void cb_Max3(Fl_Menu_*, void*);
  inline void cb_Max4_i(Fl_Menu_*, void*);
  static void cb_Max4(Fl_Menu_*, void*);
  inline void cb_Max5_i(Fl_Menu_*, void*);
  static void cb_Max5(Fl_Menu_*, void*);
  inline void cb_Max6_i(Fl_Menu_*, void*);
  static void cb_Max6(Fl_Menu_*, void*);
  inline void cb_Max7_i(Fl_Menu_*, void*);
  static void cb_Max7(Fl_Menu_*, void*);
  inline void cb_Max8_i(Fl_Menu_*, void*);
  static void cb_Max8(Fl_Menu_*, void*);
  inline void cb_Spike1_i(Fl_Menu_*, void*);
  static void cb_Spike1(Fl_Menu_*, void*);
  inline void cb_Amplitude_i(Fl_Menu_*, void*);
  static void cb_Amplitude(Fl_Menu_*, void*);
  inline void cb_SD_i(Fl_Menu_*, void*);
  static void cb_SD(Fl_Menu_*, void*);
  inline void cb_Amp1_i(Fl_Menu_*, void*);
  static void cb_Amp1(Fl_Menu_*, void*);
  inline void cb_Max9_i(Fl_Menu_*, void*);
  static void cb_Max9(Fl_Menu_*, void*);
  inline void cb_Trace_i(Fl_Light_Button*, void*);
  static void cb_Trace(Fl_Light_Button*, void*);
  inline void cb_Alpha_i(Fl_Light_Button*, void*);
  static void cb_Alpha(Fl_Light_Button*, void*);
  inline void cb_Vm_i(Fl_Light_Button*, void*);
  static void cb_Vm(Fl_Light_Button*, void*);
public:
  Fl_Light_Button *twShowPointLine;
private:
  inline void cb_twShowPointLine_i(Fl_Light_Button*, void*);
  static void cb_twShowPointLine(Fl_Light_Button*, void*);
  inline void cb_Time_i(Fl_Light_Button*, void*);
  static void cb_Time(Fl_Light_Button*, void*);
  inline void cb_Saved_i(Fl_Light_Button*, void*);
  static void cb_Saved(Fl_Light_Button*, void*);
  inline void cb_Slope_i(Fl_Light_Button*, void*);
  static void cb_Slope(Fl_Light_Button*, void*);
  static Fl_Menu_Item menu_Mode[];
  inline void cb_Optical_i(Fl_Menu_*, void*);
  static void cb_Optical(Fl_Menu_*, void*);
  inline void cb_Field_i(Fl_Menu_*, void*);
  static void cb_Field(Fl_Menu_*, void*);
  inline void cb_LTP_i(Fl_Menu_*, void*);
  static void cb_LTP(Fl_Menu_*, void*);
public:
  Fl_Choice *timeCourseType;
  static Fl_Menu_Item menu_timeCourseType[];
private:
  inline void cb_RLI5_i(Fl_Menu_*, void*);
  static void cb_RLI5(Fl_Menu_*, void*);
  inline void cb_Amplitude1_i(Fl_Menu_*, void*);
  static void cb_Amplitude1(Fl_Menu_*, void*);
  inline void cb_Maxa_i(Fl_Menu_*, void*);
  static void cb_Maxa(Fl_Menu_*, void*);
  inline void cb_Amp2_i(Fl_Menu_*, void*);
  static void cb_Amp2(Fl_Menu_*, void*);
  inline void cb_Maxb_i(Fl_Menu_*, void*);
  static void cb_Maxb(Fl_Menu_*, void*);
public:
  Fl_Light_Button *twShowFileLine;
private:
  inline void cb_twShowFileLine_i(Fl_Light_Button*, void*);
  static void cb_twShowFileLine(Fl_Light_Button*, void*);
  inline void cb_Reference_i(Fl_Light_Button*, void*);
  static void cb_Reference(Fl_Light_Button*, void*);
  inline void cb_Save8_i(Fl_Button*, void*);
  static void cb_Save8(Fl_Button*, void*);
public:
  Fl_Output *secondFileName;
  Fl_Output *savedTracesTrialNoTxt;
private:
  inline void cb_Normalize_i(Fl_Light_Button*, void*);
  static void cb_Normalize(Fl_Light_Button*, void*);
  inline void cb_Superimpose_i(Fl_Light_Button*, void*);
  static void cb_Superimpose(Fl_Light_Button*, void*);
  inline void cb_Normalize1_i(Fl_Light_Button*, void*);
  static void cb_Normalize1(Fl_Light_Button*, void*);
public:
  Fl_Slider *R1Slider;
private:
  inline void cb_R1Slider_i(Fl_Slider*, void*);
  static void cb_R1Slider(Fl_Slider*, void*);
public:
  Fl_Output *R1Txt;
  Fl_Slider *R2Slider;
private:
  inline void cb_R2Slider_i(Fl_Slider*, void*);
  static void cb_R2Slider(Fl_Slider*, void*);
public:
  Fl_Output *R2Txt;
  Fl_Slider *alphaTauSlider;
private:
  inline void cb_alphaTauSlider_i(Fl_Slider*, void*);
  static void cb_alphaTauSlider(Fl_Slider*, void*);
public:
  Fl_Output *alphaTauTxt;
  Fl_Slider *alphaAmplitudeSlider;
private:
  inline void cb_alphaAmplitudeSlider_i(Fl_Slider*, void*);
  static void cb_alphaAmplitudeSlider(Fl_Slider*, void*);
public:
  Fl_Output *alphaAmpTxt;
private:
  inline void cb_Fit_i(Fl_Button*, void*);
  static void cb_Fit(Fl_Button*, void*);
  inline void cb_Fit1_i(Fl_Button*, void*);
  static void cb_Fit1(Fl_Button*, void*);
public:
  Fl_Roller *alphaStartPointRoller;
private:
  inline void cb_alphaStartPointRoller_i(Fl_Roller*, void*);
  static void cb_alphaStartPointRoller(Fl_Roller*, void*);
public:
  Fl_Int_Input *alphaStartPointTxt;
private:
  inline void cb_alphaStartPointTxt_i(Fl_Int_Input*, void*);
  static void cb_alphaStartPointTxt(Fl_Int_Input*, void*);
public:
  Fl_Int_Input *alphaSpikeStart;
private:
  inline void cb_alphaSpikeStart_i(Fl_Int_Input*, void*);
  static void cb_alphaSpikeStart(Fl_Int_Input*, void*);
public:
  Fl_Int_Input *alphaSpikeEnd;
private:
  inline void cb_alphaSpikeEnd_i(Fl_Int_Input*, void*);
  static void cb_alphaSpikeEnd(Fl_Int_Input*, void*);
public:
  Fl_Int_Input *alphaWindow;
private:
  inline void cb_alphaWindow_i(Fl_Int_Input*, void*);
  static void cb_alphaWindow(Fl_Int_Input*, void*);
public:
  Fl_Int_Input *alphaAxonStart;
  Fl_Int_Input *alphaAxonEnd;
private:
  inline void cb_button_i(Fl_Check_Button*, void*);
  static void cb_button(Fl_Check_Button*, void*);
  inline void cb_button1_i(Fl_Check_Button*, void*);
  static void cb_button1(Fl_Check_Button*, void*);
  inline void cb_button2_i(Fl_Check_Button*, void*);
  static void cb_button2(Fl_Check_Button*, void*);
  inline void cb_button3_i(Fl_Check_Button*, void*);
  static void cb_button3(Fl_Check_Button*, void*);
  inline void cb_button4_i(Fl_Check_Button*, void*);
  static void cb_button4(Fl_Check_Button*, void*);
public:
  Fl_Value_Slider *fittingRange;
private:
  inline void cb_Set_i(Fl_Button*, void*);
  static void cb_Set(Fl_Button*, void*);
  inline void cb_Fit2_i(Fl_Button*, void*);
  static void cb_Fit2(Fl_Button*, void*);
  inline void cb_Cal_i(Fl_Light_Button*, void*);
  static void cb_Cal(Fl_Light_Button*, void*);
  inline void cb_Auto_i(Fl_Light_Button*, void*);
  static void cb_Auto(Fl_Light_Button*, void*);
public:
  Fl_Float_Input *spikeSlopeThreshold;
private:
  inline void cb_spikeSlopeThreshold_i(Fl_Float_Input*, void*);
  static void cb_spikeSlopeThreshold(Fl_Float_Input*, void*);
public:
  Fl_Value_Slider *fittingStepSize;
  Fl_Float_Input *spikeAmpThreshold;
private:
  inline void cb_spikeAmpThreshold_i(Fl_Float_Input*, void*);
  static void cb_spikeAmpThreshold(Fl_Float_Input*, void*);
  inline void cb_Init_i(Fl_Button*, void*);
  static void cb_Init(Fl_Button*, void*);
public:
  Fl_Int_Input *onsetLowerBoundTxt;
private:
  inline void cb_onsetLowerBoundTxt_i(Fl_Int_Input*, void*);
  static void cb_onsetLowerBoundTxt(Fl_Int_Input*, void*);
public:
  Fl_Int_Input *onsetHigherBoundTxt;
private:
  inline void cb_onsetHigherBoundTxt_i(Fl_Int_Input*, void*);
  static void cb_onsetHigherBoundTxt(Fl_Int_Input*, void*);
  inline void cb_Traces_i(Fl_Button*, void*);
  static void cb_Traces(Fl_Button*, void*);
  static Fl_Menu_Item menu_choice[];
  inline void cb_pt_i(Fl_Menu_*, void*);
  static void cb_pt(Fl_Menu_*, void*);
  inline void cb_ms_i(Fl_Menu_*, void*);
  static void cb_ms(Fl_Menu_*, void*);
  inline void cb_Save9_i(Fl_Button*, void*);
  static void cb_Save9(Fl_Button*, void*);
  inline void cb_Savea_i(Fl_Button*, void*);
  static void cb_Savea(Fl_Button*, void*);
public:
  Fl_Int_Input *twSaveTracesStartPt;
private:
  inline void cb_twSaveTracesStartPt_i(Fl_Int_Input*, void*);
  static void cb_twSaveTracesStartPt(Fl_Int_Input*, void*);
public:
  Fl_Int_Input *twSaveTracesEndPt;
private:
  inline void cb_twSaveTracesEndPt_i(Fl_Int_Input*, void*);
  static void cb_twSaveTracesEndPt(Fl_Int_Input*, void*);
  inline void cb_Saveb_i(Fl_Button*, void*);
  static void cb_Saveb(Fl_Button*, void*);
  inline void cb_Savec_i(Fl_Button*, void*);
  static void cb_Savec(Fl_Button*, void*);
  inline void cb_Savee_i(Fl_Button*, void*);
  static void cb_Savee(Fl_Button*, void*);
  inline void cb_Load4_i(Fl_Button*, void*);
  static void cb_Load4(Fl_Button*, void*);
public:
  Fl_Light_Button *awStartNewRegion;
private:
  inline void cb_awStartNewRegion_i(Fl_Light_Button*, void*);
  static void cb_awStartNewRegion(Fl_Light_Button*, void*);
public:
  Fl_Group *allRegionsDisplay;
  static Fl_Menu_Item menu_Current[];
private:
  inline void cb_New_i(Fl_Menu_*, void*);
  static void cb_New(Fl_Menu_*, void*);
public:
  TraceWindow *tw;
  Fl_Group *dapGroup;
  Fl_Float_Input *resetOnset;
private:
  inline void cb_resetOnset_i(Fl_Float_Input*, void*);
  static void cb_resetOnset(Fl_Float_Input*, void*);
public:
  Fl_Float_Input *resetDuration;
private:
  inline void cb_resetDuration_i(Fl_Float_Input*, void*);
  static void cb_resetDuration(Fl_Float_Input*, void*);
public:
  Fl_Float_Input *shutterOnset;
private:
  inline void cb_shutterOnset_i(Fl_Float_Input*, void*);
  static void cb_shutterOnset(Fl_Float_Input*, void*);
public:
  Fl_Float_Input *shutterDuration;
private:
  inline void cb_shutterDuration_i(Fl_Float_Input*, void*);
  static void cb_shutterDuration(Fl_Float_Input*, void*);
public:
  Fl_Int_Input *acquiOnset;
private:
  inline void cb_acquiOnset_i(Fl_Int_Input*, void*);
  static void cb_acquiOnset(Fl_Int_Input*, void*);
public:
  Fl_Output *acquiDuration;
  Fl_Float_Input *sti1Onset;
private:
  inline void cb_sti1Onset_i(Fl_Float_Input*, void*);
  static void cb_sti1Onset(Fl_Float_Input*, void*);
public:
  Fl_Float_Input *sti1Duration;
private:
  inline void cb_sti1Duration_i(Fl_Float_Input*, void*);
  static void cb_sti1Duration(Fl_Float_Input*, void*);
public:
  Fl_Float_Input *sti2Onset;
private:
  inline void cb_sti2Onset_i(Fl_Float_Input*, void*);
  static void cb_sti2Onset(Fl_Float_Input*, void*);
public:
  Fl_Float_Input *sti2Duration;
private:
  inline void cb_sti2Duration_i(Fl_Float_Input*, void*);
  static void cb_sti2Duration(Fl_Float_Input*, void*);
public:
  DapWindow *dapWindow;
  Fl_Int_Input *numPts;
private:
  inline void cb_numPts_i(Fl_Int_Input*, void*);
  static void cb_numPts(Fl_Int_Input*, void*);
public:
  Fl_Choice *CameraProgram;
private:
  inline void cb_CameraProgram_i(Fl_Choice*, void*);
  static void cb_CameraProgram(Fl_Choice*, void*);
public:
  Fl_Input *numBursts1;
private:
  inline void cb_numBursts1_i(Fl_Input*, void*);
  static void cb_numBursts1(Fl_Input*, void*);
public:
  Fl_Input *intBursts1;
private:
  inline void cb_intBursts1_i(Fl_Input*, void*);
  static void cb_intBursts1(Fl_Input*, void*);
public:
  Fl_Input *numPulses1;
private:
  inline void cb_numPulses1_i(Fl_Input*, void*);
  static void cb_numPulses1(Fl_Input*, void*);
public:
  Fl_Input *intPulses1;
private:
  inline void cb_intPulses1_i(Fl_Input*, void*);
  static void cb_intPulses1(Fl_Input*, void*);
public:
  Fl_Input *numBursts2;
private:
  inline void cb_numBursts2_i(Fl_Input*, void*);
  static void cb_numBursts2(Fl_Input*, void*);
public:
  Fl_Input *intBursts2;
private:
  inline void cb_intBursts2_i(Fl_Input*, void*);
  static void cb_intBursts2(Fl_Input*, void*);
public:
  Fl_Input *numPulses2;
private:
  inline void cb_numPulses2_i(Fl_Input*, void*);
  static void cb_numPulses2(Fl_Input*, void*);
public:
  Fl_Input *intPulses2;
private:
  inline void cb_intPulses2_i(Fl_Input*, void*);
  static void cb_intPulses2(Fl_Input*, void*);
public:
  Fl_Int_Input *intRecords;
private:
  inline void cb_intRecords_i(Fl_Int_Input*, void*);
  static void cb_intRecords(Fl_Int_Input*, void*);
public:
  Fl_Int_Input *numRecords;
private:
  inline void cb_numRecords_i(Fl_Int_Input*, void*);
  static void cb_numRecords(Fl_Int_Input*, void*);
public:
  Fl_Int_Input *numTrials;
private:
  inline void cb_numTrials_i(Fl_Int_Input*, void*);
  static void cb_numTrials(Fl_Int_Input*, void*);
public:
  Fl_Int_Input *intTrials;
private:
  inline void cb_intTrials_i(Fl_Int_Input*, void*);
  static void cb_intTrials(Fl_Int_Input*, void*);
  inline void cb_e_i(Fl_Button*, void*);
  static void cb_e(Fl_Button*, void*);
  inline void cb_f_i(Fl_Button*, void*);
  static void cb_f(Fl_Button*, void*);
public:
  Fl_Output *acquiGain;
  Fl_Group *mapGroup;
  static Fl_Menu_Item menu_Mode1[];
private:
  inline void cb_Map_i(Fl_Menu_*, void*);
  static void cb_Map(Fl_Menu_*, void*);
  inline void cb_Movie_i(Fl_Menu_*, void*);
  static void cb_Movie(Fl_Menu_*, void*);
public:
  Fl_Choice *mapFeatureType;
  static Fl_Menu_Item menu_mapFeatureType[];
private:
  inline void cb_RLI6_i(Fl_Menu_*, void*);
  static void cb_RLI6(Fl_Menu_*, void*);
  inline void cb_Maxc_i(Fl_Menu_*, void*);
  static void cb_Maxc(Fl_Menu_*, void*);
  inline void cb_Spike2_i(Fl_Menu_*, void*);
  static void cb_Spike2(Fl_Menu_*, void*);
  inline void cb_Amp3_i(Fl_Menu_*, void*);
  static void cb_Amp3(Fl_Menu_*, void*);
  inline void cb_Maxd_i(Fl_Menu_*, void*);
  static void cb_Maxd(Fl_Menu_*, void*);
  static Fl_Menu_Item menu_Movie[];
  inline void cb_Amp4_i(Fl_Menu_*, void*);
  static void cb_Amp4(Fl_Menu_*, void*);
  inline void cb_Amp5_i(Fl_Menu_*, void*);
  static void cb_Amp5(Fl_Menu_*, void*);
  static Fl_Menu_Item menu_Color1[];
  inline void cb_Color2_i(Fl_Menu_*, void*);
  static void cb_Color2(Fl_Menu_*, void*);
  inline void cb_Color3_i(Fl_Menu_*, void*);
  static void cb_Color3(Fl_Menu_*, void*);
  inline void cb_Blue1_i(Fl_Menu_*, void*);
  static void cb_Blue1(Fl_Menu_*, void*);
  inline void cb_Gray1_i(Fl_Menu_*, void*);
  static void cb_Gray1(Fl_Menu_*, void*);
  static Fl_Menu_Item menu_Control1[];
  inline void cb_Bounds1_i(Fl_Menu_*, void*);
  static void cb_Bounds1(Fl_Menu_*, void*);
  inline void cb_Center1_i(Fl_Menu_*, void*);
  static void cb_Center1(Fl_Menu_*, void*);
  inline void cb_10_i(Fl_Roller*, void*);
  static void cb_10(Fl_Roller*, void*);
public:
  Fl_Output *cwColorUpperBound;
  Fl_Output *cwColorLowerBound;
private:
  inline void cb_11_i(Fl_Roller*, void*);
  static void cb_11(Fl_Roller*, void*);
  inline void cb_12_i(Fl_Roller*, void*);
  static void cb_12(Fl_Roller*, void*);
public:
  Fl_Output *cwColorAmp;
  Fl_Output *cwColorCenter;
private:
  inline void cb_13_i(Fl_Roller*, void*);
  static void cb_13(Fl_Roller*, void*);
  inline void cb_Contour_i(Fl_Light_Button*, void*);
  static void cb_Contour(Fl_Light_Button*, void*);
  inline void cb_14_i(Fl_Button*, void*);
  static void cb_14(Fl_Button*, void*);
  inline void cb_15_i(Fl_Button*, void*);
  static void cb_15(Fl_Button*, void*);
  inline void cb_16_i(Fl_Button*, void*);
  static void cb_16(Fl_Button*, void*);
  inline void cb_Repeat_i(Fl_Light_Button*, void*);
  static void cb_Repeat(Fl_Light_Button*, void*);
public:
  Fl_Roller *cwCurrentPtRoller;
private:
  inline void cb_cwCurrentPtRoller_i(Fl_Roller*, void*);
  static void cb_cwCurrentPtRoller(Fl_Roller*, void*);
public:
  Fl_Output *cwCurrentPtText;
private:
  inline void cb_Speed_i(Fl_Value_Slider*, void*);
  static void cb_Speed(Fl_Value_Slider*, void*);
public:
  Fl_Int_Input *cwStartPt;
private:
  inline void cb_cwStartPt_i(Fl_Int_Input*, void*);
  static void cb_cwStartPt(Fl_Int_Input*, void*);
public:
  Fl_Input *cwEndPt;
private:
  inline void cb_cwEndPt_i(Fl_Input*, void*);
  static void cb_cwEndPt(Fl_Input*, void*);
  inline void cb_Make1_i(Fl_Light_Button*, void*);
  static void cb_Make1(Fl_Light_Button*, void*);
  inline void cb_Black_i(Fl_Light_Button*, void*);
  static void cb_Black(Fl_Light_Button*, void*);
public:
  ColorWindow *cw;
  ArrayWindow *aw;
  void show();
  void init(); 
  void setValue(); 
  void killUI(); 
};
#endif
