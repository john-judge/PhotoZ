# data file for the Fltk User Interface Designer (fluid)
version 1.0100 
header_name {UserInterface.h} 
code_name {UserInterface.cpp} 
gridx 5 
gridy 5 
snap 3
class UserInterface {open
} {
  Function {UserInterface()} {open
  } {
    Fl_Window mainWindow {
      label {PhotoZ (c) 2006 PYC} open
      xywh {4 30 1280 968} type Double resizable
      code0 {\#include "MainController.h"}
      code1 {extern MainController *mc;}
      code2 {\#include "RecControl.h"} visible
    } {
      Fl_Box {} {
        label {PhotoZ v.5.25}
        xywh {5 5 140 25} box UP_BOX color 175 selection_color 4 labeltype EMBOSSED_LABEL labelfont 10 labelsize 20
      }
      Fl_Menu_Bar {} {
        label Menu
        xywh {150 5 135 25} box BORDER_BOX color 23 labelfont 1
      } {
        submenu {} {
          label File
          xywh {10 10 100 20} labelfont 1
        } {
          menuitem {} {
            label Open
            callback {mc->openDataFile();}
            xywh {10 10 100 20}
          }
          menuitem {} {
            label {Create Folder}
            callback {mc->createDir();}
            xywh {10 10 100 20} divider
          }
          menuitem {} {
            label {Exit (Esc)}
            callback {mc->quit();}
            xywh {5 5 100 20}
          }
        }
        submenu {} {
          label Preference
          xywh {10 10 100 20} labelfont 1
        } {
          menuitem {} {
            label {Save Preference}
            callback {mc->savePre();}
            xywh {10 10 100 20}
          }
          menuitem {} {
            label {Load Preference}
            callback {mc->loadPre();}
            xywh {10 10 100 20}
          }
        }
      }
      Fl_Button {} {
        label {Save Left Window}
        callback {mc->exportAw();}
        xywh {360 5 135 25} color 23 labelcolor 4
      }
      Fl_Button {} {
        label {Save Right Window}
        callback {mc->exportTw();}
        xywh {500 5 135 25} color 23 labelcolor 4
      }
      Fl_Group {} {
        label {Array Window}
        xywh {0 35 638 620} labeltype NO_LABEL
      } {
        Fl_Box aw {
          xywh {0 35 638 620} box BORDER_FRAME color 0 labeltype NO_LABEL labelfont 1
          code0 {\#include "ArrayWindow.h"}
          class ArrayWindow
        }
      }
      Fl_Tabs {} {
        label {Acquisition/Analysis Panel}
        xywh {5 660 250 150} labeltype NO_LABEL
      } {
        Fl_Group {} {
          label Acquisition
          xywh {5 685 250 125} color 214
        } {
          Fl_Button {} {
            label {Take RLI}
            callback {mc->takeRli();}
            xywh {175 695 75 25} labelfont 1 labelcolor 112
          }
          Fl_Button {} {
            label Record
            callback {mc->record();}
            xywh {175 730 75 25} labelfont 1 labelcolor 80
          }
          Fl_Button saveData2File {
            label {Save @circle}
            callback {mc->saveData2File();}
            xywh {175 765 75 25} labelfont 1 labelcolor 60
          }
          Fl_Check_Button scheduleB {
            label Schedule
            callback {mc->setScheduleFlag(o->value());}
            xywh {5 690 95 30} down_box DOWN_BOX
          }
          Fl_Button {} {
            label {Stop!}
            callback {mc->stop();}
            xywh {100 695 65 25} color 95 selection_color 1 labeltype ENGRAVED_LABEL labelfont 9 labelsize 16
          }
          Fl_Check_Button {} {
            label RLI
            callback {mc->setScheduleRliFlag(o->value());}
            xywh {5 715 95 30} down_box DOWN_BOX
          }
          Fl_Button {} {
            label {Save Processed Data}
            callback {mc->saveProcessedData();} selected
            xywh {10 765 160 25} labelfont 1
          }
        }
        Fl_Group {} {
          label Analysis open
          xywh {5 685 250 125} color 199 hide
        } {
          Fl_Button {} {
            label {Go through Data}
            callback {mc->timeCourseMeasurement();}
            xywh {10 695 130 25} labelfont 1
          }
          Fl_Group {} {
            label {Selected Diodes}
            xywh {10 730 240 35} box DOWN_FRAME align 20
          } {
            Fl_Button {} {
              label Save
              callback {mc->saveSelected();}
              xywh {125 735 55 25}
            }
            Fl_Button {} {
              label Load
              callback {mc->loadSelected();}
              xywh {190 735 55 25}
            }
          }
          Fl_Button {} {
            label {Procedure 1}
            callback {mc->doAll();}
            xywh {10 775 100 20} deactivate
          }
          Fl_Button {} {
            label {Procedure 2}
            callback {mc->saveProfileValues();}
            xywh {115 775 100 20} deactivate
          }
        }
      }
      Fl_Group {} {
        label {File Control Panel}
        xywh {5 835 250 135} box DOWN_BOX color 167 labeltype NO_LABEL
      } {
        Fl_Group {} {
          label File
          xywh {10 840 240 125} labeltype NO_LABEL
        } {
          Fl_Output fileName {
            label {File Name:}
            xywh {95 840 155 25}
          }
          Fl_Input sliceNo {
            label {Slice No:}
            callback {mc->setSliceNo(o->value());}
            xywh {95 865 50 25} type Int box BORDER_BOX when 8
          }
          Fl_Input locationNo {
            label {Location No:}
            callback {mc->setLocationNo(o->value());}
            xywh {95 890 50 25} type Int box BORDER_BOX when 8
          }
          Fl_Input recordNo {
            label {Record No:}
            callback {mc->setRecordNo(o->value());}
            xywh {95 915 50 25} type Int box BORDER_BOX when 8
          }
          Fl_Button sliceNoDecrease {
            label {@<}
            callback {mc->decreaseNo(SLICE);}
            xywh {145 865 30 25}
          }
          Fl_Button locationNoDecrease {
            label {@<}
            callback {mc->decreaseNo(LOCATION);}
            xywh {145 890 30 25}
          }
          Fl_Button recordNoDecrease {
            label {@<}
            callback {mc->decreaseNo(RECORD);}
            xywh {145 915 30 25}
          }
          Fl_Button sliceNoIncrease {
            label {@>}
            callback {mc->increaseNo(SLICE);}
            xywh {175 865 30 25}
          }
          Fl_Button locationNoIncrease {
            label {@>}
            callback {mc->increaseNo(LOCATION);}
            xywh {175 890 30 25}
          }
          Fl_Button recordNoIncrease {
            label {@>}
            callback {mc->increaseNo(RECORD);}
            xywh {175 915 30 25}
          }
          Fl_Output sliceNoMax {
            xywh {205 865 45 25} box BORDER_BOX labeltype NO_LABEL
          }
          Fl_Output locationNoMax {
            xywh {205 890 45 25} box BORDER_BOX labeltype NO_LABEL
          }
          Fl_Output recordNoMax {
            xywh {205 915 45 25} box BORDER_BOX labeltype NO_LABEL
          }
          Fl_Group trialNoGroup {open
            xywh {10 940 240 25}
          } {
            Fl_Button trialNoDecrease {
              label {@<}
              callback {mc->decreaseNo(TRIAL);}
              xywh {145 940 30 25}
            }
            Fl_Button trialNoIncrease {
              label {@>}
              callback {mc->increaseNo(TRIAL);}
              xywh {175 940 30 25}
            }
            Fl_Output trialNoMax {
              xywh {205 940 45 25} box BORDER_BOX labeltype NO_LABEL
            }
            Fl_Input trialNo {
              label {Trial No:}
              callback {mc->setTrialNo(o->value());}
              xywh {95 940 50 25} type Int box BORDER_BOX when 8
            }
          }
        }
      }
      Fl_Tabs {} {
        label {Main Control Panel}
        xywh {260 660 375 310} labeltype NO_LABEL
      } {
        Fl_Group {} {
          label Array
          xywh {260 685 375 285} color 23
        } {
          Fl_Group {} {
            label {Display Selections}
            xywh {265 690 100 95} box DOWN_BOX color 25 labeltype NO_LABEL
          } {
            Fl_Light_Button awShowTrace {
              label Trace
              callback {mc->setAwShowTrace(o->value());}
              xywh {270 695 90 25} value 1
            }
            Fl_Light_Button awShowRliValue {
              label {RLI Value}
              callback {mc->setAwShowRliValue(o->value());}
              xywh {270 725 90 25}
            }
            Fl_Light_Button awShowDiodeNum {
              label {Diode No}
              callback {mc->setAwShowDiodeNum(o->value());}
              xywh {270 755 90 25}
            }
          }
          Fl_Choice {} {
            label {Background:}
            xywh {485 690 145 25} down_box BORDER_BOX selection_color 4
          } {
            menuitem {} {
              label None
              callback {mc->setAwBackground(BG_None);}
              xywh {0 0 100 20} divider
            }
            menuitem {} {
              label Image
              callback {mc->setAwBackground(BG_Image);}
              xywh {20 20 100 20} divider
            }
            menuitem {} {
              label RLI
              callback {mc->setAwBackground(BG_Rli);}
              xywh {10 10 100 20}
            }
            menuitem {} {
              label {Max Amp}
              callback {mc->setAwBackground(BG_Max_Amplitude);}
              xywh {30 30 100 20}
            }
            menuitem {} {
              label {Spike Amp}
              callback {mc->setAwBackground(BG_Spike_Amp);}
              xywh {40 40 100 20} divider
            }
            menuitem {} {
              label {% Amp Latency}
              callback {mc->setAwBackground(BG_Half_Amp_Latency);}
              xywh {60 60 100 20}
            }
            menuitem {} {
              label {Max Amp Latency}
              callback {mc->setAwBackground(BG_Max_Amp_Latency);}
              xywh {40 40 100 20}
            }
            menuitem {} {
              label {EPSP Latency}
              callback {mc->setAwBackground(BG_EPSP_Latency);}
              xywh {50 50 100 20}
            }
          }
          Fl_Group {} {
            label Scale
            xywh {395 745 235 100} labeltype NO_LABEL
          } {
            Fl_Roller awYScale {
              callback {mc->setAwYScale(o->value());}
              xywh {545 745 85 25} type Horizontal align 4 minimum 1 maximum 1000 step 1 value 100
            }
            Fl_Output awYScaleTxt {
              label {Y Scale:}
              xywh {490 745 50 25}
            }
            Fl_Roller awFpYScale {
              callback {mc->setAwFpYScale(o->value());}
              xywh {545 770 85 25} type Horizontal align 4 minimum 1 maximum 1000 step 1 value 100
            }
            Fl_Output awFpYScaleTxt {
              label {F.P. Y Scale:}
              xywh {490 770 50 25}
            }
            Fl_Roller awXScale {
              callback {mc->setAwXScale(o->value());}
              xywh {545 795 85 25} type Horizontal align 4 minimum 0.1 maximum 100 step 0.01 value 1
            }
            Fl_Output awXScaleTxt {
              label {X Scale:}
              xywh {490 795 50 25}
            }
            Fl_Roller awXShift {
              callback {mc->setAwXShift(o->value());}
              xywh {545 820 85 25} type Horizontal align 4 minimum -100 maximum 100 step 0.1
            }
            Fl_Output awXShiftTxt {
              label {X Shift:}
              xywh {490 820 50 25}
            }
          }
          Fl_Button {} {
            label {Load Image}
            callback {mc->loadAwImage();}
            xywh {270 790 90 25} labelfont 1
          }
          Fl_Group {} {
            label Comparison
            xywh {265 845 365 120} box DOWN_BOX color 29 labeltype NO_LABEL
          } {
            Fl_Light_Button {} {
              label Compare
              callback {mc->setCompareFlag(o->value());}
              xywh {395 850 90 25} labelfont 1
            }
            Fl_Input record1No {
              label {Ref. Record \#}
              callback {mc->setRecordXNo(1,o->value());}
              xywh {590 850 35 25} type Int when 8
            }
            Fl_Input record2No {
              label {Final Record \#}
              callback {mc->setRecordXNo(2,o->value());}
              xywh {590 880 35 25} type Int when 8
            }
            Fl_Light_Button {} {
              label Nor2ArrayMax
              callback {mc->setNormalizationFlag(o->value());}
              xywh {270 850 115 25} value 1
            }
            Fl_Light_Button {} {
              label {Average Records}
              callback {mc->setAverageFlag(o->value());}
              xywh {490 910 135 25}
            }
            Fl_Value_Slider {} {
              callback {mc->setNumAveRec(o->value());}
              xywh {490 935 135 25} type {Horz Knob} align 4 when 4 minimum 2 maximum 10 step 1 value 5
            }
          }
          Fl_Button {} {
            label {Save Background Data}
            callback {aw->saveBGData();}
            xywh {400 720 230 20} color 231
          }
          Fl_Choice {} {
            label {Increase/Decrease}
            xywh {395 880 90 25} down_box BORDER_BOX labeltype NO_LABEL
          } {
            menuitem {} {
              label Increase
              callback {mc->setIncreaseFlag(1);}
              xywh {0 0 100 20} value 1
            }
            menuitem {} {
              label Decrease
              callback {mc->setIncreaseFlag(0);}
              xywh {0 0 100 20}
            }
          }
          Fl_Choice {} {
            label {Increase/Decrease}
            xywh {395 910 90 25} down_box BORDER_BOX labeltype NO_LABEL
          } {
            menuitem {} {
              label Actual
              callback {mc->setAbsFlag(1);}
              xywh {10 10 100 20} value 1
            }
            menuitem {} {
              label Percent
              callback {mc->setAbsFlag(0);}
              xywh {10 10 100 20}
            }
          }
        }
        Fl_Group {} {
          label DSP
          xywh {260 685 375 285} color 23 hide
        } {
          Fl_Tabs {} {
            label {DSP Tabs} open
            xywh {265 690 365 275} color 23 labeltype NO_LABEL
          } {
            Fl_Group {} {
              label Main
              xywh {265 715 365 250} color 20
            } {
              Fl_Light_Button {} {
                label {RLI Division}
                callback {mc->setRliDiv(o->value());}
                xywh {270 720 140 25} labelfont 1
              }
              Fl_Light_Button {} {
                label {Data Inverse}
                callback {mc->setDataInverseFlag(o->value());}
                xywh {270 750 140 25} shortcut 0x4006d labelfont 1
              }
              Fl_Light_Button {} {
                label {F.P. Data Inverse}
                callback {mc->setEcDataInverseFlag(o->value());}
                xywh {270 780 140 25} shortcut 0x4006d labelfont 1
              }
              Fl_Group {} {
                label {Measure Window}
                xywh {470 725 155 75} box DOWN_BOX color 223 labelfont 1 align 17
              } {
                Fl_Input startWindow {
                  label {Start (Pt):}
                  callback {mc->setStartWindow(o->value());}
                  xywh {555 745 65 25} type Int when 8
                }
                Fl_Input widthWindow {
                  label {Width (Pt):}
                  callback {mc->setWidthWindow(o->value());}
                  xywh {555 770 65 25} type Int when 8
                }
              }
              Fl_Group {} {
                label {Latency Measure Settings}
                xywh {270 815 355 115} box DOWN_BOX color 223 labelfont 1 align 17
              } {
                Fl_Input latencyStartTxt {
                  label {Start (ms)}
                  callback {mc->setLatencyStart(o->value());}
                  xywh {365 840 65 25} type Float when 8
                }
                Fl_Roller latencyStartRoller {
                  callback {mc->setLatencyStart(o->value());}
                  xywh {430 840 65 25} type Horizontal maximum 60000 step 0.1 value 100
                }
                Fl_Value_Slider {} {
                  label {Width (ms)}
                  callback {mc->setLatencyWindow(o->value());}
                  xywh {365 870 255 25} type {Horz Knob} selection_color 1 align 4 minimum 0.5 maximum 100 step 0.5 value 5
                }
                Fl_Value_Slider {} {
                  label {% of Amp}
                  callback {mc->setPerAmp(o->value()/100.0);}
                  xywh {365 900 255 25} type {Horz Knob} selection_color 1 align 4 when 4 minimum 5 maximum 95 step 5 value 50
                }
              }
            }
            Fl_Group {} {
              label Correction open
              xywh {265 715 365 250} color 20 hide
            } {
              Fl_Light_Button {} {
                label Correction
                callback {mc->setCorrectionFlag(o->value());}
                xywh {270 720 100 25} shortcut 0x4006d labelfont 1
              }
              Fl_Button {} {
                label {RLI -> Map}
                callback {mc->rli2Map();}
                xywh {375 720 100 25}
              }
              Fl_Button {} {
                label {Save Map}
                callback {mc->saveMapValues();}
                xywh {375 750 100 25} labelsize 15
              }
              Fl_Button {} {
                label {Load Map}
                callback {mc->loadMapValues();}
                xywh {480 750 100 25} labelsize 15
              }
              Fl_Button {} {
                label {Make Correction}
                callback {mc->makeCorrection();}
                xywh {480 720 145 25} labelfont 1
              }
              Fl_Group {} {
                label Selection
                xywh {280 830 260 125} box DOWN_BOX color 223 labelfont 1
              } {
                Fl_Button {} {
                  label {<}
                  callback {mc->doSelection(-1);}
                  xywh {395 835 25 25}
                }
                Fl_Input thresholdTxt {
                  xywh {460 835 75 25} type Float when 0
                }
                Fl_Button {} {
                  label {>}
                  callback {mc->doSelection(1);}
                  xywh {425 835 25 25}
                }
                Fl_Button {} {
                  label {<}
                  callback {mc->doSelection(-2);}
                  xywh {395 865 25 25}
                }
                Fl_Button {} {
                  label {>}
                  callback {mc->doSelection(2);}
                  xywh {425 865 25 25}
                }
                Fl_Button {} {
                  label {<}
                  callback {mc->doSelection(-3);}
                  xywh {395 895 25 25}
                }
                Fl_Button {} {
                  label {>}
                  callback {mc->doSelection(3);}
                  xywh {425 895 25 25}
                }
                Fl_Button {} {
                  label {<}
                  callback {mc->doSelection(-4);}
                  xywh {395 925 25 25}
                }
                Fl_Button {} {
                  label {>}
                  callback {mc->doSelection(4);}
                  xywh {425 925 25 25}
                }
                Fl_Box {} {
                  label {Max Amp}
                  xywh {285 835 105 25} align 24
                }
                Fl_Box {} {
                  label {% Amp Latency}
                  xywh {285 865 105 25} align 24
                }
                Fl_Box {} {
                  label SD
                  xywh {285 895 105 25} align 24
                }
                Fl_Box {} {
                  label RLI
                  xywh {285 925 105 25} align 24
                }
              }
              Fl_Button {} {
                label Ignore
                callback {mc->ignoreSelectedDiodes();}
                xywh {545 830 70 25} labelfont 1
              }
            }
            Fl_Group {} {
              label Filter
              xywh {265 715 365 250} color 20 hide
            } {
              Fl_Light_Button {} {
                label {T-Filter}
                callback {mc->setTemporalFilterFlag(o->value());}
                xywh {270 720 85 25} shortcut 0x4006d labelfont 1
              }
              Fl_Choice {} {
                label {Filter Type}
                xywh {435 720 95 25} down_box BORDER_BOX
              } {
                menuitem {} {
                  label Binomial
                  callback {mc->setTemporalFilterType('G');}
                  xywh {0 0 100 20}
                }
                menuitem {} {
                  label {Mov Ave}
                  callback {mc->setTemporalFilterType('M');}
                  xywh {0 0 100 20}
                }
              }
              Fl_Light_Button {} {
                label {S-Filter}
                callback {mc->setSpatialFilterFlag(o->value());}
                xywh {270 815 85 25} shortcut 0x4006d labelfont 1
              }
              Fl_Value_Slider {} {
                label s
                callback {mc->setSpatialFilterSigma(o->value());}
                xywh {380 815 150 25} type {Horz Knob} selection_color 1 labelfont 12 align 4 when 4 minimum 0.1 step 0.1 value 0.5
              }
              Fl_Value_Slider {} {
                label {Radius (Pt)}
                callback {mc->setTemporalFilterWidth(o->value());}
                xywh {340 750 280 25} type {Horz Knob} selection_color 1 align 4 when 4 minimum 1 maximum 50 step 1 value 1
              }
            }
          }
        }
        Fl_Group {} {
          label Baseline
          xywh {260 685 375 285} color 23 hide
        } {
          Fl_Choice BLCType {
            label {Baseline Correction Type:} open
            xywh {455 700 175 25} down_box BORDER_BOX labelfont 1
          } {
            menuitem {} {
              label None
              callback {mc->setBLCType('N');}
              xywh {15 15 100 20} divider
            }
            menuitem {} {
              label {Start Point}
              callback {mc->setBLCType('S');}
              xywh {15 15 100 20}
            }
            menuitem {} {
              label {Start and End Points}
              callback {mc->setBLCType('E');}
              xywh {25 25 100 20}
            }
            menuitem {} {
              label Polynomial
              callback {mc->setBLCType('P');}
              xywh {35 35 100 20} divider
            }
            menuitem {} {
              label Arbitrary
              callback {mc->setBLCType('A');}
              xywh {25 25 100 20}
            }
          }
          Fl_Group {} {
            label {Polynomial Skip Window}
            xywh {265 730 200 80} box DOWN_FRAME labelfont 1 align 21
          } {
            Fl_Input polynomialStartPtTxt {
              label {Start Point:}
              callback {mc->setPolynomialStartPt(o->value());}
              xywh {395 750 65 25} type Int when 8
            }
            Fl_Input polynomialNumPts {
              label {Number of  Points:}
              callback {mc->setPolynomialNumPts(o->value());}
              xywh {395 780 65 25} type Int when 8
            }
          }
          Fl_Group {} {
            label {Arbitrary Mode}
            xywh {265 815 260 50} box DOWN_FRAME labelfont 1 align 21
          } {
            Fl_Output clampPtTxt {
              label {Clamp at Pt:}
              xywh {350 835 65 25}
            }
            Fl_Roller {} {
              callback {mc->setClampPt(int(o->value()));}
              xywh {420 835 100 25} type Horizontal align 4 when 4 maximum 4000 step 1 value 45
            }
          }
        }
        Fl_Group {} {
          label Image
          xywh {260 685 375 285} color 23 hide
        } {
          Fl_Group {} {open
            xywh {265 820 205 65} box DOWN_FRAME
          } {
            Fl_Choice {} {
              label {Output Image Format:} open
              xywh {400 825 65 25} down_box BORDER_BOX labelfont 8
            } {
              menuitem {} {
                label PNG
                callback {mc->setImageType('P');}
                xywh {25 25 100 20}
              }
              menuitem {} {
                label BMP
                callback {mc->setImageType('B');}
                xywh {5 5 100 20}
              }
              menuitem {} {
                label JPEG
                callback {mc->setImageType('J');}
                xywh {15 15 100 20}
              }
              menuitem {} {
                label TIFF
                callback {mc->setImageType('T');}
                xywh {35 35 100 20}
              }
            }
            Fl_Choice inputImageFormat {
              label {Input Image Format:}
              xywh {400 855 65 25} down_box BORDER_BOX labelfont 8
            } {
              menuitem {} {
                label BMP
                callback {static const char type[]="BMP";
aw->setImageFileFormat(type);}
                xywh {60 60 100 20}
              }
              menuitem {} {
                label TIF
                callback {static const char type[]="TIF";
aw->setImageFileFormat(type);}
                xywh {80 80 100 20}
              }
            }
          }
          Fl_Group {} {open
            xywh {265 695 365 115} box DOWN_FRAME
          } {
            Fl_Output awImageX0Txt {
              label {X Position:}
              xywh {340 700 45 25}
            }
            Fl_Roller awImageX0 {
              callback {mc->setAwImageX0(int(o->value()));}
              xywh {390 700 100 25} type Horizontal align 4 minimum -1000 maximum 1000 step 1
            }
            Fl_Output awImageY0Txt {
              label {Y Position:}
              xywh {340 730 45 25}
            }
            Fl_Roller awImageY0 {
              callback {mc->setAwImageY0(int(o->value()));}
              xywh {390 730 100 25} type Horizontal align 4 minimum -1000 maximum 1000 step 1
            }
            Fl_Value_Slider awImageXSize {
              label Width
              callback {mc->setAwImageXSize(int(o->value()));}
              xywh {310 760 315 20} type {Horz Knob} selection_color 1 labelsize 12 align 4 when 4 minimum 540 maximum 740 step 1 value 640
            }
            Fl_Value_Slider awImageYSize {
              label Height
              callback {mc->setAwImageYSize(int(o->value()));}
              xywh {310 785 315 20} type {Horz Knob} selection_color 1 labelsize 12 align 4 when 4 minimum 380 maximum 740 step 1 value 640
            }
          }
          Fl_Light_Button {} {
            label {White Background}
            callback {mc->setBgColor(o->value());}
            xywh {475 825 145 25} align 16
          }
        }
        Fl_Group {} {
          label Color
          xywh {260 685 375 285} color 23 hide
        } {
          Fl_Choice {} {
            label {Color Scale:}
            xywh {365 690 125 25} down_box BORDER_BOX
          } {
            menuitem {} {
              label {Color Scale 1}
              callback {mc->setColorMode('1');}
              xywh {35 35 100 20}
            }
            menuitem {} {
              label {Color Scale 2}
              callback {mc->setColorMode('2');}
              xywh {45 45 100 20}
            }
            menuitem {} {
              label {Blue to Red}
              callback {mc->setColorMode('B');}
              xywh {55 55 100 20}
            }
            menuitem {} {
              label {Gray Scale}
              callback {mc->setColorMode('G');}
              xywh {65 65 100 20}
            }
          }
          Fl_Choice {} {
            label {Control Mode:} open
            xywh {365 715 125 25} down_box BORDER_BOX
          } {
            menuitem {} {
              label Bounds
              callback {mc->setColorControlMode('B');}
              xywh {50 50 100 20}
            }
            menuitem {} {
              label {Center - Amp}
              callback {mc->setColorControlMode('C');}
              xywh {60 60 100 20}
            }
          }
          Fl_Tabs {} {
            label {Color Scale Bar}
            xywh {365 745 200 80} color 23 labeltype NO_LABEL
          } {
            Fl_Group {} {
              label Bounds
              xywh {365 765 200 60} color 29 when 0
            } {
              Fl_Roller {} {
                callback {mc->setColorUpperBound(o->value());}
                xywh {485 770 75 25} type Horizontal minimum -100 maximum 100 step 0.01 value 1
              }
              Fl_Output colorUpperBound {
                label {Upper:}
                xywh {420 770 60 25}
              }
              Fl_Output colorLowerBound {
                label {Lower:}
                xywh {420 795 60 25}
              }
              Fl_Roller {} {
                callback {mc->setColorLowerBound(o->value());}
                xywh {485 795 75 25} type Horizontal minimum -100 maximum 100 step 0.01
              }
            }
            Fl_Group {} {
              label Center
              xywh {365 765 200 60} color 29 when 0 hide
            } {
              Fl_Roller {} {
                callback {mc->setColorAmp(o->value());}
                xywh {485 770 75 25} type Horizontal minimum -100 maximum 100 step 0.01 value 1
              }
              Fl_Output colorAmp {
                label {Amp:}
                xywh {420 770 60 25}
              }
              Fl_Output colorCenter {
                label {Center:}
                xywh {420 795 60 25}
              }
              Fl_Roller {} {
                callback {mc->setColorCenter(o->value());}
                xywh {485 795 75 25} type Horizontal minimum -100 maximum 100 step 0.01
              }
            }
          }
        }
      }
      Fl_Tabs {} {
        label {Versatile Panel} open
        xywh {640 5 643 965} labeltype NO_LABEL
      } {
        Fl_Group traceGroup {
          label Trace
          xywh {640 30 643 940} color 26
        } {
          Fl_Group {} {
            label Left
            xywh {645 660 215 305} labeltype NO_LABEL
          } {
            Fl_Choice {} {
              label {Value:} open
              xywh {690 660 165 25} down_box BORDER_BOX
            } {
              menuitem {} {
                label None
                callback {mc->setTwValueType('N');}
                xywh {10 10 100 20} divider
              }
              menuitem {} {
                label RLI
                callback {mc->setTwValueType('R');}
                xywh {30 30 100 20} divider
              }
              menuitem {} {
                label {Max Amp}
                callback {mc->setTwValueType('M');}
                xywh {10 10 100 20}
              }
              menuitem {} {
                label {Max Amp SD}
                callback {mc->setTwValueType('4');}
                xywh {20 20 100 20}
              }
              menuitem {} {
                label {Max Amp Cha}
                callback {mc->setTwValueType('5');}
                xywh {30 30 100 20}
              }
              menuitem {} {
                label {Max Amp Cha SD}
                callback {mc->setTwValueType('6');}
                xywh {40 40 100 20}
              }
              menuitem {} {
                label {Max Amp Per Cha}
                callback {mc->setTwValueType('7');}
                xywh {50 50 100 20}
              }
              menuitem {} {
                label {Max Amp Per Cha SD}
                callback {mc->setTwValueType('8');}
                xywh {60 60 100 20} divider
              }
              menuitem {} {
                label {Max Slope}
                callback {mc->setTwValueType('9');}
                xywh {70 70 100 20} divider
              }
              menuitem {} {
                label {Spike Amp}
                callback {mc->setTwValueType('p');}
                xywh {80 80 100 20} divider
              }
              menuitem {} {
                label Amplitude
                callback {mc->setTwValueType('A');}
                xywh {10 10 100 20}
              }
              menuitem {} {
                label SD
                callback {mc->setTwValueType('S');}
                xywh {30 30 100 20} divider
              }
              menuitem {} {
                label {% Amp Latency}
                callback {mc->setTwValueType('H');}
                xywh {40 40 100 20}
              }
              menuitem {} {
                label {Max Amp Latency}
                callback {mc->setTwValueType('L');}
                xywh {30 30 100 20}
              }
            }
            Fl_Light_Button {} {
              label Trace
              callback {tw->setShowTrace(o->value());
tw->redraw();}
              xywh {650 750 120 25} value 1 labelfont 1
            }
            Fl_Light_Button {} {
              label Alpha
              callback {tw->setShowAlpha(o->value());
tw->redraw();}
              xywh {650 900 120 25}
            }
            Fl_Light_Button {} {
              label Vm
              callback {tw->setShowVm(o->value());
tw->redraw();}
              xywh {650 870 120 25}
            }
            Fl_Light_Button twShowPointLine {
              label {Point Line}
              callback {tw->setShowPointLine(o->value());
tw->redraw();}
              xywh {650 720 120 25} labelfont 1
            }
            Fl_Light_Button {} {
              label {Time Course}
              callback {mc->setTwTimeCourseFlag(o->value());}
              xywh {650 810 120 25} labelfont 1
            }
            Fl_Light_Button {} {
              label {Saved Traces}
              callback {tw->setShowSavedTraces(o->value());
tw->redraw();}
              xywh {650 840 120 25} labelfont 1
            }
            Fl_Light_Button {} {
              label Slope
              callback {tw->setShowSlope(o->value());
tw->redraw();}
              xywh {650 780 120 25} labelfont 1
            }
            Fl_Choice {} {
              label {Mode:} open
              xywh {690 690 80 25} down_box BORDER_BOX
            } {
              menuitem {} {
                label Optical
                callback {tw->setHandleType('o');}
                xywh {0 0 100 20} value 1
              }
              menuitem {} {
                label Field
                callback {tw->setHandleType('f');}
                xywh {0 0 100 20}
              }
              menuitem {} {
                label LTP
                callback {tw->setHandleType('l');}
                xywh {0 0 100 20}
              }
            }
          }
          Fl_Tabs {} {
            label Display open
            xywh {860 660 415 305} labeltype NO_LABEL
          } {
            Fl_Group {} {
              label Display
              xywh {860 685 415 280} color 247
            } {
              Fl_Group {} {
                label {Time Course}
                xywh {865 710 345 35} box DOWN_BOX color 162 labelfont 1 align 5
              } {
                Fl_Choice timeCourseType {
                  label {Time Course}
                  xywh {870 715 140 25} down_box BORDER_BOX labeltype NO_LABEL
                } {
                  menuitem {} {
                    label RLI
                    callback {mc->setTwTimeCourseType('R');}
                    xywh {35 35 100 20}
                  }
                  menuitem {} {
                    label Amplitude
                    callback {mc->setTwTimeCourseType('A');}
                    xywh {45 45 100 20}
                  }
                  menuitem {} {
                    label {Max Amp}
                    callback {mc->setTwTimeCourseType('M');}
                    xywh {15 15 100 20} divider
                  }
                  menuitem {} {
                    label {% Amp Latency}
                    callback {mc->setTwTimeCourseType('H');}
                    xywh {45 45 100 20}
                  }
                  menuitem {} {
                    label {Max Amp Latency}
                    callback {mc->setTwTimeCourseType('L');}
                    xywh {35 35 100 20}
                  }
                }
                Fl_Light_Button twShowFileLine {
                  label {File Line}
                  callback {tw->setShowFileLine(o->value());
tw->redraw();}
                  xywh {1015 715 85 25} labelfont 1
                }
                Fl_Light_Button {} {
                  label Reference
                  callback {tw->setShowRef(o->value());
tw->redraw();}
                  xywh {1105 715 100 25} labelfont 1
                }
              }
              Fl_Group {} {
                label {Saved Traces}
                xywh {865 765 400 35} box DOWN_BOX color 182 labelfont 1 align 5
              } {
                Fl_Button {} {
                  label {Save Traces}
                  callback {mc->saveTraces2();}
                  xywh {870 770 95 25}
                }
                Fl_Output secondFileName {
                  label {File Name:}
                  xywh {1145 770 115 25}
                }
                Fl_Output savedTracesTrialNoTxt {
                  label {Trial No:}
                  xywh {1025 770 40 25}
                }
              }
              Fl_Light_Button {} {
                label {Normalize DI/I}
                callback {mc->setNormalization(o->value());}
                xywh {865 835 115 25}
              }
              Fl_Light_Button {} {
                label Superimpose
                callback {tw->setSuperimpose(o->value());
tw->redraw();}
                xywh {865 805 115 25}
              }
              Fl_Light_Button {} {
                label {Normalize LTP}
                callback {tw->setTimeCourseNormalizationFlag(o->value());
tw->redraw();}
                xywh {865 865 115 25}
              }
            }
            Fl_Group {} {
              label Simulation
              xywh {860 685 415 280} color 215 hide
            } {
              Fl_Slider R1Slider {
                callback {char buf[16];
sprintf(buf,"%.3g",tw->convertFittingVar(4,o->value()));
R1Txt->value(buf);

tw->setFittingVar(4,o->value());
tw->redraw();}
                xywh {1025 790 245 25} type {Horz Knob} color 17 selection_color 1 minimum -100 maximum 100 step 1
              }
              Fl_Output R1Txt {
                label {Gsyn/Gleak}
                xywh {950 790 75 25} labelfont 1 labelsize 12 when 0 textfont 1 textsize 12
              }
              Fl_Slider R2Slider {
                callback {char buf[16];
sprintf(buf,"%.3g",tw->convertFittingVar(3,o->value()));
R2Txt->value(buf);

tw->setFittingVar(3,o->value());
tw->redraw();}
                xywh {1025 765 245 25} type {Horz Knob} color 17 selection_color 1 minimum -100 maximum 100 step 1
                code0 {\#include <stdlib.h>}
                code1 {\#include <math.h>}
              }
              Fl_Output R2Txt {
                label {Cm/Gleak}
                xywh {950 765 75 25} labelfont 1 labelsize 12 when 0 textfont 1 textsize 12
              }
              Fl_Slider alphaTauSlider {
                callback {char buf[16];
sprintf(buf,"%.3g",tw->convertFittingVar(2,o->value()));
alphaTauTxt->value(buf);

tw->setFittingVar(2,o->value());
tw->redraw();}
                xywh {1025 740 245 25} type {Horz Knob} color 17 selection_color 1 minimum -100 maximum 100 step 1
                code0 {\#include <stdlib.h>}
                code1 {\#include <math.h>}
              }
              Fl_Output alphaTauTxt {
                label {Tau (pt)}
                xywh {950 740 75 25} labelfont 1 labelsize 12 when 0 textfont 1 textsize 12
              }
              Fl_Slider alphaAmplitudeSlider {
                callback {char buf[16];
sprintf(buf,"%.3g",tw->convertFittingVar(1,o->value()));
alphaAmpTxt->value(buf);

tw->setFittingVar(1,o->value());
tw->redraw();}
                xywh {1025 715 245 25} type {Horz Knob} color 17 selection_color 1 minimum -100 maximum 100 step 1 value 0.3
                code0 {\#include <stdlib.h>}
                code1 {\#include <math.h>}
                code2 {\#include <stdio.h>}
              }
              Fl_Output alphaAmpTxt {
                label Amp
                xywh {950 715 75 25} labelfont 1 labelsize 12 when 0 textfont 1 textsize 12
              }
              Fl_Button {} {
                label {Fit x1}
                callback {mc->fitVm();}
                xywh {1210 845 60 25}
              }
              Fl_Button {} {
                label {Fit x10}
                callback {mc->fitVmX10();}
                xywh {1210 875 60 25}
              }
              Fl_Roller alphaStartPointRoller {
                callback {char buf[16];
_gcvt(o->value(),4,buf);
tw->setFittingVar(0,o->value());
tw->redraw();
alphaStartPointTxt->value(buf);}
                xywh {1025 690 50 25} type Horizontal maximum 10000 step 1 value 160
                code0 {\#include <stdlib.h>}
              }
              Fl_Input alphaStartPointTxt {
                label {Onset (pt)}
                callback {int value=atoi(o->value());
tw->setFittingVar(0,value);
tw->redraw();
alphaStartPointRoller->value(value);}
                xywh {950 690 75 25} type Int labelfont 1 labelsize 12 when 8 textfont 1 textsize 12
              }
              Fl_Input alphaSpikeStart {
                label {Spike Start}
                callback {mc->setAlphaSpikeStart(o->value());}
                xywh {950 845 45 25} type Int when 8
              }
              Fl_Input alphaSpikeEnd {
                label End
                callback {mc->setAlphaSpikeEnd(o->value());}
                xywh {1025 845 45 25} type Int when 8
              }
              Fl_Input alphaWindow {
                label {Fit Pts}
                callback {tw->redraw();}
                xywh {1150 875 55 25} type Int when 8
              }
              Fl_Input alphaAxonStart {
                label {Axon Start}
                xywh {950 875 45 25} type Int when 8
              }
              Fl_Input alphaAxonEnd {
                label End
                xywh {1025 875 45 25} type Int when 8
              }
              Fl_Check_Button {} {
                label button
                callback {tw->setChangeBits(1,o->value());}
                xywh {860 715 25 25} down_box DOWN_BOX value 1 labeltype NO_LABEL
              }
              Fl_Check_Button {} {
                label button
                callback {tw->setChangeBits(2,o->value());}
                xywh {860 740 25 25} down_box DOWN_BOX value 1 labeltype NO_LABEL
              }
              Fl_Check_Button {} {
                label button
                callback {tw->setChangeBits(3,o->value());}
                xywh {860 765 25 25} down_box DOWN_BOX value 1 labeltype NO_LABEL
              }
              Fl_Check_Button {} {
                label button
                callback {tw->setChangeBits(0,o->value());}
                xywh {860 690 25 25} down_box DOWN_BOX value 1 labeltype NO_LABEL
              }
              Fl_Check_Button {} {
                label button
                callback {tw->setChangeBits(4,o->value());}
                xywh {860 790 25 25} down_box DOWN_BOX labeltype NO_LABEL
              }
              Fl_Value_Slider fittingRange {
                label Range
                xywh {910 815 115 25} type {Horz Knob} selection_color 1 align 4 when 0 minimum 1 maximum 5 step 1 value 1
              }
              Fl_Button {} {
                label {Set All Diodes}
                callback {mc->setFittingVarAllDiodes();}
                xywh {865 905 95 25}
              }
              Fl_Button {} {
                label {Fit All Diodes}
                callback {mc->fitAllDiodes();}
                xywh {865 935 95 25}
              }
              Fl_Light_Button {} {
                label {Cal. Whole Vm}
                callback {tw->setCalWholeVm(o->value());
tw->redraw();}
                xywh {965 935 115 25}
              }
              Fl_Light_Button {} {
                label Auto
                callback {mc->setAutoDetectSpike(o->value());}
                xywh {1075 845 55 25} value 1
              }
              Fl_Input spikeSlopeThreshold {
                label {Spike Slope Thre.}
                callback {tw->setSpikeSlopeThreshold(atof(o->value()));}
                xywh {1205 905 65 25} type Float when 8
              }
              Fl_Value_Slider fittingStepSize {
                label {Step Size}
                xywh {1100 815 170 25} type {Horz Knob} selection_color 1 align 4 when 0 minimum 1 maximum 16 step 1 value 1
              }
              Fl_Input spikeAmpThreshold {
                label {Spike Amp Thre.}
                callback {tw->setSpikeAmpThreshold(atof(o->value()));}
                xywh {1205 930 65 25} type Float when 8
              }
              Fl_Button {} {
                label {Init. Amp}
                callback {mc->initializeFittingAmp();}
                xywh {965 905 70 25}
              }
              Fl_Input onsetLowerBoundTxt {
                label {Range (pt)}
                callback {tw->setOnsetBounds(0,o->value());}
                xywh {1165 690 45 25} type Int labelfont 1 labelsize 12 when 8 textfont 1 textsize 12
              }
              Fl_Input onsetHigherBoundTxt {
                label {~ }
                callback {tw->setOnsetBounds(1,o->value());}
                xywh {1225 690 45 25} type Int labelfont 1 labelsize 12 when 8 textfont 1 textsize 12
              }
            }
            Fl_Group {} {
              label {Save/Load}
              xywh {860 685 415 280} color 174 labelfont 1 align 5 hide
            } {
              Fl_Button {} {
                label Traces
                callback {tw->saveTraces();}
                xywh {865 750 55 25}
              }
              Fl_Choice {} {
                label {choice:}
                xywh {925 750 55 25} down_box BORDER_BOX labeltype NO_LABEL
              } {
                menuitem {} {
                  label {(pt)}
                  callback {tw->setSave2FileType('p');}
                  xywh {20 20 100 20}
                }
                menuitem {} {
                  label {(ms)}
                  callback {tw->setSave2FileType('m');}
                  xywh {20 20 100 20}
                }
              }
              Fl_Button {} {
                label {Save Time Course}
                callback {tw->saveTimeCourse();}
                xywh {865 720 130 25}
              }
              Fl_Button {} {
                label {Save Values}
                callback {mc->saveValues();}
                xywh {865 690 130 25}
              }
              Fl_Input twSaveTracesStartPt {
                label {input:}
                callback {tw->setSaveTracesPt('s',o->value());}
                xywh {980 750 50 25} type Int labeltype NO_LABEL when 8
              }
              Fl_Input twSaveTracesEndPt {
                label {(pt)}
                callback {tw->setSaveTracesPt('e',o->value());}
                xywh {1030 750 50 25} type Int align 8 when 8
              }
              Fl_Button {} {
                label {Save Fitting Variables}
                callback {tw->saveFittingVar();}
                xywh {865 780 150 25}
              }
              Fl_Button {} {
                label {Save Simulation Properties}
                callback {tw->saveEPSP();}
                xywh {865 840 180 25}
              }
              Fl_Button {} {
                label {Save Alpha/Vm Traces}
                callback {tw->saveAlphaVm();}
                xywh {865 810 180 25}
              }
              Fl_Button {} {
                label {Load Fitting Variables}
                callback {tw->loadFittingVar();}
                xywh {1020 780 150 25}
              }
            }
          }
          Fl_Box tw {
            xywh {640 35 638 620} box BORDER_FRAME color 0 labeltype NO_LABEL
            code0 {\#include "TraceWindow.h"}
            class TraceWindow
          }
        }
        Fl_Group dapGroup {
          label DAP
          xywh {640 30 640 940} color 26 hide
        } {
          Fl_Group {} {
            label {TTL Output Controls}
            xywh {645 35 630 165} box DOWN_BOX color 254 labelfont 1 align 17
          } {
            Fl_Box {} {
              label ONSET
              xywh {745 50 60 20} color 0 labelfont 8 align 16
            }
            Fl_Box {} {
              label {DURATION ( m sec)}
              xywh {805 50 135 20} color 0 labelfont 8 align 20
            }
            Fl_Box {} {
              label Reset
              xywh {645 70 95 25} color 0 align 24
            }
            Fl_Input resetOnset {
              callback {mc->setResetOnset(o->value());}
              xywh {740 70 50 25} type Int align 8 when 8
            }
            Fl_Input resetDuration {
              callback {mc->setResetDuration(o->value());}
              xywh {790 70 50 25} type Int align 8 when 8
            }
            Fl_Box {} {
              label Shutter
              xywh {645 95 95 25} color 0 align 24
            }
            Fl_Input shutterOnset {
              callback {mc->setShutterOnset(o->value());}
              xywh {740 95 50 25} type Int align 8 when 8
            }
            Fl_Input shutterDuration {
              callback {mc->setShutterDuration(o->value());}
              xywh {790 95 50 25} type Int align 8 when 8
            }
            Fl_Box {} {
              label Acquisition
              xywh {645 120 95 25} color 0 align 24
            }
            Fl_Input acquiOnset {
              callback {mc->setAcquiOnset(o->value());}
              xywh {740 120 50 25} type Int align 8 when 8
            }
            Fl_Output acquiDuration {
              xywh {790 120 50 25} labeltype NO_LABEL when 0 textfont 1 textcolor 4
            }
            Fl_Box {} {
              label {Stimulator \#1}
              xywh {645 145 95 25} color 0 align 24
            }
            Fl_Input sti1Onset {
              callback {mc->setStiOnset(1,o->value());}
              xywh {740 145 50 25} type Int align 8 when 8
            }
            Fl_Input sti1Duration {
              callback {mc->setStiDuration(1,o->value());}
              xywh {790 145 50 25} type Int align 8 when 8
            }
            Fl_Box {} {
              label {Stimulator \#2}
              xywh {645 170 95 25} color 0 align 24
            }
            Fl_Input sti2Onset {
              callback {mc->setStiOnset(2,o->value());}
              xywh {740 170 50 25} type Int align 8 when 8
            }
            Fl_Input sti2Duration {
              callback {mc->setStiDuration(2,o->value());}
              xywh {790 170 50 25} type Int align 8 when 8
            }
            Fl_Box dapWindow {
              xywh {840 70 430 125} box BORDER_BOX color 0 labelcolor 7 align 16
              code0 {\#include "DapWindow.h"}
              class DapWindow
            }
          }
          Fl_Group {} {
            label {Acquisition Controls}
            xywh {645 205 350 115} box DOWN_BOX color 87 labelfont 1 align 17
          } {
            Fl_Input numPts {
              label {Number of Points:}
              callback {mc->setNumPts(o->value());}
              xywh {810 230 75 25} type Int when 8
            }
            Fl_Input intPts {
              label {Interval between Points:}
              callback {mc->setIntPts(o->value());}
              xywh {810 260 75 25} type Float when 8
            }
            Fl_Output samplingRate {
              label {Sampling Rate:}
              xywh {810 290 105 25} box BORDER_FRAME color 26 selection_color 26 labelfont 1 textfont 1
            }
            Fl_Box {} {
              label {(0.06~10 m sec)}
              xywh {885 260 110 25} align 20
            }
          }
          Fl_Group {} {
            label {Stimulator \#1}
            xywh {645 330 295 135} box DOWN_BOX color 222 labelfont 1 align 17
          } {
            Fl_Input numBursts1 {
              label {Number of Bursts:}
              callback {mc->setNumBursts(1,o->value());}
              xywh {810 410 75 25} when 8
            }
            Fl_Input intBursts1 {
              label {Interval between Bursts:}
              callback {mc->setIntBursts(1,o->value());}
              xywh {810 435 75 25} when 8
            }
            Fl_Box {} {
              label {(m sec)}
              xywh {885 435 55 25} align 20
            }
            Fl_Input numPulses1 {
              label {Number of pulses:}
              callback {mc->setNumPulses(1,o->value());}
              xywh {810 355 75 25} when 8
            }
            Fl_Input intPulses1 {
              label {Interval between pulses:}
              callback {mc->setIntPulses(1,o->value());}
              xywh {810 380 75 25} when 8
            }
            Fl_Box {} {
              label {(m sec)}
              xywh {885 380 55 25} align 20
            }
          }
          Fl_Group {} {
            label {Stimulator \#2}
            xywh {945 330 295 135} box DOWN_BOX color 222 labelfont 1 align 17
          } {
            Fl_Input numBursts2 {
              label {Number of Bursts:}
              callback {mc->setNumBursts(2,o->value());}
              xywh {1110 410 75 25} when 8
            }
            Fl_Input intBursts2 {
              label {Interval between Bursts:}
              callback {mc->setIntBursts(2,o->value());}
              xywh {1110 435 75 25} when 8
            }
            Fl_Box {} {
              label {(m sec)}
              xywh {1185 435 55 25} align 20
            }
            Fl_Input numPulses2 {
              label {Number of pulses:}
              callback {mc->setNumPulses(2,o->value());}
              xywh {1110 355 75 25} when 8
            }
            Fl_Input intPulses2 {
              label {Interval between pulses:}
              callback {mc->setIntPulses(2,o->value());}
              xywh {1110 380 75 25} when 8
            }
            Fl_Box {} {
              label {(m sec)}
              xywh {1185 380 55 25} align 20
            }
          }
          Fl_Group {} {
            label {Record Schedule}
            xywh {645 480 310 85} box DOWN_BOX color 103 labelfont 1 align 17
          } {
            Fl_Input intRecords {
              label {Interval between Records:}
              callback {mc->setIntRecords(o->value());}
              xywh {820 530 60 25} type Int when 8
            }
            Fl_Input numRecords {
              label {Number of Records:}
              callback {mc->setNumRecords(o->value());}
              xywh {820 500 60 25} type Int when 8
            }
            Fl_Box {} {
              label {(sec)}
              xywh {880 530 75 25} align 20
            }
          }
          Fl_Group {} {
            label {Trial Controls}
            xywh {645 580 310 120} box DOWN_BOX color 175 labelfont 1 align 17
          } {
            Fl_Box {} {
              label {(sec)}
              xywh {875 635 40 25} align 20
            }
            Fl_Input numTrials {
              label {Number of Trials:}
              callback {mc->setNumTrials(o->value());}
              xywh {825 605 50 25} type Int when 8
            }
            Fl_Input numSkippedTrials {
              label {Number of Skipped Trials:}
              callback {mc->setNumSkippedTrials(o->value());}
              xywh {825 670 50 25} type Int when 8 deactivate
            }
            Fl_Input intTrials {
              label {Interval between Trials:}
              callback {mc->setIntTrials(o->value());}
              xywh {825 635 50 25} type Int when 8
            }
          }
          Fl_Group {} {
            label Gain
            xywh {965 480 245 85} box DOWN_BOX color 172 labelfont 1 align 17
          } {
            Fl_Button {} {
              label {@<}
              callback {mc->setAmplifierGain(Decrease_Acqui_Gain);}
              xywh {1135 500 30 25}
            }
            Fl_Button {} {
              label {@>}
              callback {mc->setAmplifierGain(Increase_Acqui_Gain);}
              xywh {1170 500 30 25}
            }
            Fl_Button {} {
              label {@<}
              callback {mc->setAmplifierGain(Decrease_RLI_Gain);}
              xywh {1135 530 30 25}
            }
            Fl_Button {} {
              label {@>}
              callback {mc->setAmplifierGain(Increase_RLI_Gain);}
              xywh {1170 530 30 25}
            }
            Fl_Output acquiGain {
              label {Acquisition Gain:}
              xywh {1080 500 50 25} when 0
            }
            Fl_Output rliGain {
              label {RLI Gain:}
              xywh {1080 530 50 25}
            }
          }
        }
        Fl_Group mapGroup {
          label {Map/Movie} open
          xywh {640 30 640 940} color 26 hide
        } {
          Fl_Group {} {
            label {Mode Control} open
            xywh {645 660 615 25} labeltype NO_LABEL
          } {
            Fl_Choice {} {
              label {Mode:}
              xywh {690 660 70 25} down_box BORDER_BOX
            } {
              menuitem {} {
                label Map
                callback {cw->setMapFlag(1);
cw->valid(0);
cw->redraw();}
                xywh {30 30 100 20}
              }
              menuitem {} {
                label Movie
                callback {cw->setMapFlag(0);
cw->valid(0);
cw->redraw();}
                xywh {50 50 100 20}
              }
            }
            Fl_Choice mapFeatureType {
              label {Map:}
              xywh {805 660 145 25} down_box BORDER_BOX
            } {
              menuitem {} {
                label RLI
                callback {cw->setMapMode(CW_RLI);
cw->valid(0);
cw->redraw();}
                xywh {25 25 100 20}
              }
              menuitem {} {
                label {Max Amp}
                callback {cw->setMapMode(CW_Max_Amp);
cw->valid(0);
cw->redraw();}
                xywh {55 55 100 20}
              }
              menuitem {} {
                label {Spike Amp}
                callback {cw->setMapMode(CW_Spike_Amp);
cw->valid(0);
cw->redraw();}
                xywh {45 45 100 20} divider
              }
              menuitem {} {
                label {% Amp Latency}
                callback {cw->setMapMode(CW_Per_Amp_Latency);
cw->valid(0);
cw->redraw();}
                xywh {75 75 100 20}
              }
              menuitem {} {
                label {Max Amp Latency}
                callback {cw->setMapMode(CW_Max_Amp_Latency);
cw->valid(0);
cw->redraw();}
                xywh {55 55 100 20}
              }
            }
            Fl_Choice {} {
              label {Movie:} open
              xywh {1005 660 255 25} down_box BORDER_BOX
            } {
              menuitem {} {
                label {Amp (Normalized to array maximum)}
                callback {cw->setStopFlag(1);
cw->setMovieMode(ColorWindow::AmpNor2ArrayMax);
cw->redraw();}
                xywh {50 50 100 20}
              }
              menuitem {} {
                label {Amp (Normalized to diode maximum)}
                callback {cw->setStopFlag(1);
cw->setMovieMode(ColorWindow::AmpNor2DiodeMax);
cw->redraw();}
                xywh {60 60 100 20} divider
              }
            }
          }
          Fl_Group {} {
            label {Color Controls}
            xywh {645 690 320 170} box DOWN_FRAME labelfont 1 align 17
          } {
            Fl_Choice {} {
              label {Color Scale:} open
              xywh {750 715 125 25} down_box BORDER_BOX
            } {
              menuitem {} {
                label {Color Scale 1}
                callback {cw->setTextureIndex(0);
cw->valid(0);
cw->redraw();}
                xywh {25 25 100 20}
              }
              menuitem {} {
                label {Color Scale 2}
                callback {cw->setTextureIndex(1);
cw->valid(0);
cw->redraw();}
                xywh {35 35 100 20}
              }
              menuitem {} {
                label {Blue to Red}
                callback {cw->setTextureIndex(2);
cw->valid(0);
cw->redraw();}
                xywh {35 35 100 20}
              }
              menuitem {} {
                label {Gray Scale}
                callback {cw->setTextureIndex(3);
cw->valid(0);
cw->redraw();}
                xywh {45 45 100 20}
              }
            }
            Fl_Choice {} {
              label {Control Mode:} open
              xywh {750 745 125 25} down_box BORDER_BOX
            } {
              menuitem {} {
                label Bounds
                callback {cw->setColorControlMode('B');
cw->valid(0);
cw->redraw();}
                xywh {65 65 100 20}
              }
              menuitem {} {
                label {Center - Amp}
                callback {cw->setColorControlMode('C');
cw->valid(0);
cw->redraw();}
                xywh {75 75 100 20}
              }
            }
            Fl_Tabs {} {
              label {Color Scale Bar} open
              xywh {750 775 205 80} color 26 labeltype NO_LABEL
            } {
              Fl_Group {} {
                label Bounds
                xywh {750 795 205 60} color 23 when 0
              } {
                Fl_Roller {} {
                  callback {cw->setColorUpperBound(o->value());
cw->valid(0);
cw->redraw();}
                  xywh {870 800 75 25} type Horizontal minimum -100 maximum 100 step 0.01 value 1
                }
                Fl_Output cwColorUpperBound {
                  label {Upper:}
                  xywh {805 800 60 25}
                }
                Fl_Output cwColorLowerBound {
                  label {Lower:}
                  xywh {805 825 60 25}
                }
                Fl_Roller {} {
                  callback {cw->setColorLowerBound(o->value());
cw->valid(0);
cw->redraw();}
                  xywh {870 825 75 25} type Horizontal minimum -100 maximum 100 step 0.01
                }
              }
              Fl_Group {} {
                label Center
                xywh {750 795 205 60} color 23 when 0 hide
              } {
                Fl_Roller {} {
                  callback {cw->setColorAmp(o->value());
cw->valid(0);
cw->redraw();}
                  xywh {870 800 75 25} type Horizontal minimum -100 maximum 100 step 0.01 value 1
                }
                Fl_Output cwColorAmp {
                  label {Amp:}
                  xywh {805 800 60 25}
                }
                Fl_Output cwColorCenter {
                  label {Center:}
                  xywh {805 825 60 25}
                }
                Fl_Roller {} {
                  callback {cw->setColorCenter(o->value());
cw->valid(0);
cw->redraw();}
                  xywh {870 825 75 25} type Horizontal minimum -100 maximum 100 step 0.01
                }
              }
            }
            Fl_Light_Button {} {
              label Contour
              callback {cw->setContourFlag(o->value());
cw->valid(0);
cw->redraw();}
              xywh {880 715 80 25} value 1
            }
          }
          Fl_Group {} {
            label {Movie Controls}
            xywh {1005 690 255 170} box DOWN_FRAME labelfont 1 align 17
          } {
            Fl_Group {} {
              xywh {1010 715 215 25}
            } {
              Fl_Button {} {
                label {@|<}
                callback {cw->setStopFlag(1);
cw->resetCurrentPt();
cw->redraw();}
                xywh {1015 715 40 25}
              }
              Fl_Button {} {
                label {@>}
                callback {cw->setStopFlag(0);
cw->playMovie();}
                xywh {1060 715 40 25}
              }
              Fl_Button {} {
                label {@||}
                callback {cw->setStopFlag(1);}
                xywh {1105 715 40 25}
              }
              Fl_Light_Button {} {
                label Repeat
                callback {cw->setRepeatFlag(o->value());}
                xywh {1150 715 75 25} selection_color 1
              }
            }
            Fl_Roller cwCurrentPtRoller {
              callback {cw->setCurrentPt(int(o->value()));
cw->redraw();}
              xywh {1150 745 75 25} type Horizontal maximum 10000 step 1 value 160
            }
            Fl_Output cwCurrentPtText {
              label {Current Pt}
              xywh {1095 745 50 25}
            }
            Fl_Value_Slider {} {
              label Speed
              callback {cw->setSpeed(o->value());}
              xywh {1060 825 190 25} type {Horz Knob} color 52 selection_color 1 align 4 minimum 1 maximum 50 step 1 value 10
            }
            Fl_Input cwStartPt {
              label {Start Pt}
              callback {cw->setStartPt(o->value());}
              xywh {1095 770 50 25} type Int when 8
            }
            Fl_Input cwEndPt {
              label {End Pt}
              callback {cw->setEndPt(o->value());}
              xywh {1095 795 50 25} when 8
            }
            Fl_Light_Button {} {
              label {Make Movie}
              callback {cw->setMakeMovieFlag(o->value());}
              xywh {1150 795 100 25}
            }
          }
          Fl_Light_Button {} {
            label {Black BG}
            callback {cw->setBlackBGFlag(o->value());
cw->valid(0);
cw->redraw();}
            xywh {880 745 80 25} value 1
          }
          Fl_Box cw {
            label ColorWin
            xywh {640 35 638 620} box BORDER_FRAME color 0
            code0 {\#include "ColorWindow.h"}
            class ColorWindow
          }
        }
      }
    }
  }
  Function {show()} {} {
    code {mainWindow->show();} {}
  }
  decl {void init();} {public
  }
  decl {void setValue();} {public
  }
} 
