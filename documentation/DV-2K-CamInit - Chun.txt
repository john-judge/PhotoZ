
// Load edt config for all 4 channels
			sprintf(command, "%s:\\EDT\\pdv\\initcam -u pdv0_0 -f %s", home_drive, edt_cfg_name);
			system(command);
			sprintf(command, "%s:\\EDT\\pdv\\initcam -u pdv0_1 -f %s", home_drive, edt_cfg_name);
			system(command);
			sprintf(command, "%s:\\EDT\\pdv\\initcam -u pdv1_0 -f %s", home_drive, edt_cfg_name);
			system(command);
			sprintf(command, "%s:\\EDT\\pdv\\initcam -u pdv1_1 -f %s", home_drive, edt_cfg_name);
			system(command);

// Open device pointer for all 4 channels, same for close
		for (i = 0; i < pdv_chan_num; i++)
			pdv_pt[i] = pdv_open_channel(EDT_INTERFACE, pdv_units[i], pdv_channels[i]);


// Serial commands

			int hbin = 0;
			if (ccd_lib_bin[curConfig] > 1)
				hbin = 1;
			int start_line;			
			if (start_line_lib[curConfig])
				start_line = start_line_lib[curConfig];
			else
				start_line = 65 + (1024-cam_num_row*ccd_lib_bin[curConfig]);

			sprintf(command,"@SPI 0; 2");
			SM_serial_command(command);
			Sleep(20);
			sprintf(command,"@SPI 0; 0");
			SM_serial_command(command);
			Sleep(20);
			sprintf(command,"@SPI 0; 4");
			SM_serial_command(command);
			Sleep(20);
			sprintf(command,"@PSR %d; %d", ccd_lib_bin[curConfig], start_line);
			SM_serial_command(command);
			Sleep(20);
			sprintf(command,"@SPI 0; %d", hbin);
			SM_serial_command(command);
			Sleep(20);

// Setgap for 2K - important
			sprintf(command, "%s:\\EDT\\pdv\\setgap2k", home_drive);
			system(command);

// Acqusition needs to be done for all 4 channels and then you need to deinterleave after. Bigger chunk (super frames of 10 to 100 or more frames depending the image size) and multithread acquisition is needed to avoid losing synch or losing frames.